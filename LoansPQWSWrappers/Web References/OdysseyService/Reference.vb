'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.42.
'
Namespace OdysseyService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ServiceSoap", [Namespace]:="http://odysseyservices.net/automatedui/")>  _
    Partial Public Class ServiceWse
        Inherits Microsoft.Web.Services3.WebServicesClientProtocol
        
        Private GetReceivedFoldersRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReceivedFoldersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReceivedFileNamesRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReceivedFileNamesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownLoadFilesFromReceivedFolderRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownLoadFilesFromReceivedFolderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteFilesFromReceivedFolderRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteFilesFromReceivedFolderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getJobDetail3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getJobDetail3RSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getJobDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getJobDetailRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getJobDetail2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getJobDetail2RSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getItemDetailByDatesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getItemDetailByDatesRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getItemDetailByDates2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getItemDetailByDates2RSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobTypeDocsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobTypeDocsRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobTypeListsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobTypeListsRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDefaultModeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDefaultModeRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetShouldSuppressFaxConversionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetShouldSuppressFaxConversionRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatusExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatusForJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatusForJob2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobTypesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StartBroadcastOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StartPreviewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownLoadFilesFromFoldersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteFilesFromFoldersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadFilesToFoldersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDocumentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownLoadFilesFromFoldersRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReportRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteFilesFromFoldersRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadFilesToFoldersRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerNumberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDocumentsRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelJobRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ApprovePreviewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ApprovePreviewRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPreviewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPreviewRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListsRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobTypesRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatusRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatusForJobRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatusForJob2RSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatusExRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatusEx2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatusEx2RSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StartBroadcastRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StartHtmlMergeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StartHtmlMergeRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StartPreviewRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SubmitFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SubmitFileRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInboundFaxActivityRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInboundFaxActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_OdysseyService_Service
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetReceivedFoldersRSCompleted As GetReceivedFoldersRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReceivedFoldersCompleted As GetReceivedFoldersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReceivedFileNamesRSCompleted As GetReceivedFileNamesRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReceivedFileNamesCompleted As GetReceivedFileNamesCompletedEventHandler
        
        '''<remarks/>
        Public Event DownLoadFilesFromReceivedFolderRSCompleted As DownLoadFilesFromReceivedFolderRSCompletedEventHandler
        
        '''<remarks/>
        Public Event DownLoadFilesFromReceivedFolderCompleted As DownLoadFilesFromReceivedFolderCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteFilesFromReceivedFolderRSCompleted As DeleteFilesFromReceivedFolderRSCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteFilesFromReceivedFolderCompleted As DeleteFilesFromReceivedFolderCompletedEventHandler
        
        '''<remarks/>
        Public Event getJobDetail3Completed As getJobDetail3CompletedEventHandler
        
        '''<remarks/>
        Public Event getJobDetail3RSCompleted As getJobDetail3RSCompletedEventHandler
        
        '''<remarks/>
        Public Event getJobDetailCompleted As getJobDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event getJobDetailRSCompleted As getJobDetailRSCompletedEventHandler
        
        '''<remarks/>
        Public Event getJobDetail2Completed As getJobDetail2CompletedEventHandler
        
        '''<remarks/>
        Public Event getJobDetail2RSCompleted As getJobDetail2RSCompletedEventHandler
        
        '''<remarks/>
        Public Event getItemDetailByDatesCompleted As getItemDetailByDatesCompletedEventHandler
        
        '''<remarks/>
        Public Event getItemDetailByDatesRSCompleted As getItemDetailByDatesRSCompletedEventHandler
        
        '''<remarks/>
        Public Event getItemDetailByDates2Completed As getItemDetailByDates2CompletedEventHandler
        
        '''<remarks/>
        Public Event getItemDetailByDates2RSCompleted As getItemDetailByDates2RSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobTypeDocsCompleted As GetJobTypeDocsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobTypeDocsRSCompleted As GetJobTypeDocsRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobTypeListsCompleted As GetJobTypeListsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobTypeListsRSCompleted As GetJobTypeListsRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDefaultModeCompleted As GetDefaultModeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDefaultModeRSCompleted As GetDefaultModeRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetShouldSuppressFaxConversionCompleted As GetShouldSuppressFaxConversionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetShouldSuppressFaxConversionRSCompleted As GetShouldSuppressFaxConversionRSCompletedEventHandler
        
        '''<remarks/>
        Public Event StatusExCompleted As StatusExCompletedEventHandler
        
        '''<remarks/>
        Public Event StatusCompleted As StatusCompletedEventHandler
        
        '''<remarks/>
        Public Event StatusForJobCompleted As StatusForJobCompletedEventHandler
        
        '''<remarks/>
        Public Event StatusForJob2Completed As StatusForJob2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobTypesCompleted As GetJobTypesCompletedEventHandler
        
        '''<remarks/>
        Public Event StartBroadcastCompleted As StartBroadcastCompletedEventHandler
        
        '''<remarks/>
        Public Event StartPreviewCompleted As StartPreviewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGroupCompleted As GetGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event DownLoadFilesFromFoldersCompleted As DownLoadFilesFromFoldersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReportCompleted As GetReportCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteFilesFromFoldersCompleted As DeleteFilesFromFoldersCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadFilesToFoldersCompleted As UploadFilesToFoldersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDocumentsCompleted As GetDocumentsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListsCompleted As GetListsCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelJobCompleted As CancelJobCompletedEventHandler
        
        '''<remarks/>
        Public Event DownLoadFilesFromFoldersRSCompleted As DownLoadFilesFromFoldersRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReportRSCompleted As GetReportRSCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteFilesFromFoldersRSCompleted As DeleteFilesFromFoldersRSCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadFilesToFoldersRSCompleted As UploadFilesToFoldersRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerNumberCompleted As GetCustomerNumberCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDocumentsRSCompleted As GetDocumentsRSCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelJobRSCompleted As CancelJobRSCompletedEventHandler
        
        '''<remarks/>
        Public Event ApprovePreviewCompleted As ApprovePreviewCompletedEventHandler
        
        '''<remarks/>
        Public Event ApprovePreviewRSCompleted As ApprovePreviewRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPreviewCompleted As GetPreviewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPreviewRSCompleted As GetPreviewRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListsRSCompleted As GetListsRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobTypesRSCompleted As GetJobTypesRSCompletedEventHandler
        
        '''<remarks/>
        Public Event StatusRSCompleted As StatusRSCompletedEventHandler
        
        '''<remarks/>
        Public Event StatusForJobRSCompleted As StatusForJobRSCompletedEventHandler
        
        '''<remarks/>
        Public Event StatusForJob2RSCompleted As StatusForJob2RSCompletedEventHandler
        
        '''<remarks/>
        Public Event StatusExRSCompleted As StatusExRSCompletedEventHandler
        
        '''<remarks/>
        Public Event StatusEx2Completed As StatusEx2CompletedEventHandler
        
        '''<remarks/>
        Public Event StatusEx2RSCompleted As StatusEx2RSCompletedEventHandler
        
        '''<remarks/>
        Public Event StartBroadcastRSCompleted As StartBroadcastRSCompletedEventHandler
        
        '''<remarks/>
        Public Event StartHtmlMergeCompleted As StartHtmlMergeCompletedEventHandler
        
        '''<remarks/>
        Public Event StartHtmlMergeRSCompleted As StartHtmlMergeRSCompletedEventHandler
        
        '''<remarks/>
        Public Event StartPreviewRSCompleted As StartPreviewRSCompletedEventHandler
        
        '''<remarks/>
        Public Event SubmitFileCompleted As SubmitFileCompletedEventHandler
        
        '''<remarks/>
        Public Event SubmitFileRSCompleted As SubmitFileRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInboundFaxActivityRSCompleted As GetInboundFaxActivityRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInboundFaxActivityCompleted As GetInboundFaxActivityCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetReceivedFoldersRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReceivedFoldersRS(ByVal CustomerNumber As Integer) As String()
            Dim results() As Object = Me.Invoke("GetReceivedFoldersRS", New Object() {CustomerNumber})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReceivedFoldersRSAsync(ByVal CustomerNumber As Integer)
            Me.GetReceivedFoldersRSAsync(CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReceivedFoldersRSAsync(ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.GetReceivedFoldersRSOperationCompleted Is Nothing) Then
                Me.GetReceivedFoldersRSOperationCompleted = AddressOf Me.OnGetReceivedFoldersRSOperationCompleted
            End If
            Me.InvokeAsync("GetReceivedFoldersRS", New Object() {CustomerNumber}, Me.GetReceivedFoldersRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReceivedFoldersRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReceivedFoldersRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReceivedFoldersRSCompleted(Me, New GetReceivedFoldersRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetReceivedFolders", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReceivedFolders() As String()
            Dim results() As Object = Me.Invoke("GetReceivedFolders", New Object(-1) {})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReceivedFoldersAsync()
            Me.GetReceivedFoldersAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReceivedFoldersAsync(ByVal userState As Object)
            If (Me.GetReceivedFoldersOperationCompleted Is Nothing) Then
                Me.GetReceivedFoldersOperationCompleted = AddressOf Me.OnGetReceivedFoldersOperationCompleted
            End If
            Me.InvokeAsync("GetReceivedFolders", New Object(-1) {}, Me.GetReceivedFoldersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReceivedFoldersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReceivedFoldersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReceivedFoldersCompleted(Me, New GetReceivedFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetReceivedFileNamesRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReceivedFileNamesRS(ByVal CustomerNumber As Integer, ByVal folder As String) As String()
            Dim results() As Object = Me.Invoke("GetReceivedFileNamesRS", New Object() {CustomerNumber, folder})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReceivedFileNamesRSAsync(ByVal CustomerNumber As Integer, ByVal folder As String)
            Me.GetReceivedFileNamesRSAsync(CustomerNumber, folder, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReceivedFileNamesRSAsync(ByVal CustomerNumber As Integer, ByVal folder As String, ByVal userState As Object)
            If (Me.GetReceivedFileNamesRSOperationCompleted Is Nothing) Then
                Me.GetReceivedFileNamesRSOperationCompleted = AddressOf Me.OnGetReceivedFileNamesRSOperationCompleted
            End If
            Me.InvokeAsync("GetReceivedFileNamesRS", New Object() {CustomerNumber, folder}, Me.GetReceivedFileNamesRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReceivedFileNamesRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReceivedFileNamesRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReceivedFileNamesRSCompleted(Me, New GetReceivedFileNamesRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetReceivedFileNames", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReceivedFileNames(ByVal folder As String) As String()
            Dim results() As Object = Me.Invoke("GetReceivedFileNames", New Object() {folder})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReceivedFileNamesAsync(ByVal folder As String)
            Me.GetReceivedFileNamesAsync(folder, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReceivedFileNamesAsync(ByVal folder As String, ByVal userState As Object)
            If (Me.GetReceivedFileNamesOperationCompleted Is Nothing) Then
                Me.GetReceivedFileNamesOperationCompleted = AddressOf Me.OnGetReceivedFileNamesOperationCompleted
            End If
            Me.InvokeAsync("GetReceivedFileNames", New Object() {folder}, Me.GetReceivedFileNamesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReceivedFileNamesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReceivedFileNamesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReceivedFileNamesCompleted(Me, New GetReceivedFileNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/DownLoadFilesFromReceivedFolderRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownLoadFilesFromReceivedFolderRS(ByVal CustomerNumber As Integer, ByVal folder As String, ByVal names() As String) As FileReference()
            Dim results() As Object = Me.Invoke("DownLoadFilesFromReceivedFolderRS", New Object() {CustomerNumber, folder, names})
            Return CType(results(0),FileReference())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownLoadFilesFromReceivedFolderRSAsync(ByVal CustomerNumber As Integer, ByVal folder As String, ByVal names() As String)
            Me.DownLoadFilesFromReceivedFolderRSAsync(CustomerNumber, folder, names, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownLoadFilesFromReceivedFolderRSAsync(ByVal CustomerNumber As Integer, ByVal folder As String, ByVal names() As String, ByVal userState As Object)
            If (Me.DownLoadFilesFromReceivedFolderRSOperationCompleted Is Nothing) Then
                Me.DownLoadFilesFromReceivedFolderRSOperationCompleted = AddressOf Me.OnDownLoadFilesFromReceivedFolderRSOperationCompleted
            End If
            Me.InvokeAsync("DownLoadFilesFromReceivedFolderRS", New Object() {CustomerNumber, folder, names}, Me.DownLoadFilesFromReceivedFolderRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownLoadFilesFromReceivedFolderRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownLoadFilesFromReceivedFolderRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownLoadFilesFromReceivedFolderRSCompleted(Me, New DownLoadFilesFromReceivedFolderRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/DownLoadFilesFromReceivedFolder", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownLoadFilesFromReceivedFolder(ByVal folder As String, ByVal names() As String) As FileReference()
            Dim results() As Object = Me.Invoke("DownLoadFilesFromReceivedFolder", New Object() {folder, names})
            Return CType(results(0),FileReference())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownLoadFilesFromReceivedFolderAsync(ByVal folder As String, ByVal names() As String)
            Me.DownLoadFilesFromReceivedFolderAsync(folder, names, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownLoadFilesFromReceivedFolderAsync(ByVal folder As String, ByVal names() As String, ByVal userState As Object)
            If (Me.DownLoadFilesFromReceivedFolderOperationCompleted Is Nothing) Then
                Me.DownLoadFilesFromReceivedFolderOperationCompleted = AddressOf Me.OnDownLoadFilesFromReceivedFolderOperationCompleted
            End If
            Me.InvokeAsync("DownLoadFilesFromReceivedFolder", New Object() {folder, names}, Me.DownLoadFilesFromReceivedFolderOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownLoadFilesFromReceivedFolderOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownLoadFilesFromReceivedFolderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownLoadFilesFromReceivedFolderCompleted(Me, New DownLoadFilesFromReceivedFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/DeleteFilesFromReceivedFolderRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteFilesFromReceivedFolderRS(ByVal CustomerNumber As Integer, ByVal folder As String, ByVal names() As String) As String()
            Dim results() As Object = Me.Invoke("DeleteFilesFromReceivedFolderRS", New Object() {CustomerNumber, folder, names})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteFilesFromReceivedFolderRSAsync(ByVal CustomerNumber As Integer, ByVal folder As String, ByVal names() As String)
            Me.DeleteFilesFromReceivedFolderRSAsync(CustomerNumber, folder, names, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteFilesFromReceivedFolderRSAsync(ByVal CustomerNumber As Integer, ByVal folder As String, ByVal names() As String, ByVal userState As Object)
            If (Me.DeleteFilesFromReceivedFolderRSOperationCompleted Is Nothing) Then
                Me.DeleteFilesFromReceivedFolderRSOperationCompleted = AddressOf Me.OnDeleteFilesFromReceivedFolderRSOperationCompleted
            End If
            Me.InvokeAsync("DeleteFilesFromReceivedFolderRS", New Object() {CustomerNumber, folder, names}, Me.DeleteFilesFromReceivedFolderRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteFilesFromReceivedFolderRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteFilesFromReceivedFolderRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteFilesFromReceivedFolderRSCompleted(Me, New DeleteFilesFromReceivedFolderRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/DeleteFilesFromReceivedFolder", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteFilesFromReceivedFolder(ByVal folder As String, ByVal names() As String) As String()
            Dim results() As Object = Me.Invoke("DeleteFilesFromReceivedFolder", New Object() {folder, names})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteFilesFromReceivedFolderAsync(ByVal folder As String, ByVal names() As String)
            Me.DeleteFilesFromReceivedFolderAsync(folder, names, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteFilesFromReceivedFolderAsync(ByVal folder As String, ByVal names() As String, ByVal userState As Object)
            If (Me.DeleteFilesFromReceivedFolderOperationCompleted Is Nothing) Then
                Me.DeleteFilesFromReceivedFolderOperationCompleted = AddressOf Me.OnDeleteFilesFromReceivedFolderOperationCompleted
            End If
            Me.InvokeAsync("DeleteFilesFromReceivedFolder", New Object() {folder, names}, Me.DeleteFilesFromReceivedFolderOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteFilesFromReceivedFolderOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteFilesFromReceivedFolderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteFilesFromReceivedFolderCompleted(Me, New DeleteFilesFromReceivedFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/getJobDetail3", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getJobDetail3(ByVal Job As String, ByVal Type As String, ByVal OrderByDisposition As Boolean, ByVal FilterFailed As Boolean, ByRef Tid As String, ByRef Items As Integer) As DeliveryItem()
            Dim results() As Object = Me.Invoke("getJobDetail3", New Object() {Job, Type, OrderByDisposition, FilterFailed})
            Tid = CType(results(1),String)
            Items = CType(results(2),Integer)
            Return CType(results(0),DeliveryItem())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getJobDetail3Async(ByVal Job As String, ByVal Type As String, ByVal OrderByDisposition As Boolean, ByVal FilterFailed As Boolean)
            Me.getJobDetail3Async(Job, Type, OrderByDisposition, FilterFailed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getJobDetail3Async(ByVal Job As String, ByVal Type As String, ByVal OrderByDisposition As Boolean, ByVal FilterFailed As Boolean, ByVal userState As Object)
            If (Me.getJobDetail3OperationCompleted Is Nothing) Then
                Me.getJobDetail3OperationCompleted = AddressOf Me.OngetJobDetail3OperationCompleted
            End If
            Me.InvokeAsync("getJobDetail3", New Object() {Job, Type, OrderByDisposition, FilterFailed}, Me.getJobDetail3OperationCompleted, userState)
        End Sub
        
        Private Sub OngetJobDetail3OperationCompleted(ByVal arg As Object)
            If (Not (Me.getJobDetail3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getJobDetail3Completed(Me, New getJobDetail3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/getJobDetail3RS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getJobDetail3RS(ByVal Job As String, ByVal Type As String, ByVal CustomerNumber As Integer, ByVal OrderByDisposition As Boolean, ByVal FilterFailed As Boolean, ByRef Tid As String, ByRef Items As Integer) As DeliveryItem()
            Dim results() As Object = Me.Invoke("getJobDetail3RS", New Object() {Job, Type, CustomerNumber, OrderByDisposition, FilterFailed})
            Tid = CType(results(1),String)
            Items = CType(results(2),Integer)
            Return CType(results(0),DeliveryItem())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getJobDetail3RSAsync(ByVal Job As String, ByVal Type As String, ByVal CustomerNumber As Integer, ByVal OrderByDisposition As Boolean, ByVal FilterFailed As Boolean)
            Me.getJobDetail3RSAsync(Job, Type, CustomerNumber, OrderByDisposition, FilterFailed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getJobDetail3RSAsync(ByVal Job As String, ByVal Type As String, ByVal CustomerNumber As Integer, ByVal OrderByDisposition As Boolean, ByVal FilterFailed As Boolean, ByVal userState As Object)
            If (Me.getJobDetail3RSOperationCompleted Is Nothing) Then
                Me.getJobDetail3RSOperationCompleted = AddressOf Me.OngetJobDetail3RSOperationCompleted
            End If
            Me.InvokeAsync("getJobDetail3RS", New Object() {Job, Type, CustomerNumber, OrderByDisposition, FilterFailed}, Me.getJobDetail3RSOperationCompleted, userState)
        End Sub
        
        Private Sub OngetJobDetail3RSOperationCompleted(ByVal arg As Object)
            If (Not (Me.getJobDetail3RSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getJobDetail3RSCompleted(Me, New getJobDetail3RSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/getJobDetail", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getJobDetail(ByVal Job As String, ByVal Type As String, ByRef Tid As String, ByRef Items As Integer) As ItemDetail
            Dim results() As Object = Me.Invoke("getJobDetail", New Object() {Job, Type})
            Tid = CType(results(1),String)
            Items = CType(results(2),Integer)
            Return CType(results(0),ItemDetail)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getJobDetailAsync(ByVal Job As String, ByVal Type As String)
            Me.getJobDetailAsync(Job, Type, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getJobDetailAsync(ByVal Job As String, ByVal Type As String, ByVal userState As Object)
            If (Me.getJobDetailOperationCompleted Is Nothing) Then
                Me.getJobDetailOperationCompleted = AddressOf Me.OngetJobDetailOperationCompleted
            End If
            Me.InvokeAsync("getJobDetail", New Object() {Job, Type}, Me.getJobDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OngetJobDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.getJobDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getJobDetailCompleted(Me, New getJobDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/getJobDetailRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getJobDetailRS(ByVal Job As String, ByVal Type As String, ByVal CustomerNumber As Integer, ByRef Tid As String, ByRef Items As Integer) As ItemDetail
            Dim results() As Object = Me.Invoke("getJobDetailRS", New Object() {Job, Type, CustomerNumber})
            Tid = CType(results(1),String)
            Items = CType(results(2),Integer)
            Return CType(results(0),ItemDetail)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getJobDetailRSAsync(ByVal Job As String, ByVal Type As String, ByVal CustomerNumber As Integer)
            Me.getJobDetailRSAsync(Job, Type, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getJobDetailRSAsync(ByVal Job As String, ByVal Type As String, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.getJobDetailRSOperationCompleted Is Nothing) Then
                Me.getJobDetailRSOperationCompleted = AddressOf Me.OngetJobDetailRSOperationCompleted
            End If
            Me.InvokeAsync("getJobDetailRS", New Object() {Job, Type, CustomerNumber}, Me.getJobDetailRSOperationCompleted, userState)
        End Sub
        
        Private Sub OngetJobDetailRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.getJobDetailRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getJobDetailRSCompleted(Me, New getJobDetailRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/getJobDetail2", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getJobDetail2(ByVal Job As String, ByVal Type As String, ByVal orderByDisposition As Boolean, ByVal filterFailed As Boolean, ByRef Tid As String, ByRef Items As Integer) As ItemDetail
            Dim results() As Object = Me.Invoke("getJobDetail2", New Object() {Job, Type, orderByDisposition, filterFailed})
            Tid = CType(results(1),String)
            Items = CType(results(2),Integer)
            Return CType(results(0),ItemDetail)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getJobDetail2Async(ByVal Job As String, ByVal Type As String, ByVal orderByDisposition As Boolean, ByVal filterFailed As Boolean)
            Me.getJobDetail2Async(Job, Type, orderByDisposition, filterFailed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getJobDetail2Async(ByVal Job As String, ByVal Type As String, ByVal orderByDisposition As Boolean, ByVal filterFailed As Boolean, ByVal userState As Object)
            If (Me.getJobDetail2OperationCompleted Is Nothing) Then
                Me.getJobDetail2OperationCompleted = AddressOf Me.OngetJobDetail2OperationCompleted
            End If
            Me.InvokeAsync("getJobDetail2", New Object() {Job, Type, orderByDisposition, filterFailed}, Me.getJobDetail2OperationCompleted, userState)
        End Sub
        
        Private Sub OngetJobDetail2OperationCompleted(ByVal arg As Object)
            If (Not (Me.getJobDetail2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getJobDetail2Completed(Me, New getJobDetail2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/getJobDetail2RS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getJobDetail2RS(ByVal Job As String, ByVal Type As String, ByVal CustomerNumber As Integer, ByVal orderByDisposition As Boolean, ByVal filterFailed As Boolean, ByRef Tid As String, ByRef Items As Integer) As ItemDetail
            Dim results() As Object = Me.Invoke("getJobDetail2RS", New Object() {Job, Type, CustomerNumber, orderByDisposition, filterFailed})
            Tid = CType(results(1),String)
            Items = CType(results(2),Integer)
            Return CType(results(0),ItemDetail)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getJobDetail2RSAsync(ByVal Job As String, ByVal Type As String, ByVal CustomerNumber As Integer, ByVal orderByDisposition As Boolean, ByVal filterFailed As Boolean)
            Me.getJobDetail2RSAsync(Job, Type, CustomerNumber, orderByDisposition, filterFailed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getJobDetail2RSAsync(ByVal Job As String, ByVal Type As String, ByVal CustomerNumber As Integer, ByVal orderByDisposition As Boolean, ByVal filterFailed As Boolean, ByVal userState As Object)
            If (Me.getJobDetail2RSOperationCompleted Is Nothing) Then
                Me.getJobDetail2RSOperationCompleted = AddressOf Me.OngetJobDetail2RSOperationCompleted
            End If
            Me.InvokeAsync("getJobDetail2RS", New Object() {Job, Type, CustomerNumber, orderByDisposition, filterFailed}, Me.getJobDetail2RSOperationCompleted, userState)
        End Sub
        
        Private Sub OngetJobDetail2RSOperationCompleted(ByVal arg As Object)
            If (Not (Me.getJobDetail2RSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getJobDetail2RSCompleted(Me, New getJobDetail2RSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/getItemDetailByDates", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getItemDetailByDates(ByVal startDateTime As Date, ByVal endDateTime As Date, ByVal TID As String, ByVal filterFailed As Boolean) As ItemDetail2
            Dim results() As Object = Me.Invoke("getItemDetailByDates", New Object() {startDateTime, endDateTime, TID, filterFailed})
            Return CType(results(0),ItemDetail2)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getItemDetailByDatesAsync(ByVal startDateTime As Date, ByVal endDateTime As Date, ByVal TID As String, ByVal filterFailed As Boolean)
            Me.getItemDetailByDatesAsync(startDateTime, endDateTime, TID, filterFailed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getItemDetailByDatesAsync(ByVal startDateTime As Date, ByVal endDateTime As Date, ByVal TID As String, ByVal filterFailed As Boolean, ByVal userState As Object)
            If (Me.getItemDetailByDatesOperationCompleted Is Nothing) Then
                Me.getItemDetailByDatesOperationCompleted = AddressOf Me.OngetItemDetailByDatesOperationCompleted
            End If
            Me.InvokeAsync("getItemDetailByDates", New Object() {startDateTime, endDateTime, TID, filterFailed}, Me.getItemDetailByDatesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetItemDetailByDatesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getItemDetailByDatesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getItemDetailByDatesCompleted(Me, New getItemDetailByDatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/getItemDetailByDatesRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getItemDetailByDatesRS(ByVal CustomerNumber As Integer, ByVal startDateTime As Date, ByVal endDateTime As Date, ByVal TID As String, ByVal filterFailed As Boolean) As ItemDetail2
            Dim results() As Object = Me.Invoke("getItemDetailByDatesRS", New Object() {CustomerNumber, startDateTime, endDateTime, TID, filterFailed})
            Return CType(results(0),ItemDetail2)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getItemDetailByDatesRSAsync(ByVal CustomerNumber As Integer, ByVal startDateTime As Date, ByVal endDateTime As Date, ByVal TID As String, ByVal filterFailed As Boolean)
            Me.getItemDetailByDatesRSAsync(CustomerNumber, startDateTime, endDateTime, TID, filterFailed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getItemDetailByDatesRSAsync(ByVal CustomerNumber As Integer, ByVal startDateTime As Date, ByVal endDateTime As Date, ByVal TID As String, ByVal filterFailed As Boolean, ByVal userState As Object)
            If (Me.getItemDetailByDatesRSOperationCompleted Is Nothing) Then
                Me.getItemDetailByDatesRSOperationCompleted = AddressOf Me.OngetItemDetailByDatesRSOperationCompleted
            End If
            Me.InvokeAsync("getItemDetailByDatesRS", New Object() {CustomerNumber, startDateTime, endDateTime, TID, filterFailed}, Me.getItemDetailByDatesRSOperationCompleted, userState)
        End Sub
        
        Private Sub OngetItemDetailByDatesRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.getItemDetailByDatesRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getItemDetailByDatesRSCompleted(Me, New getItemDetailByDatesRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/getItemDetailByDates2", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getItemDetailByDates2(ByVal startDateTimeString As String, ByVal endDateTimeString As String, ByVal TID As String, ByVal filterFailed As Boolean) As DeliveryItem2()
            Dim results() As Object = Me.Invoke("getItemDetailByDates2", New Object() {startDateTimeString, endDateTimeString, TID, filterFailed})
            Return CType(results(0),DeliveryItem2())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getItemDetailByDates2Async(ByVal startDateTimeString As String, ByVal endDateTimeString As String, ByVal TID As String, ByVal filterFailed As Boolean)
            Me.getItemDetailByDates2Async(startDateTimeString, endDateTimeString, TID, filterFailed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getItemDetailByDates2Async(ByVal startDateTimeString As String, ByVal endDateTimeString As String, ByVal TID As String, ByVal filterFailed As Boolean, ByVal userState As Object)
            If (Me.getItemDetailByDates2OperationCompleted Is Nothing) Then
                Me.getItemDetailByDates2OperationCompleted = AddressOf Me.OngetItemDetailByDates2OperationCompleted
            End If
            Me.InvokeAsync("getItemDetailByDates2", New Object() {startDateTimeString, endDateTimeString, TID, filterFailed}, Me.getItemDetailByDates2OperationCompleted, userState)
        End Sub
        
        Private Sub OngetItemDetailByDates2OperationCompleted(ByVal arg As Object)
            If (Not (Me.getItemDetailByDates2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getItemDetailByDates2Completed(Me, New getItemDetailByDates2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/getItemDetailByDates2RS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getItemDetailByDates2RS(ByVal CustomerNumber As Integer, ByVal startDateTimeString As String, ByVal endDateTimeString As String, ByVal TID As String, ByVal filterFailed As Boolean) As DeliveryItem2()
            Dim results() As Object = Me.Invoke("getItemDetailByDates2RS", New Object() {CustomerNumber, startDateTimeString, endDateTimeString, TID, filterFailed})
            Return CType(results(0),DeliveryItem2())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getItemDetailByDates2RSAsync(ByVal CustomerNumber As Integer, ByVal startDateTimeString As String, ByVal endDateTimeString As String, ByVal TID As String, ByVal filterFailed As Boolean)
            Me.getItemDetailByDates2RSAsync(CustomerNumber, startDateTimeString, endDateTimeString, TID, filterFailed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getItemDetailByDates2RSAsync(ByVal CustomerNumber As Integer, ByVal startDateTimeString As String, ByVal endDateTimeString As String, ByVal TID As String, ByVal filterFailed As Boolean, ByVal userState As Object)
            If (Me.getItemDetailByDates2RSOperationCompleted Is Nothing) Then
                Me.getItemDetailByDates2RSOperationCompleted = AddressOf Me.OngetItemDetailByDates2RSOperationCompleted
            End If
            Me.InvokeAsync("getItemDetailByDates2RS", New Object() {CustomerNumber, startDateTimeString, endDateTimeString, TID, filterFailed}, Me.getItemDetailByDates2RSOperationCompleted, userState)
        End Sub
        
        Private Sub OngetItemDetailByDates2RSOperationCompleted(ByVal arg As Object)
            If (Not (Me.getItemDetailByDates2RSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getItemDetailByDates2RSCompleted(Me, New getItemDetailByDates2RSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetJobTypeDocs", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobTypeDocs(ByVal JobType As String) As String()
            Dim results() As Object = Me.Invoke("GetJobTypeDocs", New Object() {JobType})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobTypeDocsAsync(ByVal JobType As String)
            Me.GetJobTypeDocsAsync(JobType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobTypeDocsAsync(ByVal JobType As String, ByVal userState As Object)
            If (Me.GetJobTypeDocsOperationCompleted Is Nothing) Then
                Me.GetJobTypeDocsOperationCompleted = AddressOf Me.OnGetJobTypeDocsOperationCompleted
            End If
            Me.InvokeAsync("GetJobTypeDocs", New Object() {JobType}, Me.GetJobTypeDocsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobTypeDocsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobTypeDocsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobTypeDocsCompleted(Me, New GetJobTypeDocsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetJobTypeDocsRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobTypeDocsRS(ByVal JobType As String, ByVal CustomerNumber As Integer) As String()
            Dim results() As Object = Me.Invoke("GetJobTypeDocsRS", New Object() {JobType, CustomerNumber})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobTypeDocsRSAsync(ByVal JobType As String, ByVal CustomerNumber As Integer)
            Me.GetJobTypeDocsRSAsync(JobType, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobTypeDocsRSAsync(ByVal JobType As String, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.GetJobTypeDocsRSOperationCompleted Is Nothing) Then
                Me.GetJobTypeDocsRSOperationCompleted = AddressOf Me.OnGetJobTypeDocsRSOperationCompleted
            End If
            Me.InvokeAsync("GetJobTypeDocsRS", New Object() {JobType, CustomerNumber}, Me.GetJobTypeDocsRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobTypeDocsRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobTypeDocsRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobTypeDocsRSCompleted(Me, New GetJobTypeDocsRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetJobTypeLists", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobTypeLists(ByVal JobType As String) As String()
            Dim results() As Object = Me.Invoke("GetJobTypeLists", New Object() {JobType})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobTypeListsAsync(ByVal JobType As String)
            Me.GetJobTypeListsAsync(JobType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobTypeListsAsync(ByVal JobType As String, ByVal userState As Object)
            If (Me.GetJobTypeListsOperationCompleted Is Nothing) Then
                Me.GetJobTypeListsOperationCompleted = AddressOf Me.OnGetJobTypeListsOperationCompleted
            End If
            Me.InvokeAsync("GetJobTypeLists", New Object() {JobType}, Me.GetJobTypeListsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobTypeListsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobTypeListsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobTypeListsCompleted(Me, New GetJobTypeListsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetJobTypeListsRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobTypeListsRS(ByVal JobType As String, ByVal CustomerNumber As Integer) As String()
            Dim results() As Object = Me.Invoke("GetJobTypeListsRS", New Object() {JobType, CustomerNumber})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobTypeListsRSAsync(ByVal JobType As String, ByVal CustomerNumber As Integer)
            Me.GetJobTypeListsRSAsync(JobType, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobTypeListsRSAsync(ByVal JobType As String, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.GetJobTypeListsRSOperationCompleted Is Nothing) Then
                Me.GetJobTypeListsRSOperationCompleted = AddressOf Me.OnGetJobTypeListsRSOperationCompleted
            End If
            Me.InvokeAsync("GetJobTypeListsRS", New Object() {JobType, CustomerNumber}, Me.GetJobTypeListsRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobTypeListsRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobTypeListsRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobTypeListsRSCompleted(Me, New GetJobTypeListsRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetDefaultMode", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDefaultMode(ByVal Jobtype As String) As Faxmode
            Dim results() As Object = Me.Invoke("GetDefaultMode", New Object() {Jobtype})
            Return CType(results(0),Faxmode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDefaultModeAsync(ByVal Jobtype As String)
            Me.GetDefaultModeAsync(Jobtype, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDefaultModeAsync(ByVal Jobtype As String, ByVal userState As Object)
            If (Me.GetDefaultModeOperationCompleted Is Nothing) Then
                Me.GetDefaultModeOperationCompleted = AddressOf Me.OnGetDefaultModeOperationCompleted
            End If
            Me.InvokeAsync("GetDefaultMode", New Object() {Jobtype}, Me.GetDefaultModeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDefaultModeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDefaultModeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDefaultModeCompleted(Me, New GetDefaultModeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetDefaultModeRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDefaultModeRS(ByVal Jobtype As String, ByVal CustomerNumber As Integer) As Faxmode
            Dim results() As Object = Me.Invoke("GetDefaultModeRS", New Object() {Jobtype, CustomerNumber})
            Return CType(results(0),Faxmode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDefaultModeRSAsync(ByVal Jobtype As String, ByVal CustomerNumber As Integer)
            Me.GetDefaultModeRSAsync(Jobtype, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDefaultModeRSAsync(ByVal Jobtype As String, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.GetDefaultModeRSOperationCompleted Is Nothing) Then
                Me.GetDefaultModeRSOperationCompleted = AddressOf Me.OnGetDefaultModeRSOperationCompleted
            End If
            Me.InvokeAsync("GetDefaultModeRS", New Object() {Jobtype, CustomerNumber}, Me.GetDefaultModeRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDefaultModeRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDefaultModeRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDefaultModeRSCompleted(Me, New GetDefaultModeRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetShouldSuppressFaxConversion", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetShouldSuppressFaxConversion(ByVal Jobtype As String) As Boolean
            Dim results() As Object = Me.Invoke("GetShouldSuppressFaxConversion", New Object() {Jobtype})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetShouldSuppressFaxConversionAsync(ByVal Jobtype As String)
            Me.GetShouldSuppressFaxConversionAsync(Jobtype, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetShouldSuppressFaxConversionAsync(ByVal Jobtype As String, ByVal userState As Object)
            If (Me.GetShouldSuppressFaxConversionOperationCompleted Is Nothing) Then
                Me.GetShouldSuppressFaxConversionOperationCompleted = AddressOf Me.OnGetShouldSuppressFaxConversionOperationCompleted
            End If
            Me.InvokeAsync("GetShouldSuppressFaxConversion", New Object() {Jobtype}, Me.GetShouldSuppressFaxConversionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetShouldSuppressFaxConversionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetShouldSuppressFaxConversionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetShouldSuppressFaxConversionCompleted(Me, New GetShouldSuppressFaxConversionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetShouldSuppressFaxConversionRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetShouldSuppressFaxConversionRS(ByVal Jobtype As String, ByVal CustomerNumber As Integer) As Boolean
            Dim results() As Object = Me.Invoke("GetShouldSuppressFaxConversionRS", New Object() {Jobtype, CustomerNumber})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetShouldSuppressFaxConversionRSAsync(ByVal Jobtype As String, ByVal CustomerNumber As Integer)
            Me.GetShouldSuppressFaxConversionRSAsync(Jobtype, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetShouldSuppressFaxConversionRSAsync(ByVal Jobtype As String, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.GetShouldSuppressFaxConversionRSOperationCompleted Is Nothing) Then
                Me.GetShouldSuppressFaxConversionRSOperationCompleted = AddressOf Me.OnGetShouldSuppressFaxConversionRSOperationCompleted
            End If
            Me.InvokeAsync("GetShouldSuppressFaxConversionRS", New Object() {Jobtype, CustomerNumber}, Me.GetShouldSuppressFaxConversionRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetShouldSuppressFaxConversionRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetShouldSuppressFaxConversionRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetShouldSuppressFaxConversionRSCompleted(Me, New GetShouldSuppressFaxConversionRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StatusEx", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StatusEx() As JobDataEx
            Dim results() As Object = Me.Invoke("StatusEx", New Object(-1) {})
            Return CType(results(0),JobDataEx)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatusExAsync()
            Me.StatusExAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatusExAsync(ByVal userState As Object)
            If (Me.StatusExOperationCompleted Is Nothing) Then
                Me.StatusExOperationCompleted = AddressOf Me.OnStatusExOperationCompleted
            End If
            Me.InvokeAsync("StatusEx", New Object(-1) {}, Me.StatusExOperationCompleted, userState)
        End Sub
        
        Private Sub OnStatusExOperationCompleted(ByVal arg As Object)
            If (Not (Me.StatusExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatusExCompleted(Me, New StatusExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/Status", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Status() As JobData
            Dim results() As Object = Me.Invoke("Status", New Object(-1) {})
            Return CType(results(0),JobData)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatusAsync()
            Me.StatusAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatusAsync(ByVal userState As Object)
            If (Me.StatusOperationCompleted Is Nothing) Then
                Me.StatusOperationCompleted = AddressOf Me.OnStatusOperationCompleted
            End If
            Me.InvokeAsync("Status", New Object(-1) {}, Me.StatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.StatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatusCompleted(Me, New StatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StatusForJob", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StatusForJob(ByVal JobNumber As String, ByVal JobType As String) As JobDataEx
            Dim results() As Object = Me.Invoke("StatusForJob", New Object() {JobNumber, JobType})
            Return CType(results(0),JobDataEx)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatusForJobAsync(ByVal JobNumber As String, ByVal JobType As String)
            Me.StatusForJobAsync(JobNumber, JobType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatusForJobAsync(ByVal JobNumber As String, ByVal JobType As String, ByVal userState As Object)
            If (Me.StatusForJobOperationCompleted Is Nothing) Then
                Me.StatusForJobOperationCompleted = AddressOf Me.OnStatusForJobOperationCompleted
            End If
            Me.InvokeAsync("StatusForJob", New Object() {JobNumber, JobType}, Me.StatusForJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnStatusForJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.StatusForJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatusForJobCompleted(Me, New StatusForJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StatusForJob2", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StatusForJob2(ByVal JobNumber As String, ByVal JobType As String) As JobStats
            Dim results() As Object = Me.Invoke("StatusForJob2", New Object() {JobNumber, JobType})
            Return CType(results(0),JobStats)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatusForJob2Async(ByVal JobNumber As String, ByVal JobType As String)
            Me.StatusForJob2Async(JobNumber, JobType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatusForJob2Async(ByVal JobNumber As String, ByVal JobType As String, ByVal userState As Object)
            If (Me.StatusForJob2OperationCompleted Is Nothing) Then
                Me.StatusForJob2OperationCompleted = AddressOf Me.OnStatusForJob2OperationCompleted
            End If
            Me.InvokeAsync("StatusForJob2", New Object() {JobNumber, JobType}, Me.StatusForJob2OperationCompleted, userState)
        End Sub
        
        Private Sub OnStatusForJob2OperationCompleted(ByVal arg As Object)
            If (Not (Me.StatusForJob2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatusForJob2Completed(Me, New StatusForJob2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetJobTypes", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobTypes() As String()
            Dim results() As Object = Me.Invoke("GetJobTypes", New Object(-1) {})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobTypesAsync()
            Me.GetJobTypesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobTypesAsync(ByVal userState As Object)
            If (Me.GetJobTypesOperationCompleted Is Nothing) Then
                Me.GetJobTypesOperationCompleted = AddressOf Me.OnGetJobTypesOperationCompleted
            End If
            Me.InvokeAsync("GetJobTypes", New Object(-1) {}, Me.GetJobTypesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobTypesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobTypesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobTypesCompleted(Me, New GetJobTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StartBroadcast", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StartBroadcast(ByVal b As Broadcast) As BroadcastReturn
            Dim results() As Object = Me.Invoke("StartBroadcast", New Object() {b})
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StartBroadcastAsync(ByVal b As Broadcast)
            Me.StartBroadcastAsync(b, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StartBroadcastAsync(ByVal b As Broadcast, ByVal userState As Object)
            If (Me.StartBroadcastOperationCompleted Is Nothing) Then
                Me.StartBroadcastOperationCompleted = AddressOf Me.OnStartBroadcastOperationCompleted
            End If
            Me.InvokeAsync("StartBroadcast", New Object() {b}, Me.StartBroadcastOperationCompleted, userState)
        End Sub
        
        Private Sub OnStartBroadcastOperationCompleted(ByVal arg As Object)
            If (Not (Me.StartBroadcastCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StartBroadcastCompleted(Me, New StartBroadcastCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StartPreview", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StartPreview(ByVal b As Broadcast) As BroadcastReturn
            Dim results() As Object = Me.Invoke("StartPreview", New Object() {b})
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StartPreviewAsync(ByVal b As Broadcast)
            Me.StartPreviewAsync(b, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StartPreviewAsync(ByVal b As Broadcast, ByVal userState As Object)
            If (Me.StartPreviewOperationCompleted Is Nothing) Then
                Me.StartPreviewOperationCompleted = AddressOf Me.OnStartPreviewOperationCompleted
            End If
            Me.InvokeAsync("StartPreview", New Object() {b}, Me.StartPreviewOperationCompleted, userState)
        End Sub
        
        Private Sub OnStartPreviewOperationCompleted(ByVal arg As Object)
            If (Not (Me.StartPreviewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StartPreviewCompleted(Me, New StartPreviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetGroup", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGroup() As GroupMember()
            Dim results() As Object = Me.Invoke("GetGroup", New Object(-1) {})
            Return CType(results(0),GroupMember())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGroupAsync()
            Me.GetGroupAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGroupAsync(ByVal userState As Object)
            If (Me.GetGroupOperationCompleted Is Nothing) Then
                Me.GetGroupOperationCompleted = AddressOf Me.OnGetGroupOperationCompleted
            End If
            Me.InvokeAsync("GetGroup", New Object(-1) {}, Me.GetGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGroupCompleted(Me, New GetGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/DownLoadFilesFromFolders", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownLoadFilesFromFolders(ByVal c As HostedFileCollection) As FileReference()
            Dim results() As Object = Me.Invoke("DownLoadFilesFromFolders", New Object() {c})
            Return CType(results(0),FileReference())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownLoadFilesFromFoldersAsync(ByVal c As HostedFileCollection)
            Me.DownLoadFilesFromFoldersAsync(c, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownLoadFilesFromFoldersAsync(ByVal c As HostedFileCollection, ByVal userState As Object)
            If (Me.DownLoadFilesFromFoldersOperationCompleted Is Nothing) Then
                Me.DownLoadFilesFromFoldersOperationCompleted = AddressOf Me.OnDownLoadFilesFromFoldersOperationCompleted
            End If
            Me.InvokeAsync("DownLoadFilesFromFolders", New Object() {c}, Me.DownLoadFilesFromFoldersOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownLoadFilesFromFoldersOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownLoadFilesFromFoldersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownLoadFilesFromFoldersCompleted(Me, New DownLoadFilesFromFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetReport", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReport(ByVal Job As String) As FileReference
            Dim results() As Object = Me.Invoke("GetReport", New Object() {Job})
            Return CType(results(0),FileReference)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReportAsync(ByVal Job As String)
            Me.GetReportAsync(Job, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReportAsync(ByVal Job As String, ByVal userState As Object)
            If (Me.GetReportOperationCompleted Is Nothing) Then
                Me.GetReportOperationCompleted = AddressOf Me.OnGetReportOperationCompleted
            End If
            Me.InvokeAsync("GetReport", New Object() {Job}, Me.GetReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReportCompleted(Me, New GetReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/DeleteFilesFromFolders", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteFilesFromFolders(ByVal c As HostedFileCollection) As String()
            Dim results() As Object = Me.Invoke("DeleteFilesFromFolders", New Object() {c})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteFilesFromFoldersAsync(ByVal c As HostedFileCollection)
            Me.DeleteFilesFromFoldersAsync(c, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteFilesFromFoldersAsync(ByVal c As HostedFileCollection, ByVal userState As Object)
            If (Me.DeleteFilesFromFoldersOperationCompleted Is Nothing) Then
                Me.DeleteFilesFromFoldersOperationCompleted = AddressOf Me.OnDeleteFilesFromFoldersOperationCompleted
            End If
            Me.InvokeAsync("DeleteFilesFromFolders", New Object() {c}, Me.DeleteFilesFromFoldersOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteFilesFromFoldersOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteFilesFromFoldersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteFilesFromFoldersCompleted(Me, New DeleteFilesFromFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/UploadFilesToFolders", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadFilesToFolders(ByVal c As HostedFileCollection) As String()
            Dim results() As Object = Me.Invoke("UploadFilesToFolders", New Object() {c})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadFilesToFoldersAsync(ByVal c As HostedFileCollection)
            Me.UploadFilesToFoldersAsync(c, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadFilesToFoldersAsync(ByVal c As HostedFileCollection, ByVal userState As Object)
            If (Me.UploadFilesToFoldersOperationCompleted Is Nothing) Then
                Me.UploadFilesToFoldersOperationCompleted = AddressOf Me.OnUploadFilesToFoldersOperationCompleted
            End If
            Me.InvokeAsync("UploadFilesToFolders", New Object() {c}, Me.UploadFilesToFoldersOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadFilesToFoldersOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadFilesToFoldersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadFilesToFoldersCompleted(Me, New UploadFilesToFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetDocuments", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDocuments() As String()
            Dim results() As Object = Me.Invoke("GetDocuments", New Object(-1) {})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDocumentsAsync()
            Me.GetDocumentsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDocumentsAsync(ByVal userState As Object)
            If (Me.GetDocumentsOperationCompleted Is Nothing) Then
                Me.GetDocumentsOperationCompleted = AddressOf Me.OnGetDocumentsOperationCompleted
            End If
            Me.InvokeAsync("GetDocuments", New Object(-1) {}, Me.GetDocumentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDocumentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDocumentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDocumentsCompleted(Me, New GetDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetLists", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLists() As String()
            Dim results() As Object = Me.Invoke("GetLists", New Object(-1) {})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListsAsync()
            Me.GetListsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListsAsync(ByVal userState As Object)
            If (Me.GetListsOperationCompleted Is Nothing) Then
                Me.GetListsOperationCompleted = AddressOf Me.OnGetListsOperationCompleted
            End If
            Me.InvokeAsync("GetLists", New Object(-1) {}, Me.GetListsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListsCompleted(Me, New GetListsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/CancelJob", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelJob(ByVal Job As String, ByVal jobType As String) As String()
            Dim results() As Object = Me.Invoke("CancelJob", New Object() {Job, jobType})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelJobAsync(ByVal Job As String, ByVal jobType As String)
            Me.CancelJobAsync(Job, jobType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelJobAsync(ByVal Job As String, ByVal jobType As String, ByVal userState As Object)
            If (Me.CancelJobOperationCompleted Is Nothing) Then
                Me.CancelJobOperationCompleted = AddressOf Me.OnCancelJobOperationCompleted
            End If
            Me.InvokeAsync("CancelJob", New Object() {Job, jobType}, Me.CancelJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelJobCompleted(Me, New CancelJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/DownLoadFilesFromFoldersRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownLoadFilesFromFoldersRS(ByVal c As HostedFileCollection, ByVal CustomerNumber As Integer) As FileReference()
            Dim results() As Object = Me.Invoke("DownLoadFilesFromFoldersRS", New Object() {c, CustomerNumber})
            Return CType(results(0),FileReference())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownLoadFilesFromFoldersRSAsync(ByVal c As HostedFileCollection, ByVal CustomerNumber As Integer)
            Me.DownLoadFilesFromFoldersRSAsync(c, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownLoadFilesFromFoldersRSAsync(ByVal c As HostedFileCollection, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.DownLoadFilesFromFoldersRSOperationCompleted Is Nothing) Then
                Me.DownLoadFilesFromFoldersRSOperationCompleted = AddressOf Me.OnDownLoadFilesFromFoldersRSOperationCompleted
            End If
            Me.InvokeAsync("DownLoadFilesFromFoldersRS", New Object() {c, CustomerNumber}, Me.DownLoadFilesFromFoldersRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownLoadFilesFromFoldersRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownLoadFilesFromFoldersRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownLoadFilesFromFoldersRSCompleted(Me, New DownLoadFilesFromFoldersRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetReportRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReportRS(ByVal Job As String, ByVal CustomerNumber As Integer) As FileReference
            Dim results() As Object = Me.Invoke("GetReportRS", New Object() {Job, CustomerNumber})
            Return CType(results(0),FileReference)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReportRSAsync(ByVal Job As String, ByVal CustomerNumber As Integer)
            Me.GetReportRSAsync(Job, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReportRSAsync(ByVal Job As String, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.GetReportRSOperationCompleted Is Nothing) Then
                Me.GetReportRSOperationCompleted = AddressOf Me.OnGetReportRSOperationCompleted
            End If
            Me.InvokeAsync("GetReportRS", New Object() {Job, CustomerNumber}, Me.GetReportRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReportRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReportRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReportRSCompleted(Me, New GetReportRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/DeleteFilesFromFoldersRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteFilesFromFoldersRS(ByVal c As HostedFileCollection, ByVal CustomerNumber As Integer) As String()
            Dim results() As Object = Me.Invoke("DeleteFilesFromFoldersRS", New Object() {c, CustomerNumber})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteFilesFromFoldersRSAsync(ByVal c As HostedFileCollection, ByVal CustomerNumber As Integer)
            Me.DeleteFilesFromFoldersRSAsync(c, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteFilesFromFoldersRSAsync(ByVal c As HostedFileCollection, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.DeleteFilesFromFoldersRSOperationCompleted Is Nothing) Then
                Me.DeleteFilesFromFoldersRSOperationCompleted = AddressOf Me.OnDeleteFilesFromFoldersRSOperationCompleted
            End If
            Me.InvokeAsync("DeleteFilesFromFoldersRS", New Object() {c, CustomerNumber}, Me.DeleteFilesFromFoldersRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteFilesFromFoldersRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteFilesFromFoldersRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteFilesFromFoldersRSCompleted(Me, New DeleteFilesFromFoldersRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/UploadFilesToFoldersRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadFilesToFoldersRS(ByVal c As HostedFileCollection, ByVal CustomerNumber As Integer) As String()
            Dim results() As Object = Me.Invoke("UploadFilesToFoldersRS", New Object() {c, CustomerNumber})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadFilesToFoldersRSAsync(ByVal c As HostedFileCollection, ByVal CustomerNumber As Integer)
            Me.UploadFilesToFoldersRSAsync(c, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadFilesToFoldersRSAsync(ByVal c As HostedFileCollection, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.UploadFilesToFoldersRSOperationCompleted Is Nothing) Then
                Me.UploadFilesToFoldersRSOperationCompleted = AddressOf Me.OnUploadFilesToFoldersRSOperationCompleted
            End If
            Me.InvokeAsync("UploadFilesToFoldersRS", New Object() {c, CustomerNumber}, Me.UploadFilesToFoldersRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadFilesToFoldersRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadFilesToFoldersRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadFilesToFoldersRSCompleted(Me, New UploadFilesToFoldersRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetCustomerNumber", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerNumber() As Integer
            Dim results() As Object = Me.Invoke("GetCustomerNumber", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerNumberAsync()
            Me.GetCustomerNumberAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerNumberAsync(ByVal userState As Object)
            If (Me.GetCustomerNumberOperationCompleted Is Nothing) Then
                Me.GetCustomerNumberOperationCompleted = AddressOf Me.OnGetCustomerNumberOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerNumber", New Object(-1) {}, Me.GetCustomerNumberOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerNumberOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerNumberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerNumberCompleted(Me, New GetCustomerNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetDocumentsRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDocumentsRS(ByVal CustomerNumber As Integer) As String()
            Dim results() As Object = Me.Invoke("GetDocumentsRS", New Object() {CustomerNumber})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDocumentsRSAsync(ByVal CustomerNumber As Integer)
            Me.GetDocumentsRSAsync(CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDocumentsRSAsync(ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.GetDocumentsRSOperationCompleted Is Nothing) Then
                Me.GetDocumentsRSOperationCompleted = AddressOf Me.OnGetDocumentsRSOperationCompleted
            End If
            Me.InvokeAsync("GetDocumentsRS", New Object() {CustomerNumber}, Me.GetDocumentsRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDocumentsRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDocumentsRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDocumentsRSCompleted(Me, New GetDocumentsRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/CancelJobRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelJobRS(ByVal Job As String, ByVal jobType As String, ByVal CustomerNumber As Integer) As String()
            Dim results() As Object = Me.Invoke("CancelJobRS", New Object() {Job, jobType, CustomerNumber})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelJobRSAsync(ByVal Job As String, ByVal jobType As String, ByVal CustomerNumber As Integer)
            Me.CancelJobRSAsync(Job, jobType, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelJobRSAsync(ByVal Job As String, ByVal jobType As String, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.CancelJobRSOperationCompleted Is Nothing) Then
                Me.CancelJobRSOperationCompleted = AddressOf Me.OnCancelJobRSOperationCompleted
            End If
            Me.InvokeAsync("CancelJobRS", New Object() {Job, jobType, CustomerNumber}, Me.CancelJobRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelJobRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelJobRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelJobRSCompleted(Me, New CancelJobRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/ApprovePreview", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ApprovePreview(ByVal Job As String, ByVal jobType As String) As String()
            Dim results() As Object = Me.Invoke("ApprovePreview", New Object() {Job, jobType})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ApprovePreviewAsync(ByVal Job As String, ByVal jobType As String)
            Me.ApprovePreviewAsync(Job, jobType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ApprovePreviewAsync(ByVal Job As String, ByVal jobType As String, ByVal userState As Object)
            If (Me.ApprovePreviewOperationCompleted Is Nothing) Then
                Me.ApprovePreviewOperationCompleted = AddressOf Me.OnApprovePreviewOperationCompleted
            End If
            Me.InvokeAsync("ApprovePreview", New Object() {Job, jobType}, Me.ApprovePreviewOperationCompleted, userState)
        End Sub
        
        Private Sub OnApprovePreviewOperationCompleted(ByVal arg As Object)
            If (Not (Me.ApprovePreviewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ApprovePreviewCompleted(Me, New ApprovePreviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/ApprovePreviewRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ApprovePreviewRS(ByVal Job As String, ByVal jobType As String, ByVal CustomerNumber As Integer) As String()
            Dim results() As Object = Me.Invoke("ApprovePreviewRS", New Object() {Job, jobType, CustomerNumber})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ApprovePreviewRSAsync(ByVal Job As String, ByVal jobType As String, ByVal CustomerNumber As Integer)
            Me.ApprovePreviewRSAsync(Job, jobType, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ApprovePreviewRSAsync(ByVal Job As String, ByVal jobType As String, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.ApprovePreviewRSOperationCompleted Is Nothing) Then
                Me.ApprovePreviewRSOperationCompleted = AddressOf Me.OnApprovePreviewRSOperationCompleted
            End If
            Me.InvokeAsync("ApprovePreviewRS", New Object() {Job, jobType, CustomerNumber}, Me.ApprovePreviewRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnApprovePreviewRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.ApprovePreviewRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ApprovePreviewRSCompleted(Me, New ApprovePreviewRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetPreview", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPreview(ByVal Job As String, ByVal jobType As String) As FileReference
            Dim results() As Object = Me.Invoke("GetPreview", New Object() {Job, jobType})
            Return CType(results(0),FileReference)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPreviewAsync(ByVal Job As String, ByVal jobType As String)
            Me.GetPreviewAsync(Job, jobType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPreviewAsync(ByVal Job As String, ByVal jobType As String, ByVal userState As Object)
            If (Me.GetPreviewOperationCompleted Is Nothing) Then
                Me.GetPreviewOperationCompleted = AddressOf Me.OnGetPreviewOperationCompleted
            End If
            Me.InvokeAsync("GetPreview", New Object() {Job, jobType}, Me.GetPreviewOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPreviewOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPreviewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPreviewCompleted(Me, New GetPreviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetPreviewRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPreviewRS(ByVal Job As String, ByVal jobType As String, ByVal CustomerNumber As Integer) As FileReference
            Dim results() As Object = Me.Invoke("GetPreviewRS", New Object() {Job, jobType, CustomerNumber})
            Return CType(results(0),FileReference)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPreviewRSAsync(ByVal Job As String, ByVal jobType As String, ByVal CustomerNumber As Integer)
            Me.GetPreviewRSAsync(Job, jobType, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPreviewRSAsync(ByVal Job As String, ByVal jobType As String, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.GetPreviewRSOperationCompleted Is Nothing) Then
                Me.GetPreviewRSOperationCompleted = AddressOf Me.OnGetPreviewRSOperationCompleted
            End If
            Me.InvokeAsync("GetPreviewRS", New Object() {Job, jobType, CustomerNumber}, Me.GetPreviewRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPreviewRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPreviewRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPreviewRSCompleted(Me, New GetPreviewRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetListsRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListsRS(ByVal CustomerNumber As Integer) As String()
            Dim results() As Object = Me.Invoke("GetListsRS", New Object() {CustomerNumber})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListsRSAsync(ByVal CustomerNumber As Integer)
            Me.GetListsRSAsync(CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListsRSAsync(ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.GetListsRSOperationCompleted Is Nothing) Then
                Me.GetListsRSOperationCompleted = AddressOf Me.OnGetListsRSOperationCompleted
            End If
            Me.InvokeAsync("GetListsRS", New Object() {CustomerNumber}, Me.GetListsRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListsRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListsRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListsRSCompleted(Me, New GetListsRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetJobTypesRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobTypesRS(ByVal CustomerNumber As Integer) As String()
            Dim results() As Object = Me.Invoke("GetJobTypesRS", New Object() {CustomerNumber})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobTypesRSAsync(ByVal CustomerNumber As Integer)
            Me.GetJobTypesRSAsync(CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobTypesRSAsync(ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.GetJobTypesRSOperationCompleted Is Nothing) Then
                Me.GetJobTypesRSOperationCompleted = AddressOf Me.OnGetJobTypesRSOperationCompleted
            End If
            Me.InvokeAsync("GetJobTypesRS", New Object() {CustomerNumber}, Me.GetJobTypesRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobTypesRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobTypesRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobTypesRSCompleted(Me, New GetJobTypesRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StatusRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StatusRS(ByVal CustomerNumber As Integer) As JobData
            Dim results() As Object = Me.Invoke("StatusRS", New Object() {CustomerNumber})
            Return CType(results(0),JobData)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatusRSAsync(ByVal CustomerNumber As Integer)
            Me.StatusRSAsync(CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatusRSAsync(ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.StatusRSOperationCompleted Is Nothing) Then
                Me.StatusRSOperationCompleted = AddressOf Me.OnStatusRSOperationCompleted
            End If
            Me.InvokeAsync("StatusRS", New Object() {CustomerNumber}, Me.StatusRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnStatusRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.StatusRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatusRSCompleted(Me, New StatusRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StatusForJobRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StatusForJobRS(ByVal Job As String, ByVal JobType As String, ByVal CustomerNumber As Integer) As JobDataEx
            Dim results() As Object = Me.Invoke("StatusForJobRS", New Object() {Job, JobType, CustomerNumber})
            Return CType(results(0),JobDataEx)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatusForJobRSAsync(ByVal Job As String, ByVal JobType As String, ByVal CustomerNumber As Integer)
            Me.StatusForJobRSAsync(Job, JobType, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatusForJobRSAsync(ByVal Job As String, ByVal JobType As String, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.StatusForJobRSOperationCompleted Is Nothing) Then
                Me.StatusForJobRSOperationCompleted = AddressOf Me.OnStatusForJobRSOperationCompleted
            End If
            Me.InvokeAsync("StatusForJobRS", New Object() {Job, JobType, CustomerNumber}, Me.StatusForJobRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnStatusForJobRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.StatusForJobRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatusForJobRSCompleted(Me, New StatusForJobRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StatusForJob2RS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StatusForJob2RS(ByVal Job As String, ByVal JobType As String, ByVal CustomerNumber As Integer) As JobStats
            Dim results() As Object = Me.Invoke("StatusForJob2RS", New Object() {Job, JobType, CustomerNumber})
            Return CType(results(0),JobStats)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatusForJob2RSAsync(ByVal Job As String, ByVal JobType As String, ByVal CustomerNumber As Integer)
            Me.StatusForJob2RSAsync(Job, JobType, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatusForJob2RSAsync(ByVal Job As String, ByVal JobType As String, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.StatusForJob2RSOperationCompleted Is Nothing) Then
                Me.StatusForJob2RSOperationCompleted = AddressOf Me.OnStatusForJob2RSOperationCompleted
            End If
            Me.InvokeAsync("StatusForJob2RS", New Object() {Job, JobType, CustomerNumber}, Me.StatusForJob2RSOperationCompleted, userState)
        End Sub
        
        Private Sub OnStatusForJob2RSOperationCompleted(ByVal arg As Object)
            If (Not (Me.StatusForJob2RSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatusForJob2RSCompleted(Me, New StatusForJob2RSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StatusExRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StatusExRS(ByVal CustomerNumber As Integer) As JobDataEx
            Dim results() As Object = Me.Invoke("StatusExRS", New Object() {CustomerNumber})
            Return CType(results(0),JobDataEx)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatusExRSAsync(ByVal CustomerNumber As Integer)
            Me.StatusExRSAsync(CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatusExRSAsync(ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.StatusExRSOperationCompleted Is Nothing) Then
                Me.StatusExRSOperationCompleted = AddressOf Me.OnStatusExRSOperationCompleted
            End If
            Me.InvokeAsync("StatusExRS", New Object() {CustomerNumber}, Me.StatusExRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnStatusExRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.StatusExRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatusExRSCompleted(Me, New StatusExRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StatusEx2", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StatusEx2() As JobStats()
            Dim results() As Object = Me.Invoke("StatusEx2", New Object(-1) {})
            Return CType(results(0),JobStats())
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatusEx2Async()
            Me.StatusEx2Async(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatusEx2Async(ByVal userState As Object)
            If (Me.StatusEx2OperationCompleted Is Nothing) Then
                Me.StatusEx2OperationCompleted = AddressOf Me.OnStatusEx2OperationCompleted
            End If
            Me.InvokeAsync("StatusEx2", New Object(-1) {}, Me.StatusEx2OperationCompleted, userState)
        End Sub
        
        Private Sub OnStatusEx2OperationCompleted(ByVal arg As Object)
            If (Not (Me.StatusEx2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatusEx2Completed(Me, New StatusEx2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StatusEx2RS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StatusEx2RS(ByVal CustomerNumber As Integer) As JobStats()
            Dim results() As Object = Me.Invoke("StatusEx2RS", New Object() {CustomerNumber})
            Return CType(results(0),JobStats())
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatusEx2RSAsync(ByVal CustomerNumber As Integer)
            Me.StatusEx2RSAsync(CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatusEx2RSAsync(ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.StatusEx2RSOperationCompleted Is Nothing) Then
                Me.StatusEx2RSOperationCompleted = AddressOf Me.OnStatusEx2RSOperationCompleted
            End If
            Me.InvokeAsync("StatusEx2RS", New Object() {CustomerNumber}, Me.StatusEx2RSOperationCompleted, userState)
        End Sub
        
        Private Sub OnStatusEx2RSOperationCompleted(ByVal arg As Object)
            If (Not (Me.StatusEx2RSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatusEx2RSCompleted(Me, New StatusEx2RSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StartBroadcastRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StartBroadcastRS(ByVal b As Broadcast, ByVal CustomerNumber As Integer) As BroadcastReturn
            Dim results() As Object = Me.Invoke("StartBroadcastRS", New Object() {b, CustomerNumber})
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StartBroadcastRSAsync(ByVal b As Broadcast, ByVal CustomerNumber As Integer)
            Me.StartBroadcastRSAsync(b, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StartBroadcastRSAsync(ByVal b As Broadcast, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.StartBroadcastRSOperationCompleted Is Nothing) Then
                Me.StartBroadcastRSOperationCompleted = AddressOf Me.OnStartBroadcastRSOperationCompleted
            End If
            Me.InvokeAsync("StartBroadcastRS", New Object() {b, CustomerNumber}, Me.StartBroadcastRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnStartBroadcastRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.StartBroadcastRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StartBroadcastRSCompleted(Me, New StartBroadcastRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StartHtmlMerge", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StartHtmlMerge(ByVal b As Broadcast) As BroadcastReturn
            Dim results() As Object = Me.Invoke("StartHtmlMerge", New Object() {b})
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StartHtmlMergeAsync(ByVal b As Broadcast)
            Me.StartHtmlMergeAsync(b, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StartHtmlMergeAsync(ByVal b As Broadcast, ByVal userState As Object)
            If (Me.StartHtmlMergeOperationCompleted Is Nothing) Then
                Me.StartHtmlMergeOperationCompleted = AddressOf Me.OnStartHtmlMergeOperationCompleted
            End If
            Me.InvokeAsync("StartHtmlMerge", New Object() {b}, Me.StartHtmlMergeOperationCompleted, userState)
        End Sub
        
        Private Sub OnStartHtmlMergeOperationCompleted(ByVal arg As Object)
            If (Not (Me.StartHtmlMergeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StartHtmlMergeCompleted(Me, New StartHtmlMergeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StartHtmlMergeRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StartHtmlMergeRS(ByVal b As Broadcast, ByVal CustomerNumber As Integer) As BroadcastReturn
            Dim results() As Object = Me.Invoke("StartHtmlMergeRS", New Object() {b, CustomerNumber})
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StartHtmlMergeRSAsync(ByVal b As Broadcast, ByVal CustomerNumber As Integer)
            Me.StartHtmlMergeRSAsync(b, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StartHtmlMergeRSAsync(ByVal b As Broadcast, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.StartHtmlMergeRSOperationCompleted Is Nothing) Then
                Me.StartHtmlMergeRSOperationCompleted = AddressOf Me.OnStartHtmlMergeRSOperationCompleted
            End If
            Me.InvokeAsync("StartHtmlMergeRS", New Object() {b, CustomerNumber}, Me.StartHtmlMergeRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnStartHtmlMergeRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.StartHtmlMergeRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StartHtmlMergeRSCompleted(Me, New StartHtmlMergeRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StartPreviewRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StartPreviewRS(ByVal b As Broadcast, ByVal CustomerNumber As Integer) As BroadcastReturn
            Dim results() As Object = Me.Invoke("StartPreviewRS", New Object() {b, CustomerNumber})
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StartPreviewRSAsync(ByVal b As Broadcast, ByVal CustomerNumber As Integer)
            Me.StartPreviewRSAsync(b, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StartPreviewRSAsync(ByVal b As Broadcast, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.StartPreviewRSOperationCompleted Is Nothing) Then
                Me.StartPreviewRSOperationCompleted = AddressOf Me.OnStartPreviewRSOperationCompleted
            End If
            Me.InvokeAsync("StartPreviewRS", New Object() {b, CustomerNumber}, Me.StartPreviewRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnStartPreviewRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.StartPreviewRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StartPreviewRSCompleted(Me, New StartPreviewRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/SubmitFile", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SubmitFile(ByVal f As SubmitFileInfo) As BroadcastReturn
            Dim results() As Object = Me.Invoke("SubmitFile", New Object() {f})
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SubmitFileAsync(ByVal f As SubmitFileInfo)
            Me.SubmitFileAsync(f, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SubmitFileAsync(ByVal f As SubmitFileInfo, ByVal userState As Object)
            If (Me.SubmitFileOperationCompleted Is Nothing) Then
                Me.SubmitFileOperationCompleted = AddressOf Me.OnSubmitFileOperationCompleted
            End If
            Me.InvokeAsync("SubmitFile", New Object() {f}, Me.SubmitFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnSubmitFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.SubmitFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SubmitFileCompleted(Me, New SubmitFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/SubmitFileRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SubmitFileRS(ByVal f As SubmitFileInfo, ByVal CustomerNumber As Integer) As BroadcastReturn
            Dim results() As Object = Me.Invoke("SubmitFileRS", New Object() {f, CustomerNumber})
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SubmitFileRSAsync(ByVal f As SubmitFileInfo, ByVal CustomerNumber As Integer)
            Me.SubmitFileRSAsync(f, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SubmitFileRSAsync(ByVal f As SubmitFileInfo, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.SubmitFileRSOperationCompleted Is Nothing) Then
                Me.SubmitFileRSOperationCompleted = AddressOf Me.OnSubmitFileRSOperationCompleted
            End If
            Me.InvokeAsync("SubmitFileRS", New Object() {f, CustomerNumber}, Me.SubmitFileRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnSubmitFileRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.SubmitFileRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SubmitFileRSCompleted(Me, New SubmitFileRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetInboundFaxActivityRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInboundFaxActivityRS(ByVal CustomerNumber As Integer, ByVal fromDateTime As Date, ByVal toDateTime As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetInboundFaxActivityRS", New Object() {CustomerNumber, fromDateTime, toDateTime})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInboundFaxActivityRSAsync(ByVal CustomerNumber As Integer, ByVal fromDateTime As Date, ByVal toDateTime As Date)
            Me.GetInboundFaxActivityRSAsync(CustomerNumber, fromDateTime, toDateTime, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInboundFaxActivityRSAsync(ByVal CustomerNumber As Integer, ByVal fromDateTime As Date, ByVal toDateTime As Date, ByVal userState As Object)
            If (Me.GetInboundFaxActivityRSOperationCompleted Is Nothing) Then
                Me.GetInboundFaxActivityRSOperationCompleted = AddressOf Me.OnGetInboundFaxActivityRSOperationCompleted
            End If
            Me.InvokeAsync("GetInboundFaxActivityRS", New Object() {CustomerNumber, fromDateTime, toDateTime}, Me.GetInboundFaxActivityRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInboundFaxActivityRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInboundFaxActivityRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInboundFaxActivityRSCompleted(Me, New GetInboundFaxActivityRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetInboundFaxActivity", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInboundFaxActivity(ByVal fromDateTime As Date, ByVal toDateTime As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetInboundFaxActivity", New Object() {fromDateTime, toDateTime})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInboundFaxActivityAsync(ByVal fromDateTime As Date, ByVal toDateTime As Date)
            Me.GetInboundFaxActivityAsync(fromDateTime, toDateTime, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInboundFaxActivityAsync(ByVal fromDateTime As Date, ByVal toDateTime As Date, ByVal userState As Object)
            If (Me.GetInboundFaxActivityOperationCompleted Is Nothing) Then
                Me.GetInboundFaxActivityOperationCompleted = AddressOf Me.OnGetInboundFaxActivityOperationCompleted
            End If
            Me.InvokeAsync("GetInboundFaxActivity", New Object() {fromDateTime, toDateTime}, Me.GetInboundFaxActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInboundFaxActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInboundFaxActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInboundFaxActivityCompleted(Me, New GetInboundFaxActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ServiceSoap", [Namespace]:="http://odysseyservices.net/automatedui/")>  _
    Partial Public Class Service
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetReceivedFoldersRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReceivedFoldersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReceivedFileNamesRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReceivedFileNamesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownLoadFilesFromReceivedFolderRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownLoadFilesFromReceivedFolderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteFilesFromReceivedFolderRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteFilesFromReceivedFolderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getJobDetail3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getJobDetail3RSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getJobDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getJobDetailRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getJobDetail2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getJobDetail2RSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getItemDetailByDatesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getItemDetailByDatesRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getItemDetailByDates2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getItemDetailByDates2RSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobTypeDocsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobTypeDocsRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobTypeListsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobTypeListsRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDefaultModeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDefaultModeRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetShouldSuppressFaxConversionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetShouldSuppressFaxConversionRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatusExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatusForJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatusForJob2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobTypesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StartBroadcastOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StartPreviewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGroupOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownLoadFilesFromFoldersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteFilesFromFoldersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadFilesToFoldersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDocumentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DownLoadFilesFromFoldersRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReportRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteFilesFromFoldersRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadFilesToFoldersRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCustomerNumberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDocumentsRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelJobRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ApprovePreviewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ApprovePreviewRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPreviewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPreviewRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetListsRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobTypesRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatusRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatusForJobRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatusForJob2RSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatusExRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatusEx2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatusEx2RSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StartBroadcastRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StartHtmlMergeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StartHtmlMergeRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StartPreviewRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SubmitFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SubmitFileRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInboundFaxActivityRSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInboundFaxActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_OdysseyService_Service
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetReceivedFoldersRSCompleted As GetReceivedFoldersRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReceivedFoldersCompleted As GetReceivedFoldersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReceivedFileNamesRSCompleted As GetReceivedFileNamesRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReceivedFileNamesCompleted As GetReceivedFileNamesCompletedEventHandler
        
        '''<remarks/>
        Public Event DownLoadFilesFromReceivedFolderRSCompleted As DownLoadFilesFromReceivedFolderRSCompletedEventHandler
        
        '''<remarks/>
        Public Event DownLoadFilesFromReceivedFolderCompleted As DownLoadFilesFromReceivedFolderCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteFilesFromReceivedFolderRSCompleted As DeleteFilesFromReceivedFolderRSCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteFilesFromReceivedFolderCompleted As DeleteFilesFromReceivedFolderCompletedEventHandler
        
        '''<remarks/>
        Public Event getJobDetail3Completed As getJobDetail3CompletedEventHandler
        
        '''<remarks/>
        Public Event getJobDetail3RSCompleted As getJobDetail3RSCompletedEventHandler
        
        '''<remarks/>
        Public Event getJobDetailCompleted As getJobDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event getJobDetailRSCompleted As getJobDetailRSCompletedEventHandler
        
        '''<remarks/>
        Public Event getJobDetail2Completed As getJobDetail2CompletedEventHandler
        
        '''<remarks/>
        Public Event getJobDetail2RSCompleted As getJobDetail2RSCompletedEventHandler
        
        '''<remarks/>
        Public Event getItemDetailByDatesCompleted As getItemDetailByDatesCompletedEventHandler
        
        '''<remarks/>
        Public Event getItemDetailByDatesRSCompleted As getItemDetailByDatesRSCompletedEventHandler
        
        '''<remarks/>
        Public Event getItemDetailByDates2Completed As getItemDetailByDates2CompletedEventHandler
        
        '''<remarks/>
        Public Event getItemDetailByDates2RSCompleted As getItemDetailByDates2RSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobTypeDocsCompleted As GetJobTypeDocsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobTypeDocsRSCompleted As GetJobTypeDocsRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobTypeListsCompleted As GetJobTypeListsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobTypeListsRSCompleted As GetJobTypeListsRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDefaultModeCompleted As GetDefaultModeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDefaultModeRSCompleted As GetDefaultModeRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetShouldSuppressFaxConversionCompleted As GetShouldSuppressFaxConversionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetShouldSuppressFaxConversionRSCompleted As GetShouldSuppressFaxConversionRSCompletedEventHandler
        
        '''<remarks/>
        Public Event StatusExCompleted As StatusExCompletedEventHandler
        
        '''<remarks/>
        Public Event StatusCompleted As StatusCompletedEventHandler
        
        '''<remarks/>
        Public Event StatusForJobCompleted As StatusForJobCompletedEventHandler
        
        '''<remarks/>
        Public Event StatusForJob2Completed As StatusForJob2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobTypesCompleted As GetJobTypesCompletedEventHandler
        
        '''<remarks/>
        Public Event StartBroadcastCompleted As StartBroadcastCompletedEventHandler
        
        '''<remarks/>
        Public Event StartPreviewCompleted As StartPreviewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGroupCompleted As GetGroupCompletedEventHandler
        
        '''<remarks/>
        Public Event DownLoadFilesFromFoldersCompleted As DownLoadFilesFromFoldersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReportCompleted As GetReportCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteFilesFromFoldersCompleted As DeleteFilesFromFoldersCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadFilesToFoldersCompleted As UploadFilesToFoldersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDocumentsCompleted As GetDocumentsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListsCompleted As GetListsCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelJobCompleted As CancelJobCompletedEventHandler
        
        '''<remarks/>
        Public Event DownLoadFilesFromFoldersRSCompleted As DownLoadFilesFromFoldersRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReportRSCompleted As GetReportRSCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteFilesFromFoldersRSCompleted As DeleteFilesFromFoldersRSCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadFilesToFoldersRSCompleted As UploadFilesToFoldersRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCustomerNumberCompleted As GetCustomerNumberCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDocumentsRSCompleted As GetDocumentsRSCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelJobRSCompleted As CancelJobRSCompletedEventHandler
        
        '''<remarks/>
        Public Event ApprovePreviewCompleted As ApprovePreviewCompletedEventHandler
        
        '''<remarks/>
        Public Event ApprovePreviewRSCompleted As ApprovePreviewRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPreviewCompleted As GetPreviewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPreviewRSCompleted As GetPreviewRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetListsRSCompleted As GetListsRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobTypesRSCompleted As GetJobTypesRSCompletedEventHandler
        
        '''<remarks/>
        Public Event StatusRSCompleted As StatusRSCompletedEventHandler
        
        '''<remarks/>
        Public Event StatusForJobRSCompleted As StatusForJobRSCompletedEventHandler
        
        '''<remarks/>
        Public Event StatusForJob2RSCompleted As StatusForJob2RSCompletedEventHandler
        
        '''<remarks/>
        Public Event StatusExRSCompleted As StatusExRSCompletedEventHandler
        
        '''<remarks/>
        Public Event StatusEx2Completed As StatusEx2CompletedEventHandler
        
        '''<remarks/>
        Public Event StatusEx2RSCompleted As StatusEx2RSCompletedEventHandler
        
        '''<remarks/>
        Public Event StartBroadcastRSCompleted As StartBroadcastRSCompletedEventHandler
        
        '''<remarks/>
        Public Event StartHtmlMergeCompleted As StartHtmlMergeCompletedEventHandler
        
        '''<remarks/>
        Public Event StartHtmlMergeRSCompleted As StartHtmlMergeRSCompletedEventHandler
        
        '''<remarks/>
        Public Event StartPreviewRSCompleted As StartPreviewRSCompletedEventHandler
        
        '''<remarks/>
        Public Event SubmitFileCompleted As SubmitFileCompletedEventHandler
        
        '''<remarks/>
        Public Event SubmitFileRSCompleted As SubmitFileRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInboundFaxActivityRSCompleted As GetInboundFaxActivityRSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInboundFaxActivityCompleted As GetInboundFaxActivityCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetReceivedFoldersRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReceivedFoldersRS(ByVal CustomerNumber As Integer) As String()
            Dim results() As Object = Me.Invoke("GetReceivedFoldersRS", New Object() {CustomerNumber})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGetReceivedFoldersRS(ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReceivedFoldersRS", New Object() {CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReceivedFoldersRS(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReceivedFoldersRSAsync(ByVal CustomerNumber As Integer)
            Me.GetReceivedFoldersRSAsync(CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReceivedFoldersRSAsync(ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.GetReceivedFoldersRSOperationCompleted Is Nothing) Then
                Me.GetReceivedFoldersRSOperationCompleted = AddressOf Me.OnGetReceivedFoldersRSOperationCompleted
            End If
            Me.InvokeAsync("GetReceivedFoldersRS", New Object() {CustomerNumber}, Me.GetReceivedFoldersRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReceivedFoldersRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReceivedFoldersRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReceivedFoldersRSCompleted(Me, New GetReceivedFoldersRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetReceivedFolders", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReceivedFolders() As String()
            Dim results() As Object = Me.Invoke("GetReceivedFolders", New Object(-1) {})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGetReceivedFolders(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReceivedFolders", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReceivedFolders(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReceivedFoldersAsync()
            Me.GetReceivedFoldersAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReceivedFoldersAsync(ByVal userState As Object)
            If (Me.GetReceivedFoldersOperationCompleted Is Nothing) Then
                Me.GetReceivedFoldersOperationCompleted = AddressOf Me.OnGetReceivedFoldersOperationCompleted
            End If
            Me.InvokeAsync("GetReceivedFolders", New Object(-1) {}, Me.GetReceivedFoldersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReceivedFoldersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReceivedFoldersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReceivedFoldersCompleted(Me, New GetReceivedFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetReceivedFileNamesRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReceivedFileNamesRS(ByVal CustomerNumber As Integer, ByVal folder As String) As String()
            Dim results() As Object = Me.Invoke("GetReceivedFileNamesRS", New Object() {CustomerNumber, folder})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGetReceivedFileNamesRS(ByVal CustomerNumber As Integer, ByVal folder As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReceivedFileNamesRS", New Object() {CustomerNumber, folder}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReceivedFileNamesRS(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReceivedFileNamesRSAsync(ByVal CustomerNumber As Integer, ByVal folder As String)
            Me.GetReceivedFileNamesRSAsync(CustomerNumber, folder, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReceivedFileNamesRSAsync(ByVal CustomerNumber As Integer, ByVal folder As String, ByVal userState As Object)
            If (Me.GetReceivedFileNamesRSOperationCompleted Is Nothing) Then
                Me.GetReceivedFileNamesRSOperationCompleted = AddressOf Me.OnGetReceivedFileNamesRSOperationCompleted
            End If
            Me.InvokeAsync("GetReceivedFileNamesRS", New Object() {CustomerNumber, folder}, Me.GetReceivedFileNamesRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReceivedFileNamesRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReceivedFileNamesRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReceivedFileNamesRSCompleted(Me, New GetReceivedFileNamesRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetReceivedFileNames", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReceivedFileNames(ByVal folder As String) As String()
            Dim results() As Object = Me.Invoke("GetReceivedFileNames", New Object() {folder})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGetReceivedFileNames(ByVal folder As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReceivedFileNames", New Object() {folder}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReceivedFileNames(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReceivedFileNamesAsync(ByVal folder As String)
            Me.GetReceivedFileNamesAsync(folder, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReceivedFileNamesAsync(ByVal folder As String, ByVal userState As Object)
            If (Me.GetReceivedFileNamesOperationCompleted Is Nothing) Then
                Me.GetReceivedFileNamesOperationCompleted = AddressOf Me.OnGetReceivedFileNamesOperationCompleted
            End If
            Me.InvokeAsync("GetReceivedFileNames", New Object() {folder}, Me.GetReceivedFileNamesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReceivedFileNamesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReceivedFileNamesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReceivedFileNamesCompleted(Me, New GetReceivedFileNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/DownLoadFilesFromReceivedFolderRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownLoadFilesFromReceivedFolderRS(ByVal CustomerNumber As Integer, ByVal folder As String, ByVal names() As String) As FileReference()
            Dim results() As Object = Me.Invoke("DownLoadFilesFromReceivedFolderRS", New Object() {CustomerNumber, folder, names})
            Return CType(results(0),FileReference())
        End Function
        
        '''<remarks/>
        Public Function BeginDownLoadFilesFromReceivedFolderRS(ByVal CustomerNumber As Integer, ByVal folder As String, ByVal names() As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownLoadFilesFromReceivedFolderRS", New Object() {CustomerNumber, folder, names}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownLoadFilesFromReceivedFolderRS(ByVal asyncResult As System.IAsyncResult) As FileReference()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),FileReference())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownLoadFilesFromReceivedFolderRSAsync(ByVal CustomerNumber As Integer, ByVal folder As String, ByVal names() As String)
            Me.DownLoadFilesFromReceivedFolderRSAsync(CustomerNumber, folder, names, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownLoadFilesFromReceivedFolderRSAsync(ByVal CustomerNumber As Integer, ByVal folder As String, ByVal names() As String, ByVal userState As Object)
            If (Me.DownLoadFilesFromReceivedFolderRSOperationCompleted Is Nothing) Then
                Me.DownLoadFilesFromReceivedFolderRSOperationCompleted = AddressOf Me.OnDownLoadFilesFromReceivedFolderRSOperationCompleted
            End If
            Me.InvokeAsync("DownLoadFilesFromReceivedFolderRS", New Object() {CustomerNumber, folder, names}, Me.DownLoadFilesFromReceivedFolderRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownLoadFilesFromReceivedFolderRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownLoadFilesFromReceivedFolderRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownLoadFilesFromReceivedFolderRSCompleted(Me, New DownLoadFilesFromReceivedFolderRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/DownLoadFilesFromReceivedFolder", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownLoadFilesFromReceivedFolder(ByVal folder As String, ByVal names() As String) As FileReference()
            Dim results() As Object = Me.Invoke("DownLoadFilesFromReceivedFolder", New Object() {folder, names})
            Return CType(results(0),FileReference())
        End Function
        
        '''<remarks/>
        Public Function BeginDownLoadFilesFromReceivedFolder(ByVal folder As String, ByVal names() As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownLoadFilesFromReceivedFolder", New Object() {folder, names}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownLoadFilesFromReceivedFolder(ByVal asyncResult As System.IAsyncResult) As FileReference()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),FileReference())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownLoadFilesFromReceivedFolderAsync(ByVal folder As String, ByVal names() As String)
            Me.DownLoadFilesFromReceivedFolderAsync(folder, names, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownLoadFilesFromReceivedFolderAsync(ByVal folder As String, ByVal names() As String, ByVal userState As Object)
            If (Me.DownLoadFilesFromReceivedFolderOperationCompleted Is Nothing) Then
                Me.DownLoadFilesFromReceivedFolderOperationCompleted = AddressOf Me.OnDownLoadFilesFromReceivedFolderOperationCompleted
            End If
            Me.InvokeAsync("DownLoadFilesFromReceivedFolder", New Object() {folder, names}, Me.DownLoadFilesFromReceivedFolderOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownLoadFilesFromReceivedFolderOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownLoadFilesFromReceivedFolderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownLoadFilesFromReceivedFolderCompleted(Me, New DownLoadFilesFromReceivedFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/DeleteFilesFromReceivedFolderRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteFilesFromReceivedFolderRS(ByVal CustomerNumber As Integer, ByVal folder As String, ByVal names() As String) As String()
            Dim results() As Object = Me.Invoke("DeleteFilesFromReceivedFolderRS", New Object() {CustomerNumber, folder, names})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteFilesFromReceivedFolderRS(ByVal CustomerNumber As Integer, ByVal folder As String, ByVal names() As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteFilesFromReceivedFolderRS", New Object() {CustomerNumber, folder, names}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteFilesFromReceivedFolderRS(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteFilesFromReceivedFolderRSAsync(ByVal CustomerNumber As Integer, ByVal folder As String, ByVal names() As String)
            Me.DeleteFilesFromReceivedFolderRSAsync(CustomerNumber, folder, names, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteFilesFromReceivedFolderRSAsync(ByVal CustomerNumber As Integer, ByVal folder As String, ByVal names() As String, ByVal userState As Object)
            If (Me.DeleteFilesFromReceivedFolderRSOperationCompleted Is Nothing) Then
                Me.DeleteFilesFromReceivedFolderRSOperationCompleted = AddressOf Me.OnDeleteFilesFromReceivedFolderRSOperationCompleted
            End If
            Me.InvokeAsync("DeleteFilesFromReceivedFolderRS", New Object() {CustomerNumber, folder, names}, Me.DeleteFilesFromReceivedFolderRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteFilesFromReceivedFolderRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteFilesFromReceivedFolderRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteFilesFromReceivedFolderRSCompleted(Me, New DeleteFilesFromReceivedFolderRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/DeleteFilesFromReceivedFolder", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteFilesFromReceivedFolder(ByVal folder As String, ByVal names() As String) As String()
            Dim results() As Object = Me.Invoke("DeleteFilesFromReceivedFolder", New Object() {folder, names})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteFilesFromReceivedFolder(ByVal folder As String, ByVal names() As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteFilesFromReceivedFolder", New Object() {folder, names}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteFilesFromReceivedFolder(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteFilesFromReceivedFolderAsync(ByVal folder As String, ByVal names() As String)
            Me.DeleteFilesFromReceivedFolderAsync(folder, names, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteFilesFromReceivedFolderAsync(ByVal folder As String, ByVal names() As String, ByVal userState As Object)
            If (Me.DeleteFilesFromReceivedFolderOperationCompleted Is Nothing) Then
                Me.DeleteFilesFromReceivedFolderOperationCompleted = AddressOf Me.OnDeleteFilesFromReceivedFolderOperationCompleted
            End If
            Me.InvokeAsync("DeleteFilesFromReceivedFolder", New Object() {folder, names}, Me.DeleteFilesFromReceivedFolderOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteFilesFromReceivedFolderOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteFilesFromReceivedFolderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteFilesFromReceivedFolderCompleted(Me, New DeleteFilesFromReceivedFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/getJobDetail3", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getJobDetail3(ByVal Job As String, ByVal Type As String, ByVal OrderByDisposition As Boolean, ByVal FilterFailed As Boolean, ByRef Tid As String, ByRef Items As Integer) As DeliveryItem()
            Dim results() As Object = Me.Invoke("getJobDetail3", New Object() {Job, Type, OrderByDisposition, FilterFailed})
            Tid = CType(results(1),String)
            Items = CType(results(2),Integer)
            Return CType(results(0),DeliveryItem())
        End Function
        
        '''<remarks/>
        Public Function BegingetJobDetail3(ByVal Job As String, ByVal Type As String, ByVal OrderByDisposition As Boolean, ByVal FilterFailed As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getJobDetail3", New Object() {Job, Type, OrderByDisposition, FilterFailed}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetJobDetail3(ByVal asyncResult As System.IAsyncResult, ByRef Tid As String, ByRef Items As Integer) As DeliveryItem()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Tid = CType(results(1),String)
            Items = CType(results(2),Integer)
            Return CType(results(0),DeliveryItem())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getJobDetail3Async(ByVal Job As String, ByVal Type As String, ByVal OrderByDisposition As Boolean, ByVal FilterFailed As Boolean)
            Me.getJobDetail3Async(Job, Type, OrderByDisposition, FilterFailed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getJobDetail3Async(ByVal Job As String, ByVal Type As String, ByVal OrderByDisposition As Boolean, ByVal FilterFailed As Boolean, ByVal userState As Object)
            If (Me.getJobDetail3OperationCompleted Is Nothing) Then
                Me.getJobDetail3OperationCompleted = AddressOf Me.OngetJobDetail3OperationCompleted
            End If
            Me.InvokeAsync("getJobDetail3", New Object() {Job, Type, OrderByDisposition, FilterFailed}, Me.getJobDetail3OperationCompleted, userState)
        End Sub
        
        Private Sub OngetJobDetail3OperationCompleted(ByVal arg As Object)
            If (Not (Me.getJobDetail3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getJobDetail3Completed(Me, New getJobDetail3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/getJobDetail3RS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getJobDetail3RS(ByVal Job As String, ByVal Type As String, ByVal CustomerNumber As Integer, ByVal OrderByDisposition As Boolean, ByVal FilterFailed As Boolean, ByRef Tid As String, ByRef Items As Integer) As DeliveryItem()
            Dim results() As Object = Me.Invoke("getJobDetail3RS", New Object() {Job, Type, CustomerNumber, OrderByDisposition, FilterFailed})
            Tid = CType(results(1),String)
            Items = CType(results(2),Integer)
            Return CType(results(0),DeliveryItem())
        End Function
        
        '''<remarks/>
        Public Function BegingetJobDetail3RS(ByVal Job As String, ByVal Type As String, ByVal CustomerNumber As Integer, ByVal OrderByDisposition As Boolean, ByVal FilterFailed As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getJobDetail3RS", New Object() {Job, Type, CustomerNumber, OrderByDisposition, FilterFailed}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetJobDetail3RS(ByVal asyncResult As System.IAsyncResult, ByRef Tid As String, ByRef Items As Integer) As DeliveryItem()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Tid = CType(results(1),String)
            Items = CType(results(2),Integer)
            Return CType(results(0),DeliveryItem())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getJobDetail3RSAsync(ByVal Job As String, ByVal Type As String, ByVal CustomerNumber As Integer, ByVal OrderByDisposition As Boolean, ByVal FilterFailed As Boolean)
            Me.getJobDetail3RSAsync(Job, Type, CustomerNumber, OrderByDisposition, FilterFailed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getJobDetail3RSAsync(ByVal Job As String, ByVal Type As String, ByVal CustomerNumber As Integer, ByVal OrderByDisposition As Boolean, ByVal FilterFailed As Boolean, ByVal userState As Object)
            If (Me.getJobDetail3RSOperationCompleted Is Nothing) Then
                Me.getJobDetail3RSOperationCompleted = AddressOf Me.OngetJobDetail3RSOperationCompleted
            End If
            Me.InvokeAsync("getJobDetail3RS", New Object() {Job, Type, CustomerNumber, OrderByDisposition, FilterFailed}, Me.getJobDetail3RSOperationCompleted, userState)
        End Sub
        
        Private Sub OngetJobDetail3RSOperationCompleted(ByVal arg As Object)
            If (Not (Me.getJobDetail3RSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getJobDetail3RSCompleted(Me, New getJobDetail3RSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/getJobDetail", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getJobDetail(ByVal Job As String, ByVal Type As String, ByRef Tid As String, ByRef Items As Integer) As ItemDetail
            Dim results() As Object = Me.Invoke("getJobDetail", New Object() {Job, Type})
            Tid = CType(results(1),String)
            Items = CType(results(2),Integer)
            Return CType(results(0),ItemDetail)
        End Function
        
        '''<remarks/>
        Public Function BegingetJobDetail(ByVal Job As String, ByVal Type As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getJobDetail", New Object() {Job, Type}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetJobDetail(ByVal asyncResult As System.IAsyncResult, ByRef Tid As String, ByRef Items As Integer) As ItemDetail
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Tid = CType(results(1),String)
            Items = CType(results(2),Integer)
            Return CType(results(0),ItemDetail)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getJobDetailAsync(ByVal Job As String, ByVal Type As String)
            Me.getJobDetailAsync(Job, Type, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getJobDetailAsync(ByVal Job As String, ByVal Type As String, ByVal userState As Object)
            If (Me.getJobDetailOperationCompleted Is Nothing) Then
                Me.getJobDetailOperationCompleted = AddressOf Me.OngetJobDetailOperationCompleted
            End If
            Me.InvokeAsync("getJobDetail", New Object() {Job, Type}, Me.getJobDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OngetJobDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.getJobDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getJobDetailCompleted(Me, New getJobDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/getJobDetailRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getJobDetailRS(ByVal Job As String, ByVal Type As String, ByVal CustomerNumber As Integer, ByRef Tid As String, ByRef Items As Integer) As ItemDetail
            Dim results() As Object = Me.Invoke("getJobDetailRS", New Object() {Job, Type, CustomerNumber})
            Tid = CType(results(1),String)
            Items = CType(results(2),Integer)
            Return CType(results(0),ItemDetail)
        End Function
        
        '''<remarks/>
        Public Function BegingetJobDetailRS(ByVal Job As String, ByVal Type As String, ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getJobDetailRS", New Object() {Job, Type, CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetJobDetailRS(ByVal asyncResult As System.IAsyncResult, ByRef Tid As String, ByRef Items As Integer) As ItemDetail
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Tid = CType(results(1),String)
            Items = CType(results(2),Integer)
            Return CType(results(0),ItemDetail)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getJobDetailRSAsync(ByVal Job As String, ByVal Type As String, ByVal CustomerNumber As Integer)
            Me.getJobDetailRSAsync(Job, Type, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getJobDetailRSAsync(ByVal Job As String, ByVal Type As String, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.getJobDetailRSOperationCompleted Is Nothing) Then
                Me.getJobDetailRSOperationCompleted = AddressOf Me.OngetJobDetailRSOperationCompleted
            End If
            Me.InvokeAsync("getJobDetailRS", New Object() {Job, Type, CustomerNumber}, Me.getJobDetailRSOperationCompleted, userState)
        End Sub
        
        Private Sub OngetJobDetailRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.getJobDetailRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getJobDetailRSCompleted(Me, New getJobDetailRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/getJobDetail2", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getJobDetail2(ByVal Job As String, ByVal Type As String, ByVal orderByDisposition As Boolean, ByVal filterFailed As Boolean, ByRef Tid As String, ByRef Items As Integer) As ItemDetail
            Dim results() As Object = Me.Invoke("getJobDetail2", New Object() {Job, Type, orderByDisposition, filterFailed})
            Tid = CType(results(1),String)
            Items = CType(results(2),Integer)
            Return CType(results(0),ItemDetail)
        End Function
        
        '''<remarks/>
        Public Function BegingetJobDetail2(ByVal Job As String, ByVal Type As String, ByVal orderByDisposition As Boolean, ByVal filterFailed As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getJobDetail2", New Object() {Job, Type, orderByDisposition, filterFailed}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetJobDetail2(ByVal asyncResult As System.IAsyncResult, ByRef Tid As String, ByRef Items As Integer) As ItemDetail
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Tid = CType(results(1),String)
            Items = CType(results(2),Integer)
            Return CType(results(0),ItemDetail)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getJobDetail2Async(ByVal Job As String, ByVal Type As String, ByVal orderByDisposition As Boolean, ByVal filterFailed As Boolean)
            Me.getJobDetail2Async(Job, Type, orderByDisposition, filterFailed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getJobDetail2Async(ByVal Job As String, ByVal Type As String, ByVal orderByDisposition As Boolean, ByVal filterFailed As Boolean, ByVal userState As Object)
            If (Me.getJobDetail2OperationCompleted Is Nothing) Then
                Me.getJobDetail2OperationCompleted = AddressOf Me.OngetJobDetail2OperationCompleted
            End If
            Me.InvokeAsync("getJobDetail2", New Object() {Job, Type, orderByDisposition, filterFailed}, Me.getJobDetail2OperationCompleted, userState)
        End Sub
        
        Private Sub OngetJobDetail2OperationCompleted(ByVal arg As Object)
            If (Not (Me.getJobDetail2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getJobDetail2Completed(Me, New getJobDetail2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/getJobDetail2RS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getJobDetail2RS(ByVal Job As String, ByVal Type As String, ByVal CustomerNumber As Integer, ByVal orderByDisposition As Boolean, ByVal filterFailed As Boolean, ByRef Tid As String, ByRef Items As Integer) As ItemDetail
            Dim results() As Object = Me.Invoke("getJobDetail2RS", New Object() {Job, Type, CustomerNumber, orderByDisposition, filterFailed})
            Tid = CType(results(1),String)
            Items = CType(results(2),Integer)
            Return CType(results(0),ItemDetail)
        End Function
        
        '''<remarks/>
        Public Function BegingetJobDetail2RS(ByVal Job As String, ByVal Type As String, ByVal CustomerNumber As Integer, ByVal orderByDisposition As Boolean, ByVal filterFailed As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getJobDetail2RS", New Object() {Job, Type, CustomerNumber, orderByDisposition, filterFailed}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetJobDetail2RS(ByVal asyncResult As System.IAsyncResult, ByRef Tid As String, ByRef Items As Integer) As ItemDetail
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Tid = CType(results(1),String)
            Items = CType(results(2),Integer)
            Return CType(results(0),ItemDetail)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getJobDetail2RSAsync(ByVal Job As String, ByVal Type As String, ByVal CustomerNumber As Integer, ByVal orderByDisposition As Boolean, ByVal filterFailed As Boolean)
            Me.getJobDetail2RSAsync(Job, Type, CustomerNumber, orderByDisposition, filterFailed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getJobDetail2RSAsync(ByVal Job As String, ByVal Type As String, ByVal CustomerNumber As Integer, ByVal orderByDisposition As Boolean, ByVal filterFailed As Boolean, ByVal userState As Object)
            If (Me.getJobDetail2RSOperationCompleted Is Nothing) Then
                Me.getJobDetail2RSOperationCompleted = AddressOf Me.OngetJobDetail2RSOperationCompleted
            End If
            Me.InvokeAsync("getJobDetail2RS", New Object() {Job, Type, CustomerNumber, orderByDisposition, filterFailed}, Me.getJobDetail2RSOperationCompleted, userState)
        End Sub
        
        Private Sub OngetJobDetail2RSOperationCompleted(ByVal arg As Object)
            If (Not (Me.getJobDetail2RSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getJobDetail2RSCompleted(Me, New getJobDetail2RSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/getItemDetailByDates", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getItemDetailByDates(ByVal startDateTime As Date, ByVal endDateTime As Date, ByVal TID As String, ByVal filterFailed As Boolean) As ItemDetail2
            Dim results() As Object = Me.Invoke("getItemDetailByDates", New Object() {startDateTime, endDateTime, TID, filterFailed})
            Return CType(results(0),ItemDetail2)
        End Function
        
        '''<remarks/>
        Public Function BegingetItemDetailByDates(ByVal startDateTime As Date, ByVal endDateTime As Date, ByVal TID As String, ByVal filterFailed As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getItemDetailByDates", New Object() {startDateTime, endDateTime, TID, filterFailed}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetItemDetailByDates(ByVal asyncResult As System.IAsyncResult) As ItemDetail2
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),ItemDetail2)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getItemDetailByDatesAsync(ByVal startDateTime As Date, ByVal endDateTime As Date, ByVal TID As String, ByVal filterFailed As Boolean)
            Me.getItemDetailByDatesAsync(startDateTime, endDateTime, TID, filterFailed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getItemDetailByDatesAsync(ByVal startDateTime As Date, ByVal endDateTime As Date, ByVal TID As String, ByVal filterFailed As Boolean, ByVal userState As Object)
            If (Me.getItemDetailByDatesOperationCompleted Is Nothing) Then
                Me.getItemDetailByDatesOperationCompleted = AddressOf Me.OngetItemDetailByDatesOperationCompleted
            End If
            Me.InvokeAsync("getItemDetailByDates", New Object() {startDateTime, endDateTime, TID, filterFailed}, Me.getItemDetailByDatesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetItemDetailByDatesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getItemDetailByDatesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getItemDetailByDatesCompleted(Me, New getItemDetailByDatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/getItemDetailByDatesRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getItemDetailByDatesRS(ByVal CustomerNumber As Integer, ByVal startDateTime As Date, ByVal endDateTime As Date, ByVal TID As String, ByVal filterFailed As Boolean) As ItemDetail2
            Dim results() As Object = Me.Invoke("getItemDetailByDatesRS", New Object() {CustomerNumber, startDateTime, endDateTime, TID, filterFailed})
            Return CType(results(0),ItemDetail2)
        End Function
        
        '''<remarks/>
        Public Function BegingetItemDetailByDatesRS(ByVal CustomerNumber As Integer, ByVal startDateTime As Date, ByVal endDateTime As Date, ByVal TID As String, ByVal filterFailed As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getItemDetailByDatesRS", New Object() {CustomerNumber, startDateTime, endDateTime, TID, filterFailed}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetItemDetailByDatesRS(ByVal asyncResult As System.IAsyncResult) As ItemDetail2
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),ItemDetail2)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getItemDetailByDatesRSAsync(ByVal CustomerNumber As Integer, ByVal startDateTime As Date, ByVal endDateTime As Date, ByVal TID As String, ByVal filterFailed As Boolean)
            Me.getItemDetailByDatesRSAsync(CustomerNumber, startDateTime, endDateTime, TID, filterFailed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getItemDetailByDatesRSAsync(ByVal CustomerNumber As Integer, ByVal startDateTime As Date, ByVal endDateTime As Date, ByVal TID As String, ByVal filterFailed As Boolean, ByVal userState As Object)
            If (Me.getItemDetailByDatesRSOperationCompleted Is Nothing) Then
                Me.getItemDetailByDatesRSOperationCompleted = AddressOf Me.OngetItemDetailByDatesRSOperationCompleted
            End If
            Me.InvokeAsync("getItemDetailByDatesRS", New Object() {CustomerNumber, startDateTime, endDateTime, TID, filterFailed}, Me.getItemDetailByDatesRSOperationCompleted, userState)
        End Sub
        
        Private Sub OngetItemDetailByDatesRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.getItemDetailByDatesRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getItemDetailByDatesRSCompleted(Me, New getItemDetailByDatesRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/getItemDetailByDates2", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getItemDetailByDates2(ByVal startDateTimeString As String, ByVal endDateTimeString As String, ByVal TID As String, ByVal filterFailed As Boolean) As DeliveryItem2()
            Dim results() As Object = Me.Invoke("getItemDetailByDates2", New Object() {startDateTimeString, endDateTimeString, TID, filterFailed})
            Return CType(results(0),DeliveryItem2())
        End Function
        
        '''<remarks/>
        Public Function BegingetItemDetailByDates2(ByVal startDateTimeString As String, ByVal endDateTimeString As String, ByVal TID As String, ByVal filterFailed As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getItemDetailByDates2", New Object() {startDateTimeString, endDateTimeString, TID, filterFailed}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetItemDetailByDates2(ByVal asyncResult As System.IAsyncResult) As DeliveryItem2()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),DeliveryItem2())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getItemDetailByDates2Async(ByVal startDateTimeString As String, ByVal endDateTimeString As String, ByVal TID As String, ByVal filterFailed As Boolean)
            Me.getItemDetailByDates2Async(startDateTimeString, endDateTimeString, TID, filterFailed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getItemDetailByDates2Async(ByVal startDateTimeString As String, ByVal endDateTimeString As String, ByVal TID As String, ByVal filterFailed As Boolean, ByVal userState As Object)
            If (Me.getItemDetailByDates2OperationCompleted Is Nothing) Then
                Me.getItemDetailByDates2OperationCompleted = AddressOf Me.OngetItemDetailByDates2OperationCompleted
            End If
            Me.InvokeAsync("getItemDetailByDates2", New Object() {startDateTimeString, endDateTimeString, TID, filterFailed}, Me.getItemDetailByDates2OperationCompleted, userState)
        End Sub
        
        Private Sub OngetItemDetailByDates2OperationCompleted(ByVal arg As Object)
            If (Not (Me.getItemDetailByDates2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getItemDetailByDates2Completed(Me, New getItemDetailByDates2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/getItemDetailByDates2RS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getItemDetailByDates2RS(ByVal CustomerNumber As Integer, ByVal startDateTimeString As String, ByVal endDateTimeString As String, ByVal TID As String, ByVal filterFailed As Boolean) As DeliveryItem2()
            Dim results() As Object = Me.Invoke("getItemDetailByDates2RS", New Object() {CustomerNumber, startDateTimeString, endDateTimeString, TID, filterFailed})
            Return CType(results(0),DeliveryItem2())
        End Function
        
        '''<remarks/>
        Public Function BegingetItemDetailByDates2RS(ByVal CustomerNumber As Integer, ByVal startDateTimeString As String, ByVal endDateTimeString As String, ByVal TID As String, ByVal filterFailed As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getItemDetailByDates2RS", New Object() {CustomerNumber, startDateTimeString, endDateTimeString, TID, filterFailed}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetItemDetailByDates2RS(ByVal asyncResult As System.IAsyncResult) As DeliveryItem2()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),DeliveryItem2())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getItemDetailByDates2RSAsync(ByVal CustomerNumber As Integer, ByVal startDateTimeString As String, ByVal endDateTimeString As String, ByVal TID As String, ByVal filterFailed As Boolean)
            Me.getItemDetailByDates2RSAsync(CustomerNumber, startDateTimeString, endDateTimeString, TID, filterFailed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getItemDetailByDates2RSAsync(ByVal CustomerNumber As Integer, ByVal startDateTimeString As String, ByVal endDateTimeString As String, ByVal TID As String, ByVal filterFailed As Boolean, ByVal userState As Object)
            If (Me.getItemDetailByDates2RSOperationCompleted Is Nothing) Then
                Me.getItemDetailByDates2RSOperationCompleted = AddressOf Me.OngetItemDetailByDates2RSOperationCompleted
            End If
            Me.InvokeAsync("getItemDetailByDates2RS", New Object() {CustomerNumber, startDateTimeString, endDateTimeString, TID, filterFailed}, Me.getItemDetailByDates2RSOperationCompleted, userState)
        End Sub
        
        Private Sub OngetItemDetailByDates2RSOperationCompleted(ByVal arg As Object)
            If (Not (Me.getItemDetailByDates2RSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getItemDetailByDates2RSCompleted(Me, New getItemDetailByDates2RSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetJobTypeDocs", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobTypeDocs(ByVal JobType As String) As String()
            Dim results() As Object = Me.Invoke("GetJobTypeDocs", New Object() {JobType})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGetJobTypeDocs(ByVal JobType As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetJobTypeDocs", New Object() {JobType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetJobTypeDocs(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobTypeDocsAsync(ByVal JobType As String)
            Me.GetJobTypeDocsAsync(JobType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobTypeDocsAsync(ByVal JobType As String, ByVal userState As Object)
            If (Me.GetJobTypeDocsOperationCompleted Is Nothing) Then
                Me.GetJobTypeDocsOperationCompleted = AddressOf Me.OnGetJobTypeDocsOperationCompleted
            End If
            Me.InvokeAsync("GetJobTypeDocs", New Object() {JobType}, Me.GetJobTypeDocsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobTypeDocsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobTypeDocsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobTypeDocsCompleted(Me, New GetJobTypeDocsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetJobTypeDocsRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobTypeDocsRS(ByVal JobType As String, ByVal CustomerNumber As Integer) As String()
            Dim results() As Object = Me.Invoke("GetJobTypeDocsRS", New Object() {JobType, CustomerNumber})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGetJobTypeDocsRS(ByVal JobType As String, ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetJobTypeDocsRS", New Object() {JobType, CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetJobTypeDocsRS(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobTypeDocsRSAsync(ByVal JobType As String, ByVal CustomerNumber As Integer)
            Me.GetJobTypeDocsRSAsync(JobType, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobTypeDocsRSAsync(ByVal JobType As String, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.GetJobTypeDocsRSOperationCompleted Is Nothing) Then
                Me.GetJobTypeDocsRSOperationCompleted = AddressOf Me.OnGetJobTypeDocsRSOperationCompleted
            End If
            Me.InvokeAsync("GetJobTypeDocsRS", New Object() {JobType, CustomerNumber}, Me.GetJobTypeDocsRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobTypeDocsRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobTypeDocsRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobTypeDocsRSCompleted(Me, New GetJobTypeDocsRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetJobTypeLists", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobTypeLists(ByVal JobType As String) As String()
            Dim results() As Object = Me.Invoke("GetJobTypeLists", New Object() {JobType})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGetJobTypeLists(ByVal JobType As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetJobTypeLists", New Object() {JobType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetJobTypeLists(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobTypeListsAsync(ByVal JobType As String)
            Me.GetJobTypeListsAsync(JobType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobTypeListsAsync(ByVal JobType As String, ByVal userState As Object)
            If (Me.GetJobTypeListsOperationCompleted Is Nothing) Then
                Me.GetJobTypeListsOperationCompleted = AddressOf Me.OnGetJobTypeListsOperationCompleted
            End If
            Me.InvokeAsync("GetJobTypeLists", New Object() {JobType}, Me.GetJobTypeListsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobTypeListsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobTypeListsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobTypeListsCompleted(Me, New GetJobTypeListsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetJobTypeListsRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobTypeListsRS(ByVal JobType As String, ByVal CustomerNumber As Integer) As String()
            Dim results() As Object = Me.Invoke("GetJobTypeListsRS", New Object() {JobType, CustomerNumber})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGetJobTypeListsRS(ByVal JobType As String, ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetJobTypeListsRS", New Object() {JobType, CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetJobTypeListsRS(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobTypeListsRSAsync(ByVal JobType As String, ByVal CustomerNumber As Integer)
            Me.GetJobTypeListsRSAsync(JobType, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobTypeListsRSAsync(ByVal JobType As String, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.GetJobTypeListsRSOperationCompleted Is Nothing) Then
                Me.GetJobTypeListsRSOperationCompleted = AddressOf Me.OnGetJobTypeListsRSOperationCompleted
            End If
            Me.InvokeAsync("GetJobTypeListsRS", New Object() {JobType, CustomerNumber}, Me.GetJobTypeListsRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobTypeListsRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobTypeListsRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobTypeListsRSCompleted(Me, New GetJobTypeListsRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetDefaultMode", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDefaultMode(ByVal Jobtype As String) As Faxmode
            Dim results() As Object = Me.Invoke("GetDefaultMode", New Object() {Jobtype})
            Return CType(results(0),Faxmode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDefaultMode(ByVal Jobtype As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDefaultMode", New Object() {Jobtype}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDefaultMode(ByVal asyncResult As System.IAsyncResult) As Faxmode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Faxmode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDefaultModeAsync(ByVal Jobtype As String)
            Me.GetDefaultModeAsync(Jobtype, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDefaultModeAsync(ByVal Jobtype As String, ByVal userState As Object)
            If (Me.GetDefaultModeOperationCompleted Is Nothing) Then
                Me.GetDefaultModeOperationCompleted = AddressOf Me.OnGetDefaultModeOperationCompleted
            End If
            Me.InvokeAsync("GetDefaultMode", New Object() {Jobtype}, Me.GetDefaultModeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDefaultModeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDefaultModeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDefaultModeCompleted(Me, New GetDefaultModeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetDefaultModeRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDefaultModeRS(ByVal Jobtype As String, ByVal CustomerNumber As Integer) As Faxmode
            Dim results() As Object = Me.Invoke("GetDefaultModeRS", New Object() {Jobtype, CustomerNumber})
            Return CType(results(0),Faxmode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDefaultModeRS(ByVal Jobtype As String, ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDefaultModeRS", New Object() {Jobtype, CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDefaultModeRS(ByVal asyncResult As System.IAsyncResult) As Faxmode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Faxmode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDefaultModeRSAsync(ByVal Jobtype As String, ByVal CustomerNumber As Integer)
            Me.GetDefaultModeRSAsync(Jobtype, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDefaultModeRSAsync(ByVal Jobtype As String, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.GetDefaultModeRSOperationCompleted Is Nothing) Then
                Me.GetDefaultModeRSOperationCompleted = AddressOf Me.OnGetDefaultModeRSOperationCompleted
            End If
            Me.InvokeAsync("GetDefaultModeRS", New Object() {Jobtype, CustomerNumber}, Me.GetDefaultModeRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDefaultModeRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDefaultModeRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDefaultModeRSCompleted(Me, New GetDefaultModeRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetShouldSuppressFaxConversion", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetShouldSuppressFaxConversion(ByVal Jobtype As String) As Boolean
            Dim results() As Object = Me.Invoke("GetShouldSuppressFaxConversion", New Object() {Jobtype})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginGetShouldSuppressFaxConversion(ByVal Jobtype As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetShouldSuppressFaxConversion", New Object() {Jobtype}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetShouldSuppressFaxConversion(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetShouldSuppressFaxConversionAsync(ByVal Jobtype As String)
            Me.GetShouldSuppressFaxConversionAsync(Jobtype, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetShouldSuppressFaxConversionAsync(ByVal Jobtype As String, ByVal userState As Object)
            If (Me.GetShouldSuppressFaxConversionOperationCompleted Is Nothing) Then
                Me.GetShouldSuppressFaxConversionOperationCompleted = AddressOf Me.OnGetShouldSuppressFaxConversionOperationCompleted
            End If
            Me.InvokeAsync("GetShouldSuppressFaxConversion", New Object() {Jobtype}, Me.GetShouldSuppressFaxConversionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetShouldSuppressFaxConversionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetShouldSuppressFaxConversionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetShouldSuppressFaxConversionCompleted(Me, New GetShouldSuppressFaxConversionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetShouldSuppressFaxConversionRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetShouldSuppressFaxConversionRS(ByVal Jobtype As String, ByVal CustomerNumber As Integer) As Boolean
            Dim results() As Object = Me.Invoke("GetShouldSuppressFaxConversionRS", New Object() {Jobtype, CustomerNumber})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginGetShouldSuppressFaxConversionRS(ByVal Jobtype As String, ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetShouldSuppressFaxConversionRS", New Object() {Jobtype, CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetShouldSuppressFaxConversionRS(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetShouldSuppressFaxConversionRSAsync(ByVal Jobtype As String, ByVal CustomerNumber As Integer)
            Me.GetShouldSuppressFaxConversionRSAsync(Jobtype, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetShouldSuppressFaxConversionRSAsync(ByVal Jobtype As String, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.GetShouldSuppressFaxConversionRSOperationCompleted Is Nothing) Then
                Me.GetShouldSuppressFaxConversionRSOperationCompleted = AddressOf Me.OnGetShouldSuppressFaxConversionRSOperationCompleted
            End If
            Me.InvokeAsync("GetShouldSuppressFaxConversionRS", New Object() {Jobtype, CustomerNumber}, Me.GetShouldSuppressFaxConversionRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetShouldSuppressFaxConversionRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetShouldSuppressFaxConversionRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetShouldSuppressFaxConversionRSCompleted(Me, New GetShouldSuppressFaxConversionRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StatusEx", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StatusEx() As JobDataEx
            Dim results() As Object = Me.Invoke("StatusEx", New Object(-1) {})
            Return CType(results(0),JobDataEx)
        End Function
        
        '''<remarks/>
        Public Function BeginStatusEx(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("StatusEx", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndStatusEx(ByVal asyncResult As System.IAsyncResult) As JobDataEx
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),JobDataEx)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatusExAsync()
            Me.StatusExAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatusExAsync(ByVal userState As Object)
            If (Me.StatusExOperationCompleted Is Nothing) Then
                Me.StatusExOperationCompleted = AddressOf Me.OnStatusExOperationCompleted
            End If
            Me.InvokeAsync("StatusEx", New Object(-1) {}, Me.StatusExOperationCompleted, userState)
        End Sub
        
        Private Sub OnStatusExOperationCompleted(ByVal arg As Object)
            If (Not (Me.StatusExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatusExCompleted(Me, New StatusExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/Status", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Status() As JobData
            Dim results() As Object = Me.Invoke("Status", New Object(-1) {})
            Return CType(results(0),JobData)
        End Function
        
        '''<remarks/>
        Public Function BeginStatus(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Status", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndStatus(ByVal asyncResult As System.IAsyncResult) As JobData
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),JobData)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatusAsync()
            Me.StatusAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatusAsync(ByVal userState As Object)
            If (Me.StatusOperationCompleted Is Nothing) Then
                Me.StatusOperationCompleted = AddressOf Me.OnStatusOperationCompleted
            End If
            Me.InvokeAsync("Status", New Object(-1) {}, Me.StatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.StatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatusCompleted(Me, New StatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StatusForJob", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StatusForJob(ByVal JobNumber As String, ByVal JobType As String) As JobDataEx
            Dim results() As Object = Me.Invoke("StatusForJob", New Object() {JobNumber, JobType})
            Return CType(results(0),JobDataEx)
        End Function
        
        '''<remarks/>
        Public Function BeginStatusForJob(ByVal JobNumber As String, ByVal JobType As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("StatusForJob", New Object() {JobNumber, JobType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndStatusForJob(ByVal asyncResult As System.IAsyncResult) As JobDataEx
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),JobDataEx)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatusForJobAsync(ByVal JobNumber As String, ByVal JobType As String)
            Me.StatusForJobAsync(JobNumber, JobType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatusForJobAsync(ByVal JobNumber As String, ByVal JobType As String, ByVal userState As Object)
            If (Me.StatusForJobOperationCompleted Is Nothing) Then
                Me.StatusForJobOperationCompleted = AddressOf Me.OnStatusForJobOperationCompleted
            End If
            Me.InvokeAsync("StatusForJob", New Object() {JobNumber, JobType}, Me.StatusForJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnStatusForJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.StatusForJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatusForJobCompleted(Me, New StatusForJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StatusForJob2", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StatusForJob2(ByVal JobNumber As String, ByVal JobType As String) As JobStats
            Dim results() As Object = Me.Invoke("StatusForJob2", New Object() {JobNumber, JobType})
            Return CType(results(0),JobStats)
        End Function
        
        '''<remarks/>
        Public Function BeginStatusForJob2(ByVal JobNumber As String, ByVal JobType As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("StatusForJob2", New Object() {JobNumber, JobType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndStatusForJob2(ByVal asyncResult As System.IAsyncResult) As JobStats
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),JobStats)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatusForJob2Async(ByVal JobNumber As String, ByVal JobType As String)
            Me.StatusForJob2Async(JobNumber, JobType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatusForJob2Async(ByVal JobNumber As String, ByVal JobType As String, ByVal userState As Object)
            If (Me.StatusForJob2OperationCompleted Is Nothing) Then
                Me.StatusForJob2OperationCompleted = AddressOf Me.OnStatusForJob2OperationCompleted
            End If
            Me.InvokeAsync("StatusForJob2", New Object() {JobNumber, JobType}, Me.StatusForJob2OperationCompleted, userState)
        End Sub
        
        Private Sub OnStatusForJob2OperationCompleted(ByVal arg As Object)
            If (Not (Me.StatusForJob2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatusForJob2Completed(Me, New StatusForJob2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetJobTypes", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobTypes() As String()
            Dim results() As Object = Me.Invoke("GetJobTypes", New Object(-1) {})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGetJobTypes(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetJobTypes", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetJobTypes(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobTypesAsync()
            Me.GetJobTypesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobTypesAsync(ByVal userState As Object)
            If (Me.GetJobTypesOperationCompleted Is Nothing) Then
                Me.GetJobTypesOperationCompleted = AddressOf Me.OnGetJobTypesOperationCompleted
            End If
            Me.InvokeAsync("GetJobTypes", New Object(-1) {}, Me.GetJobTypesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobTypesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobTypesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobTypesCompleted(Me, New GetJobTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StartBroadcast", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StartBroadcast(ByVal b As Broadcast) As BroadcastReturn
            Dim results() As Object = Me.Invoke("StartBroadcast", New Object() {b})
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Function BeginStartBroadcast(ByVal b As Broadcast, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("StartBroadcast", New Object() {b}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndStartBroadcast(ByVal asyncResult As System.IAsyncResult) As BroadcastReturn
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StartBroadcastAsync(ByVal b As Broadcast)
            Me.StartBroadcastAsync(b, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StartBroadcastAsync(ByVal b As Broadcast, ByVal userState As Object)
            If (Me.StartBroadcastOperationCompleted Is Nothing) Then
                Me.StartBroadcastOperationCompleted = AddressOf Me.OnStartBroadcastOperationCompleted
            End If
            Me.InvokeAsync("StartBroadcast", New Object() {b}, Me.StartBroadcastOperationCompleted, userState)
        End Sub
        
        Private Sub OnStartBroadcastOperationCompleted(ByVal arg As Object)
            If (Not (Me.StartBroadcastCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StartBroadcastCompleted(Me, New StartBroadcastCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StartPreview", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StartPreview(ByVal b As Broadcast) As BroadcastReturn
            Dim results() As Object = Me.Invoke("StartPreview", New Object() {b})
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Function BeginStartPreview(ByVal b As Broadcast, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("StartPreview", New Object() {b}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndStartPreview(ByVal asyncResult As System.IAsyncResult) As BroadcastReturn
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StartPreviewAsync(ByVal b As Broadcast)
            Me.StartPreviewAsync(b, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StartPreviewAsync(ByVal b As Broadcast, ByVal userState As Object)
            If (Me.StartPreviewOperationCompleted Is Nothing) Then
                Me.StartPreviewOperationCompleted = AddressOf Me.OnStartPreviewOperationCompleted
            End If
            Me.InvokeAsync("StartPreview", New Object() {b}, Me.StartPreviewOperationCompleted, userState)
        End Sub
        
        Private Sub OnStartPreviewOperationCompleted(ByVal arg As Object)
            If (Not (Me.StartPreviewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StartPreviewCompleted(Me, New StartPreviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetGroup", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGroup() As GroupMember()
            Dim results() As Object = Me.Invoke("GetGroup", New Object(-1) {})
            Return CType(results(0),GroupMember())
        End Function
        
        '''<remarks/>
        Public Function BeginGetGroup(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetGroup", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetGroup(ByVal asyncResult As System.IAsyncResult) As GroupMember()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),GroupMember())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGroupAsync()
            Me.GetGroupAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGroupAsync(ByVal userState As Object)
            If (Me.GetGroupOperationCompleted Is Nothing) Then
                Me.GetGroupOperationCompleted = AddressOf Me.OnGetGroupOperationCompleted
            End If
            Me.InvokeAsync("GetGroup", New Object(-1) {}, Me.GetGroupOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGroupOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGroupCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGroupCompleted(Me, New GetGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/DownLoadFilesFromFolders", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownLoadFilesFromFolders(ByVal c As HostedFileCollection) As FileReference()
            Dim results() As Object = Me.Invoke("DownLoadFilesFromFolders", New Object() {c})
            Return CType(results(0),FileReference())
        End Function
        
        '''<remarks/>
        Public Function BeginDownLoadFilesFromFolders(ByVal c As HostedFileCollection, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownLoadFilesFromFolders", New Object() {c}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownLoadFilesFromFolders(ByVal asyncResult As System.IAsyncResult) As FileReference()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),FileReference())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownLoadFilesFromFoldersAsync(ByVal c As HostedFileCollection)
            Me.DownLoadFilesFromFoldersAsync(c, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownLoadFilesFromFoldersAsync(ByVal c As HostedFileCollection, ByVal userState As Object)
            If (Me.DownLoadFilesFromFoldersOperationCompleted Is Nothing) Then
                Me.DownLoadFilesFromFoldersOperationCompleted = AddressOf Me.OnDownLoadFilesFromFoldersOperationCompleted
            End If
            Me.InvokeAsync("DownLoadFilesFromFolders", New Object() {c}, Me.DownLoadFilesFromFoldersOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownLoadFilesFromFoldersOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownLoadFilesFromFoldersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownLoadFilesFromFoldersCompleted(Me, New DownLoadFilesFromFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetReport", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReport(ByVal Job As String) As FileReference
            Dim results() As Object = Me.Invoke("GetReport", New Object() {Job})
            Return CType(results(0),FileReference)
        End Function
        
        '''<remarks/>
        Public Function BeginGetReport(ByVal Job As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReport", New Object() {Job}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReport(ByVal asyncResult As System.IAsyncResult) As FileReference
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),FileReference)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReportAsync(ByVal Job As String)
            Me.GetReportAsync(Job, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReportAsync(ByVal Job As String, ByVal userState As Object)
            If (Me.GetReportOperationCompleted Is Nothing) Then
                Me.GetReportOperationCompleted = AddressOf Me.OnGetReportOperationCompleted
            End If
            Me.InvokeAsync("GetReport", New Object() {Job}, Me.GetReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReportCompleted(Me, New GetReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/DeleteFilesFromFolders", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteFilesFromFolders(ByVal c As HostedFileCollection) As String()
            Dim results() As Object = Me.Invoke("DeleteFilesFromFolders", New Object() {c})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteFilesFromFolders(ByVal c As HostedFileCollection, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteFilesFromFolders", New Object() {c}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteFilesFromFolders(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteFilesFromFoldersAsync(ByVal c As HostedFileCollection)
            Me.DeleteFilesFromFoldersAsync(c, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteFilesFromFoldersAsync(ByVal c As HostedFileCollection, ByVal userState As Object)
            If (Me.DeleteFilesFromFoldersOperationCompleted Is Nothing) Then
                Me.DeleteFilesFromFoldersOperationCompleted = AddressOf Me.OnDeleteFilesFromFoldersOperationCompleted
            End If
            Me.InvokeAsync("DeleteFilesFromFolders", New Object() {c}, Me.DeleteFilesFromFoldersOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteFilesFromFoldersOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteFilesFromFoldersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteFilesFromFoldersCompleted(Me, New DeleteFilesFromFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/UploadFilesToFolders", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadFilesToFolders(ByVal c As HostedFileCollection) As String()
            Dim results() As Object = Me.Invoke("UploadFilesToFolders", New Object() {c})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginUploadFilesToFolders(ByVal c As HostedFileCollection, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadFilesToFolders", New Object() {c}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadFilesToFolders(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadFilesToFoldersAsync(ByVal c As HostedFileCollection)
            Me.UploadFilesToFoldersAsync(c, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadFilesToFoldersAsync(ByVal c As HostedFileCollection, ByVal userState As Object)
            If (Me.UploadFilesToFoldersOperationCompleted Is Nothing) Then
                Me.UploadFilesToFoldersOperationCompleted = AddressOf Me.OnUploadFilesToFoldersOperationCompleted
            End If
            Me.InvokeAsync("UploadFilesToFolders", New Object() {c}, Me.UploadFilesToFoldersOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadFilesToFoldersOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadFilesToFoldersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadFilesToFoldersCompleted(Me, New UploadFilesToFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetDocuments", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDocuments() As String()
            Dim results() As Object = Me.Invoke("GetDocuments", New Object(-1) {})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGetDocuments(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDocuments", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDocuments(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDocumentsAsync()
            Me.GetDocumentsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDocumentsAsync(ByVal userState As Object)
            If (Me.GetDocumentsOperationCompleted Is Nothing) Then
                Me.GetDocumentsOperationCompleted = AddressOf Me.OnGetDocumentsOperationCompleted
            End If
            Me.InvokeAsync("GetDocuments", New Object(-1) {}, Me.GetDocumentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDocumentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDocumentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDocumentsCompleted(Me, New GetDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetLists", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLists() As String()
            Dim results() As Object = Me.Invoke("GetLists", New Object(-1) {})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGetLists(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetLists", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetLists(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListsAsync()
            Me.GetListsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListsAsync(ByVal userState As Object)
            If (Me.GetListsOperationCompleted Is Nothing) Then
                Me.GetListsOperationCompleted = AddressOf Me.OnGetListsOperationCompleted
            End If
            Me.InvokeAsync("GetLists", New Object(-1) {}, Me.GetListsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListsCompleted(Me, New GetListsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/CancelJob", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelJob(ByVal Job As String, ByVal jobType As String) As String()
            Dim results() As Object = Me.Invoke("CancelJob", New Object() {Job, jobType})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginCancelJob(ByVal Job As String, ByVal jobType As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CancelJob", New Object() {Job, jobType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCancelJob(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelJobAsync(ByVal Job As String, ByVal jobType As String)
            Me.CancelJobAsync(Job, jobType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelJobAsync(ByVal Job As String, ByVal jobType As String, ByVal userState As Object)
            If (Me.CancelJobOperationCompleted Is Nothing) Then
                Me.CancelJobOperationCompleted = AddressOf Me.OnCancelJobOperationCompleted
            End If
            Me.InvokeAsync("CancelJob", New Object() {Job, jobType}, Me.CancelJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelJobCompleted(Me, New CancelJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/DownLoadFilesFromFoldersRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DownLoadFilesFromFoldersRS(ByVal c As HostedFileCollection, ByVal CustomerNumber As Integer) As FileReference()
            Dim results() As Object = Me.Invoke("DownLoadFilesFromFoldersRS", New Object() {c, CustomerNumber})
            Return CType(results(0),FileReference())
        End Function
        
        '''<remarks/>
        Public Function BeginDownLoadFilesFromFoldersRS(ByVal c As HostedFileCollection, ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DownLoadFilesFromFoldersRS", New Object() {c, CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDownLoadFilesFromFoldersRS(ByVal asyncResult As System.IAsyncResult) As FileReference()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),FileReference())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DownLoadFilesFromFoldersRSAsync(ByVal c As HostedFileCollection, ByVal CustomerNumber As Integer)
            Me.DownLoadFilesFromFoldersRSAsync(c, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DownLoadFilesFromFoldersRSAsync(ByVal c As HostedFileCollection, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.DownLoadFilesFromFoldersRSOperationCompleted Is Nothing) Then
                Me.DownLoadFilesFromFoldersRSOperationCompleted = AddressOf Me.OnDownLoadFilesFromFoldersRSOperationCompleted
            End If
            Me.InvokeAsync("DownLoadFilesFromFoldersRS", New Object() {c, CustomerNumber}, Me.DownLoadFilesFromFoldersRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnDownLoadFilesFromFoldersRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.DownLoadFilesFromFoldersRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DownLoadFilesFromFoldersRSCompleted(Me, New DownLoadFilesFromFoldersRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetReportRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReportRS(ByVal Job As String, ByVal CustomerNumber As Integer) As FileReference
            Dim results() As Object = Me.Invoke("GetReportRS", New Object() {Job, CustomerNumber})
            Return CType(results(0),FileReference)
        End Function
        
        '''<remarks/>
        Public Function BeginGetReportRS(ByVal Job As String, ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetReportRS", New Object() {Job, CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetReportRS(ByVal asyncResult As System.IAsyncResult) As FileReference
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),FileReference)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReportRSAsync(ByVal Job As String, ByVal CustomerNumber As Integer)
            Me.GetReportRSAsync(Job, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReportRSAsync(ByVal Job As String, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.GetReportRSOperationCompleted Is Nothing) Then
                Me.GetReportRSOperationCompleted = AddressOf Me.OnGetReportRSOperationCompleted
            End If
            Me.InvokeAsync("GetReportRS", New Object() {Job, CustomerNumber}, Me.GetReportRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReportRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReportRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReportRSCompleted(Me, New GetReportRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/DeleteFilesFromFoldersRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteFilesFromFoldersRS(ByVal c As HostedFileCollection, ByVal CustomerNumber As Integer) As String()
            Dim results() As Object = Me.Invoke("DeleteFilesFromFoldersRS", New Object() {c, CustomerNumber})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteFilesFromFoldersRS(ByVal c As HostedFileCollection, ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteFilesFromFoldersRS", New Object() {c, CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteFilesFromFoldersRS(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteFilesFromFoldersRSAsync(ByVal c As HostedFileCollection, ByVal CustomerNumber As Integer)
            Me.DeleteFilesFromFoldersRSAsync(c, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteFilesFromFoldersRSAsync(ByVal c As HostedFileCollection, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.DeleteFilesFromFoldersRSOperationCompleted Is Nothing) Then
                Me.DeleteFilesFromFoldersRSOperationCompleted = AddressOf Me.OnDeleteFilesFromFoldersRSOperationCompleted
            End If
            Me.InvokeAsync("DeleteFilesFromFoldersRS", New Object() {c, CustomerNumber}, Me.DeleteFilesFromFoldersRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteFilesFromFoldersRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteFilesFromFoldersRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteFilesFromFoldersRSCompleted(Me, New DeleteFilesFromFoldersRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/UploadFilesToFoldersRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadFilesToFoldersRS(ByVal c As HostedFileCollection, ByVal CustomerNumber As Integer) As String()
            Dim results() As Object = Me.Invoke("UploadFilesToFoldersRS", New Object() {c, CustomerNumber})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginUploadFilesToFoldersRS(ByVal c As HostedFileCollection, ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadFilesToFoldersRS", New Object() {c, CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadFilesToFoldersRS(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadFilesToFoldersRSAsync(ByVal c As HostedFileCollection, ByVal CustomerNumber As Integer)
            Me.UploadFilesToFoldersRSAsync(c, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadFilesToFoldersRSAsync(ByVal c As HostedFileCollection, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.UploadFilesToFoldersRSOperationCompleted Is Nothing) Then
                Me.UploadFilesToFoldersRSOperationCompleted = AddressOf Me.OnUploadFilesToFoldersRSOperationCompleted
            End If
            Me.InvokeAsync("UploadFilesToFoldersRS", New Object() {c, CustomerNumber}, Me.UploadFilesToFoldersRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadFilesToFoldersRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadFilesToFoldersRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadFilesToFoldersRSCompleted(Me, New UploadFilesToFoldersRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetCustomerNumber", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCustomerNumber() As Integer
            Dim results() As Object = Me.Invoke("GetCustomerNumber", New Object(-1) {})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetCustomerNumber(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetCustomerNumber", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetCustomerNumber(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCustomerNumberAsync()
            Me.GetCustomerNumberAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCustomerNumberAsync(ByVal userState As Object)
            If (Me.GetCustomerNumberOperationCompleted Is Nothing) Then
                Me.GetCustomerNumberOperationCompleted = AddressOf Me.OnGetCustomerNumberOperationCompleted
            End If
            Me.InvokeAsync("GetCustomerNumber", New Object(-1) {}, Me.GetCustomerNumberOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCustomerNumberOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCustomerNumberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCustomerNumberCompleted(Me, New GetCustomerNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetDocumentsRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDocumentsRS(ByVal CustomerNumber As Integer) As String()
            Dim results() As Object = Me.Invoke("GetDocumentsRS", New Object() {CustomerNumber})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGetDocumentsRS(ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDocumentsRS", New Object() {CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDocumentsRS(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDocumentsRSAsync(ByVal CustomerNumber As Integer)
            Me.GetDocumentsRSAsync(CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDocumentsRSAsync(ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.GetDocumentsRSOperationCompleted Is Nothing) Then
                Me.GetDocumentsRSOperationCompleted = AddressOf Me.OnGetDocumentsRSOperationCompleted
            End If
            Me.InvokeAsync("GetDocumentsRS", New Object() {CustomerNumber}, Me.GetDocumentsRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDocumentsRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDocumentsRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDocumentsRSCompleted(Me, New GetDocumentsRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/CancelJobRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelJobRS(ByVal Job As String, ByVal jobType As String, ByVal CustomerNumber As Integer) As String()
            Dim results() As Object = Me.Invoke("CancelJobRS", New Object() {Job, jobType, CustomerNumber})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginCancelJobRS(ByVal Job As String, ByVal jobType As String, ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CancelJobRS", New Object() {Job, jobType, CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCancelJobRS(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelJobRSAsync(ByVal Job As String, ByVal jobType As String, ByVal CustomerNumber As Integer)
            Me.CancelJobRSAsync(Job, jobType, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelJobRSAsync(ByVal Job As String, ByVal jobType As String, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.CancelJobRSOperationCompleted Is Nothing) Then
                Me.CancelJobRSOperationCompleted = AddressOf Me.OnCancelJobRSOperationCompleted
            End If
            Me.InvokeAsync("CancelJobRS", New Object() {Job, jobType, CustomerNumber}, Me.CancelJobRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelJobRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelJobRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelJobRSCompleted(Me, New CancelJobRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/ApprovePreview", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ApprovePreview(ByVal Job As String, ByVal jobType As String) As String()
            Dim results() As Object = Me.Invoke("ApprovePreview", New Object() {Job, jobType})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginApprovePreview(ByVal Job As String, ByVal jobType As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ApprovePreview", New Object() {Job, jobType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndApprovePreview(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ApprovePreviewAsync(ByVal Job As String, ByVal jobType As String)
            Me.ApprovePreviewAsync(Job, jobType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ApprovePreviewAsync(ByVal Job As String, ByVal jobType As String, ByVal userState As Object)
            If (Me.ApprovePreviewOperationCompleted Is Nothing) Then
                Me.ApprovePreviewOperationCompleted = AddressOf Me.OnApprovePreviewOperationCompleted
            End If
            Me.InvokeAsync("ApprovePreview", New Object() {Job, jobType}, Me.ApprovePreviewOperationCompleted, userState)
        End Sub
        
        Private Sub OnApprovePreviewOperationCompleted(ByVal arg As Object)
            If (Not (Me.ApprovePreviewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ApprovePreviewCompleted(Me, New ApprovePreviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/ApprovePreviewRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ApprovePreviewRS(ByVal Job As String, ByVal jobType As String, ByVal CustomerNumber As Integer) As String()
            Dim results() As Object = Me.Invoke("ApprovePreviewRS", New Object() {Job, jobType, CustomerNumber})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginApprovePreviewRS(ByVal Job As String, ByVal jobType As String, ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ApprovePreviewRS", New Object() {Job, jobType, CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndApprovePreviewRS(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ApprovePreviewRSAsync(ByVal Job As String, ByVal jobType As String, ByVal CustomerNumber As Integer)
            Me.ApprovePreviewRSAsync(Job, jobType, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ApprovePreviewRSAsync(ByVal Job As String, ByVal jobType As String, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.ApprovePreviewRSOperationCompleted Is Nothing) Then
                Me.ApprovePreviewRSOperationCompleted = AddressOf Me.OnApprovePreviewRSOperationCompleted
            End If
            Me.InvokeAsync("ApprovePreviewRS", New Object() {Job, jobType, CustomerNumber}, Me.ApprovePreviewRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnApprovePreviewRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.ApprovePreviewRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ApprovePreviewRSCompleted(Me, New ApprovePreviewRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetPreview", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPreview(ByVal Job As String, ByVal jobType As String) As FileReference
            Dim results() As Object = Me.Invoke("GetPreview", New Object() {Job, jobType})
            Return CType(results(0),FileReference)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPreview(ByVal Job As String, ByVal jobType As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPreview", New Object() {Job, jobType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPreview(ByVal asyncResult As System.IAsyncResult) As FileReference
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),FileReference)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPreviewAsync(ByVal Job As String, ByVal jobType As String)
            Me.GetPreviewAsync(Job, jobType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPreviewAsync(ByVal Job As String, ByVal jobType As String, ByVal userState As Object)
            If (Me.GetPreviewOperationCompleted Is Nothing) Then
                Me.GetPreviewOperationCompleted = AddressOf Me.OnGetPreviewOperationCompleted
            End If
            Me.InvokeAsync("GetPreview", New Object() {Job, jobType}, Me.GetPreviewOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPreviewOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPreviewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPreviewCompleted(Me, New GetPreviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetPreviewRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPreviewRS(ByVal Job As String, ByVal jobType As String, ByVal CustomerNumber As Integer) As FileReference
            Dim results() As Object = Me.Invoke("GetPreviewRS", New Object() {Job, jobType, CustomerNumber})
            Return CType(results(0),FileReference)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPreviewRS(ByVal Job As String, ByVal jobType As String, ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPreviewRS", New Object() {Job, jobType, CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPreviewRS(ByVal asyncResult As System.IAsyncResult) As FileReference
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),FileReference)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPreviewRSAsync(ByVal Job As String, ByVal jobType As String, ByVal CustomerNumber As Integer)
            Me.GetPreviewRSAsync(Job, jobType, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPreviewRSAsync(ByVal Job As String, ByVal jobType As String, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.GetPreviewRSOperationCompleted Is Nothing) Then
                Me.GetPreviewRSOperationCompleted = AddressOf Me.OnGetPreviewRSOperationCompleted
            End If
            Me.InvokeAsync("GetPreviewRS", New Object() {Job, jobType, CustomerNumber}, Me.GetPreviewRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPreviewRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPreviewRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPreviewRSCompleted(Me, New GetPreviewRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetListsRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetListsRS(ByVal CustomerNumber As Integer) As String()
            Dim results() As Object = Me.Invoke("GetListsRS", New Object() {CustomerNumber})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGetListsRS(ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetListsRS", New Object() {CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetListsRS(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetListsRSAsync(ByVal CustomerNumber As Integer)
            Me.GetListsRSAsync(CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetListsRSAsync(ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.GetListsRSOperationCompleted Is Nothing) Then
                Me.GetListsRSOperationCompleted = AddressOf Me.OnGetListsRSOperationCompleted
            End If
            Me.InvokeAsync("GetListsRS", New Object() {CustomerNumber}, Me.GetListsRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetListsRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetListsRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetListsRSCompleted(Me, New GetListsRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetJobTypesRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobTypesRS(ByVal CustomerNumber As Integer) As String()
            Dim results() As Object = Me.Invoke("GetJobTypesRS", New Object() {CustomerNumber})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BeginGetJobTypesRS(ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetJobTypesRS", New Object() {CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetJobTypesRS(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobTypesRSAsync(ByVal CustomerNumber As Integer)
            Me.GetJobTypesRSAsync(CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobTypesRSAsync(ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.GetJobTypesRSOperationCompleted Is Nothing) Then
                Me.GetJobTypesRSOperationCompleted = AddressOf Me.OnGetJobTypesRSOperationCompleted
            End If
            Me.InvokeAsync("GetJobTypesRS", New Object() {CustomerNumber}, Me.GetJobTypesRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobTypesRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobTypesRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobTypesRSCompleted(Me, New GetJobTypesRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StatusRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StatusRS(ByVal CustomerNumber As Integer) As JobData
            Dim results() As Object = Me.Invoke("StatusRS", New Object() {CustomerNumber})
            Return CType(results(0),JobData)
        End Function
        
        '''<remarks/>
        Public Function BeginStatusRS(ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("StatusRS", New Object() {CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndStatusRS(ByVal asyncResult As System.IAsyncResult) As JobData
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),JobData)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatusRSAsync(ByVal CustomerNumber As Integer)
            Me.StatusRSAsync(CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatusRSAsync(ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.StatusRSOperationCompleted Is Nothing) Then
                Me.StatusRSOperationCompleted = AddressOf Me.OnStatusRSOperationCompleted
            End If
            Me.InvokeAsync("StatusRS", New Object() {CustomerNumber}, Me.StatusRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnStatusRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.StatusRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatusRSCompleted(Me, New StatusRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StatusForJobRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StatusForJobRS(ByVal Job As String, ByVal JobType As String, ByVal CustomerNumber As Integer) As JobDataEx
            Dim results() As Object = Me.Invoke("StatusForJobRS", New Object() {Job, JobType, CustomerNumber})
            Return CType(results(0),JobDataEx)
        End Function
        
        '''<remarks/>
        Public Function BeginStatusForJobRS(ByVal Job As String, ByVal JobType As String, ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("StatusForJobRS", New Object() {Job, JobType, CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndStatusForJobRS(ByVal asyncResult As System.IAsyncResult) As JobDataEx
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),JobDataEx)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatusForJobRSAsync(ByVal Job As String, ByVal JobType As String, ByVal CustomerNumber As Integer)
            Me.StatusForJobRSAsync(Job, JobType, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatusForJobRSAsync(ByVal Job As String, ByVal JobType As String, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.StatusForJobRSOperationCompleted Is Nothing) Then
                Me.StatusForJobRSOperationCompleted = AddressOf Me.OnStatusForJobRSOperationCompleted
            End If
            Me.InvokeAsync("StatusForJobRS", New Object() {Job, JobType, CustomerNumber}, Me.StatusForJobRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnStatusForJobRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.StatusForJobRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatusForJobRSCompleted(Me, New StatusForJobRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StatusForJob2RS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StatusForJob2RS(ByVal Job As String, ByVal JobType As String, ByVal CustomerNumber As Integer) As JobStats
            Dim results() As Object = Me.Invoke("StatusForJob2RS", New Object() {Job, JobType, CustomerNumber})
            Return CType(results(0),JobStats)
        End Function
        
        '''<remarks/>
        Public Function BeginStatusForJob2RS(ByVal Job As String, ByVal JobType As String, ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("StatusForJob2RS", New Object() {Job, JobType, CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndStatusForJob2RS(ByVal asyncResult As System.IAsyncResult) As JobStats
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),JobStats)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatusForJob2RSAsync(ByVal Job As String, ByVal JobType As String, ByVal CustomerNumber As Integer)
            Me.StatusForJob2RSAsync(Job, JobType, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatusForJob2RSAsync(ByVal Job As String, ByVal JobType As String, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.StatusForJob2RSOperationCompleted Is Nothing) Then
                Me.StatusForJob2RSOperationCompleted = AddressOf Me.OnStatusForJob2RSOperationCompleted
            End If
            Me.InvokeAsync("StatusForJob2RS", New Object() {Job, JobType, CustomerNumber}, Me.StatusForJob2RSOperationCompleted, userState)
        End Sub
        
        Private Sub OnStatusForJob2RSOperationCompleted(ByVal arg As Object)
            If (Not (Me.StatusForJob2RSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatusForJob2RSCompleted(Me, New StatusForJob2RSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StatusExRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StatusExRS(ByVal CustomerNumber As Integer) As JobDataEx
            Dim results() As Object = Me.Invoke("StatusExRS", New Object() {CustomerNumber})
            Return CType(results(0),JobDataEx)
        End Function
        
        '''<remarks/>
        Public Function BeginStatusExRS(ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("StatusExRS", New Object() {CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndStatusExRS(ByVal asyncResult As System.IAsyncResult) As JobDataEx
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),JobDataEx)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatusExRSAsync(ByVal CustomerNumber As Integer)
            Me.StatusExRSAsync(CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatusExRSAsync(ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.StatusExRSOperationCompleted Is Nothing) Then
                Me.StatusExRSOperationCompleted = AddressOf Me.OnStatusExRSOperationCompleted
            End If
            Me.InvokeAsync("StatusExRS", New Object() {CustomerNumber}, Me.StatusExRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnStatusExRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.StatusExRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatusExRSCompleted(Me, New StatusExRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StatusEx2", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StatusEx2() As JobStats()
            Dim results() As Object = Me.Invoke("StatusEx2", New Object(-1) {})
            Return CType(results(0),JobStats())
        End Function
        
        '''<remarks/>
        Public Function BeginStatusEx2(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("StatusEx2", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndStatusEx2(ByVal asyncResult As System.IAsyncResult) As JobStats()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),JobStats())
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatusEx2Async()
            Me.StatusEx2Async(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatusEx2Async(ByVal userState As Object)
            If (Me.StatusEx2OperationCompleted Is Nothing) Then
                Me.StatusEx2OperationCompleted = AddressOf Me.OnStatusEx2OperationCompleted
            End If
            Me.InvokeAsync("StatusEx2", New Object(-1) {}, Me.StatusEx2OperationCompleted, userState)
        End Sub
        
        Private Sub OnStatusEx2OperationCompleted(ByVal arg As Object)
            If (Not (Me.StatusEx2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatusEx2Completed(Me, New StatusEx2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StatusEx2RS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StatusEx2RS(ByVal CustomerNumber As Integer) As JobStats()
            Dim results() As Object = Me.Invoke("StatusEx2RS", New Object() {CustomerNumber})
            Return CType(results(0),JobStats())
        End Function
        
        '''<remarks/>
        Public Function BeginStatusEx2RS(ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("StatusEx2RS", New Object() {CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndStatusEx2RS(ByVal asyncResult As System.IAsyncResult) As JobStats()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),JobStats())
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatusEx2RSAsync(ByVal CustomerNumber As Integer)
            Me.StatusEx2RSAsync(CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatusEx2RSAsync(ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.StatusEx2RSOperationCompleted Is Nothing) Then
                Me.StatusEx2RSOperationCompleted = AddressOf Me.OnStatusEx2RSOperationCompleted
            End If
            Me.InvokeAsync("StatusEx2RS", New Object() {CustomerNumber}, Me.StatusEx2RSOperationCompleted, userState)
        End Sub
        
        Private Sub OnStatusEx2RSOperationCompleted(ByVal arg As Object)
            If (Not (Me.StatusEx2RSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatusEx2RSCompleted(Me, New StatusEx2RSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StartBroadcastRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StartBroadcastRS(ByVal b As Broadcast, ByVal CustomerNumber As Integer) As BroadcastReturn
            Dim results() As Object = Me.Invoke("StartBroadcastRS", New Object() {b, CustomerNumber})
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Function BeginStartBroadcastRS(ByVal b As Broadcast, ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("StartBroadcastRS", New Object() {b, CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndStartBroadcastRS(ByVal asyncResult As System.IAsyncResult) As BroadcastReturn
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StartBroadcastRSAsync(ByVal b As Broadcast, ByVal CustomerNumber As Integer)
            Me.StartBroadcastRSAsync(b, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StartBroadcastRSAsync(ByVal b As Broadcast, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.StartBroadcastRSOperationCompleted Is Nothing) Then
                Me.StartBroadcastRSOperationCompleted = AddressOf Me.OnStartBroadcastRSOperationCompleted
            End If
            Me.InvokeAsync("StartBroadcastRS", New Object() {b, CustomerNumber}, Me.StartBroadcastRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnStartBroadcastRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.StartBroadcastRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StartBroadcastRSCompleted(Me, New StartBroadcastRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StartHtmlMerge", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StartHtmlMerge(ByVal b As Broadcast) As BroadcastReturn
            Dim results() As Object = Me.Invoke("StartHtmlMerge", New Object() {b})
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Function BeginStartHtmlMerge(ByVal b As Broadcast, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("StartHtmlMerge", New Object() {b}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndStartHtmlMerge(ByVal asyncResult As System.IAsyncResult) As BroadcastReturn
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StartHtmlMergeAsync(ByVal b As Broadcast)
            Me.StartHtmlMergeAsync(b, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StartHtmlMergeAsync(ByVal b As Broadcast, ByVal userState As Object)
            If (Me.StartHtmlMergeOperationCompleted Is Nothing) Then
                Me.StartHtmlMergeOperationCompleted = AddressOf Me.OnStartHtmlMergeOperationCompleted
            End If
            Me.InvokeAsync("StartHtmlMerge", New Object() {b}, Me.StartHtmlMergeOperationCompleted, userState)
        End Sub
        
        Private Sub OnStartHtmlMergeOperationCompleted(ByVal arg As Object)
            If (Not (Me.StartHtmlMergeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StartHtmlMergeCompleted(Me, New StartHtmlMergeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StartHtmlMergeRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StartHtmlMergeRS(ByVal b As Broadcast, ByVal CustomerNumber As Integer) As BroadcastReturn
            Dim results() As Object = Me.Invoke("StartHtmlMergeRS", New Object() {b, CustomerNumber})
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Function BeginStartHtmlMergeRS(ByVal b As Broadcast, ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("StartHtmlMergeRS", New Object() {b, CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndStartHtmlMergeRS(ByVal asyncResult As System.IAsyncResult) As BroadcastReturn
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StartHtmlMergeRSAsync(ByVal b As Broadcast, ByVal CustomerNumber As Integer)
            Me.StartHtmlMergeRSAsync(b, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StartHtmlMergeRSAsync(ByVal b As Broadcast, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.StartHtmlMergeRSOperationCompleted Is Nothing) Then
                Me.StartHtmlMergeRSOperationCompleted = AddressOf Me.OnStartHtmlMergeRSOperationCompleted
            End If
            Me.InvokeAsync("StartHtmlMergeRS", New Object() {b, CustomerNumber}, Me.StartHtmlMergeRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnStartHtmlMergeRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.StartHtmlMergeRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StartHtmlMergeRSCompleted(Me, New StartHtmlMergeRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/StartPreviewRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StartPreviewRS(ByVal b As Broadcast, ByVal CustomerNumber As Integer) As BroadcastReturn
            Dim results() As Object = Me.Invoke("StartPreviewRS", New Object() {b, CustomerNumber})
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Function BeginStartPreviewRS(ByVal b As Broadcast, ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("StartPreviewRS", New Object() {b, CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndStartPreviewRS(ByVal asyncResult As System.IAsyncResult) As BroadcastReturn
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StartPreviewRSAsync(ByVal b As Broadcast, ByVal CustomerNumber As Integer)
            Me.StartPreviewRSAsync(b, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StartPreviewRSAsync(ByVal b As Broadcast, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.StartPreviewRSOperationCompleted Is Nothing) Then
                Me.StartPreviewRSOperationCompleted = AddressOf Me.OnStartPreviewRSOperationCompleted
            End If
            Me.InvokeAsync("StartPreviewRS", New Object() {b, CustomerNumber}, Me.StartPreviewRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnStartPreviewRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.StartPreviewRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StartPreviewRSCompleted(Me, New StartPreviewRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/SubmitFile", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SubmitFile(ByVal f As SubmitFileInfo) As BroadcastReturn
            Dim results() As Object = Me.Invoke("SubmitFile", New Object() {f})
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Function BeginSubmitFile(ByVal f As SubmitFileInfo, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SubmitFile", New Object() {f}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSubmitFile(ByVal asyncResult As System.IAsyncResult) As BroadcastReturn
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SubmitFileAsync(ByVal f As SubmitFileInfo)
            Me.SubmitFileAsync(f, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SubmitFileAsync(ByVal f As SubmitFileInfo, ByVal userState As Object)
            If (Me.SubmitFileOperationCompleted Is Nothing) Then
                Me.SubmitFileOperationCompleted = AddressOf Me.OnSubmitFileOperationCompleted
            End If
            Me.InvokeAsync("SubmitFile", New Object() {f}, Me.SubmitFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnSubmitFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.SubmitFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SubmitFileCompleted(Me, New SubmitFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/SubmitFileRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SubmitFileRS(ByVal f As SubmitFileInfo, ByVal CustomerNumber As Integer) As BroadcastReturn
            Dim results() As Object = Me.Invoke("SubmitFileRS", New Object() {f, CustomerNumber})
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Function BeginSubmitFileRS(ByVal f As SubmitFileInfo, ByVal CustomerNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SubmitFileRS", New Object() {f, CustomerNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSubmitFileRS(ByVal asyncResult As System.IAsyncResult) As BroadcastReturn
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),BroadcastReturn)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SubmitFileRSAsync(ByVal f As SubmitFileInfo, ByVal CustomerNumber As Integer)
            Me.SubmitFileRSAsync(f, CustomerNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SubmitFileRSAsync(ByVal f As SubmitFileInfo, ByVal CustomerNumber As Integer, ByVal userState As Object)
            If (Me.SubmitFileRSOperationCompleted Is Nothing) Then
                Me.SubmitFileRSOperationCompleted = AddressOf Me.OnSubmitFileRSOperationCompleted
            End If
            Me.InvokeAsync("SubmitFileRS", New Object() {f, CustomerNumber}, Me.SubmitFileRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnSubmitFileRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.SubmitFileRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SubmitFileRSCompleted(Me, New SubmitFileRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetInboundFaxActivityRS", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInboundFaxActivityRS(ByVal CustomerNumber As Integer, ByVal fromDateTime As Date, ByVal toDateTime As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetInboundFaxActivityRS", New Object() {CustomerNumber, fromDateTime, toDateTime})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetInboundFaxActivityRS(ByVal CustomerNumber As Integer, ByVal fromDateTime As Date, ByVal toDateTime As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetInboundFaxActivityRS", New Object() {CustomerNumber, fromDateTime, toDateTime}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetInboundFaxActivityRS(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInboundFaxActivityRSAsync(ByVal CustomerNumber As Integer, ByVal fromDateTime As Date, ByVal toDateTime As Date)
            Me.GetInboundFaxActivityRSAsync(CustomerNumber, fromDateTime, toDateTime, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInboundFaxActivityRSAsync(ByVal CustomerNumber As Integer, ByVal fromDateTime As Date, ByVal toDateTime As Date, ByVal userState As Object)
            If (Me.GetInboundFaxActivityRSOperationCompleted Is Nothing) Then
                Me.GetInboundFaxActivityRSOperationCompleted = AddressOf Me.OnGetInboundFaxActivityRSOperationCompleted
            End If
            Me.InvokeAsync("GetInboundFaxActivityRS", New Object() {CustomerNumber, fromDateTime, toDateTime}, Me.GetInboundFaxActivityRSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInboundFaxActivityRSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInboundFaxActivityRSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInboundFaxActivityRSCompleted(Me, New GetInboundFaxActivityRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://odysseyservices.net/automatedui/GetInboundFaxActivity", RequestNamespace:="http://odysseyservices.net/automatedui/", ResponseNamespace:="http://odysseyservices.net/automatedui/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInboundFaxActivity(ByVal fromDateTime As Date, ByVal toDateTime As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetInboundFaxActivity", New Object() {fromDateTime, toDateTime})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetInboundFaxActivity(ByVal fromDateTime As Date, ByVal toDateTime As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetInboundFaxActivity", New Object() {fromDateTime, toDateTime}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetInboundFaxActivity(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInboundFaxActivityAsync(ByVal fromDateTime As Date, ByVal toDateTime As Date)
            Me.GetInboundFaxActivityAsync(fromDateTime, toDateTime, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInboundFaxActivityAsync(ByVal fromDateTime As Date, ByVal toDateTime As Date, ByVal userState As Object)
            If (Me.GetInboundFaxActivityOperationCompleted Is Nothing) Then
                Me.GetInboundFaxActivityOperationCompleted = AddressOf Me.OnGetInboundFaxActivityOperationCompleted
            End If
            Me.InvokeAsync("GetInboundFaxActivity", New Object() {fromDateTime, toDateTime}, Me.GetInboundFaxActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInboundFaxActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInboundFaxActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInboundFaxActivityCompleted(Me, New GetInboundFaxActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://odysseyservices.net/automatedui/")>  _
    Partial Public Class FileReference
        
        Private nameField As String
        
        Private contentsField() As Byte
        
        Private hostedField As Boolean
        
        Private mimeTypeField As String
        
        Private attachToEmailField As Boolean
        
        '''<remarks/>
        Public Property name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")>  _
        Public Property contents() As Byte()
            Get
                Return Me.contentsField
            End Get
            Set
                Me.contentsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property hosted() As Boolean
            Get
                Return Me.hostedField
            End Get
            Set
                Me.hostedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property mimeType() As String
            Get
                Return Me.mimeTypeField
            End Get
            Set
                Me.mimeTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property attachToEmail() As Boolean
            Get
                Return Me.attachToEmailField
            End Get
            Set
                Me.attachToEmailField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://odysseyservices.net/automatedui/")>  _
    Partial Public Class SubmitFileInfo
        
        Private jobTypeField As String
        
        Private filesField() As FileReference
        
        Private csidField As String
        
        Private emailFromField As String
        
        Private emailEnvelopeSenderField As String
        
        Private emailBodyField As FileReference
        
        Private emailAltBodyField As FileReference
        
        Private emailSubjectField As String
        
        Private trackingIDField As String
        
        Private scheduledStartTimeField As Date
        
        Private memoField As String
        
        Private faxModeField As Faxmode
        
        Private applicationNameField As String
        
        Private applicationArgsField() As String
        
        '''<remarks/>
        Public Property jobType() As String
            Get
                Return Me.jobTypeField
            End Get
            Set
                Me.jobTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property files() As FileReference()
            Get
                Return Me.filesField
            End Get
            Set
                Me.filesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property csid() As String
            Get
                Return Me.csidField
            End Get
            Set
                Me.csidField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property emailFrom() As String
            Get
                Return Me.emailFromField
            End Get
            Set
                Me.emailFromField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property emailEnvelopeSender() As String
            Get
                Return Me.emailEnvelopeSenderField
            End Get
            Set
                Me.emailEnvelopeSenderField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property emailBody() As FileReference
            Get
                Return Me.emailBodyField
            End Get
            Set
                Me.emailBodyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property emailAltBody() As FileReference
            Get
                Return Me.emailAltBodyField
            End Get
            Set
                Me.emailAltBodyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property emailSubject() As String
            Get
                Return Me.emailSubjectField
            End Get
            Set
                Me.emailSubjectField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property trackingID() As String
            Get
                Return Me.trackingIDField
            End Get
            Set
                Me.trackingIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property scheduledStartTime() As Date
            Get
                Return Me.scheduledStartTimeField
            End Get
            Set
                Me.scheduledStartTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property memo() As String
            Get
                Return Me.memoField
            End Get
            Set
                Me.memoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property faxMode() As Faxmode
            Get
                Return Me.faxModeField
            End Get
            Set
                Me.faxModeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property applicationName() As String
            Get
                Return Me.applicationNameField
            End Get
            Set
                Me.applicationNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property applicationArgs() As String()
            Get
                Return Me.applicationArgsField
            End Get
            Set
                Me.applicationArgsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://odysseyservices.net/automatedui/")>  _
    Public Enum Faxmode
        
        '''<remarks/>
        low
        
        '''<remarks/>
        high
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://odysseyservices.net/automatedui/")>  _
    Partial Public Class HostedFileCollection
        
        Private documentsField() As FileReference
        
        Private listsField() As FileReference
        
        '''<remarks/>
        Public Property documents() As FileReference()
            Get
                Return Me.documentsField
            End Get
            Set
                Me.documentsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property lists() As FileReference()
            Get
                Return Me.listsField
            End Get
            Set
                Me.listsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://odysseyservices.net/automatedui/")>  _
    Partial Public Class GroupMember
        
        Private customerNumberField As Integer
        
        Private companyNameField As String
        
        Private valueField As Integer
        
        '''<remarks/>
        Public Property CustomerNumber() As Integer
            Get
                Return Me.customerNumberField
            End Get
            Set
                Me.customerNumberField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CompanyName() As String
            Get
                Return Me.companyNameField
            End Get
            Set
                Me.companyNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Value() As Integer
            Get
                Return Me.valueField
            End Get
            Set
                Me.valueField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://odysseyservices.net/automatedui/")>  _
    Partial Public Class BroadcastReturn
        
        Private outcomeField As Integer
        
        Private messagesField() As String
        
        '''<remarks/>
        Public Property outcome() As Integer
            Get
                Return Me.outcomeField
            End Get
            Set
                Me.outcomeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property messages() As String()
            Get
                Return Me.messagesField
            End Get
            Set
                Me.messagesField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://odysseyservices.net/automatedui/")>  _
    Partial Public Class Recipient
        
        Private nameField As String
        
        Private addressField As String
        
        '''<remarks/>
        Public Property name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property address() As String
            Get
                Return Me.addressField
            End Get
            Set
                Me.addressField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://odysseyservices.net/automatedui/")>  _
    Partial Public Class Broadcast
        
        Private jobTypeField As String
        
        Private documentsField() As FileReference
        
        Private listsField() As FileReference
        
        Private csidField As String
        
        Private emailFromField As String
        
        Private emailEnvelopeSenderField As String
        
        Private emailBodyField As FileReference
        
        Private emailAltBodyField As FileReference
        
        Private emailSubjectField As String
        
        Private trackingIDField As String
        
        Private scheduledStartTimeField As Date
        
        Private adhocsField() As Recipient
        
        Private memoField As String
        
        Private faxModeField As Faxmode
        
        Private applicationNameField As String
        
        Private applicationArgsField() As String
        
        '''<remarks/>
        Public Property jobType() As String
            Get
                Return Me.jobTypeField
            End Get
            Set
                Me.jobTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property documents() As FileReference()
            Get
                Return Me.documentsField
            End Get
            Set
                Me.documentsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property lists() As FileReference()
            Get
                Return Me.listsField
            End Get
            Set
                Me.listsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property csid() As String
            Get
                Return Me.csidField
            End Get
            Set
                Me.csidField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property emailFrom() As String
            Get
                Return Me.emailFromField
            End Get
            Set
                Me.emailFromField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property emailEnvelopeSender() As String
            Get
                Return Me.emailEnvelopeSenderField
            End Get
            Set
                Me.emailEnvelopeSenderField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property emailBody() As FileReference
            Get
                Return Me.emailBodyField
            End Get
            Set
                Me.emailBodyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property emailAltBody() As FileReference
            Get
                Return Me.emailAltBodyField
            End Get
            Set
                Me.emailAltBodyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property emailSubject() As String
            Get
                Return Me.emailSubjectField
            End Get
            Set
                Me.emailSubjectField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property trackingID() As String
            Get
                Return Me.trackingIDField
            End Get
            Set
                Me.trackingIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property scheduledStartTime() As Date
            Get
                Return Me.scheduledStartTimeField
            End Get
            Set
                Me.scheduledStartTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property adhocs() As Recipient()
            Get
                Return Me.adhocsField
            End Get
            Set
                Me.adhocsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property memo() As String
            Get
                Return Me.memoField
            End Get
            Set
                Me.memoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property faxMode() As Faxmode
            Get
                Return Me.faxModeField
            End Get
            Set
                Me.faxModeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property applicationName() As String
            Get
                Return Me.applicationNameField
            End Get
            Set
                Me.applicationNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property applicationArgs() As String()
            Get
                Return Me.applicationArgsField
            End Get
            Set
                Me.applicationArgsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://odysseyservices.net/automatedui/")>  _
    Partial Public Class JobStats
        
        Private jobField As String
        
        Private dateField As String
        
        Private jobTypeField As String
        
        Private statusField As String
        
        Private totalField As Integer
        
        Private sentField As Integer
        
        Private failedField As Integer
        
        Private retriesField As Integer
        
        Private remainingField As Integer
        
        Private firstListField As String
        
        Private firstDocField As String
        
        '''<remarks/>
        Public Property Job() As String
            Get
                Return Me.jobField
            End Get
            Set
                Me.jobField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property [Date]() As String
            Get
                Return Me.dateField
            End Get
            Set
                Me.dateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property JobType() As String
            Get
                Return Me.jobTypeField
            End Get
            Set
                Me.jobTypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status() As String
            Get
                Return Me.statusField
            End Get
            Set
                Me.statusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Total() As Integer
            Get
                Return Me.totalField
            End Get
            Set
                Me.totalField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Sent() As Integer
            Get
                Return Me.sentField
            End Get
            Set
                Me.sentField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Failed() As Integer
            Get
                Return Me.failedField
            End Get
            Set
                Me.failedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Retries() As Integer
            Get
                Return Me.retriesField
            End Get
            Set
                Me.retriesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Remaining() As Integer
            Get
                Return Me.remainingField
            End Get
            Set
                Me.remainingField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FirstList() As String
            Get
                Return Me.firstListField
            End Get
            Set
                Me.firstListField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FirstDoc() As String
            Get
                Return Me.firstDocField
            End Get
            Set
                Me.firstDocField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://odysseyservices.net/automatedui/")>  _
    Partial Public Class DeliveryItem2
        
        Private jobField As Integer
        
        Private itemField As Integer
        
        Private dispositionField As String
        
        Private recipientField As String
        
        Private faxField As String
        
        Private emailField As String
        
        Private pagesField As Integer
        
        Private attemptsField As Integer
        
        Private firstDateTimeField As String
        
        Private finishDateTimeField As String
        
        Private faxBytesField As Integer
        
        Private emailBytesField As Integer
        
        Private baudRateField As Integer
        
        Private faxResCodeField As Integer
        
        Private answerBackField As String
        
        Private calltimeField As String
        
        Private outcomeField As String
        
        Private outcomesField As String
        
        Private uD1Field As String
        
        Private uD2Field As String
        
        Private uD3Field As String
        
        Private uD4Field As String
        
        Private uD5Field As String
        
        Private callAnalysisField As String
        
        Private tIDField As String
        
        '''<remarks/>
        Public Property Job() As Integer
            Get
                Return Me.jobField
            End Get
            Set
                Me.jobField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Item() As Integer
            Get
                Return Me.itemField
            End Get
            Set
                Me.itemField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Disposition() As String
            Get
                Return Me.dispositionField
            End Get
            Set
                Me.dispositionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Recipient() As String
            Get
                Return Me.recipientField
            End Get
            Set
                Me.recipientField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Fax() As String
            Get
                Return Me.faxField
            End Get
            Set
                Me.faxField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Email() As String
            Get
                Return Me.emailField
            End Get
            Set
                Me.emailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Pages() As Integer
            Get
                Return Me.pagesField
            End Get
            Set
                Me.pagesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Attempts() As Integer
            Get
                Return Me.attemptsField
            End Get
            Set
                Me.attemptsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FirstDateTime() As String
            Get
                Return Me.firstDateTimeField
            End Get
            Set
                Me.firstDateTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FinishDateTime() As String
            Get
                Return Me.finishDateTimeField
            End Get
            Set
                Me.finishDateTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FaxBytes() As Integer
            Get
                Return Me.faxBytesField
            End Get
            Set
                Me.faxBytesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EmailBytes() As Integer
            Get
                Return Me.emailBytesField
            End Get
            Set
                Me.emailBytesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property BaudRate() As Integer
            Get
                Return Me.baudRateField
            End Get
            Set
                Me.baudRateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FaxResCode() As Integer
            Get
                Return Me.faxResCodeField
            End Get
            Set
                Me.faxResCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AnswerBack() As String
            Get
                Return Me.answerBackField
            End Get
            Set
                Me.answerBackField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Calltime() As String
            Get
                Return Me.calltimeField
            End Get
            Set
                Me.calltimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Outcome() As String
            Get
                Return Me.outcomeField
            End Get
            Set
                Me.outcomeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Outcomes() As String
            Get
                Return Me.outcomesField
            End Get
            Set
                Me.outcomesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UD1() As String
            Get
                Return Me.uD1Field
            End Get
            Set
                Me.uD1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UD2() As String
            Get
                Return Me.uD2Field
            End Get
            Set
                Me.uD2Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UD3() As String
            Get
                Return Me.uD3Field
            End Get
            Set
                Me.uD3Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UD4() As String
            Get
                Return Me.uD4Field
            End Get
            Set
                Me.uD4Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UD5() As String
            Get
                Return Me.uD5Field
            End Get
            Set
                Me.uD5Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CallAnalysis() As String
            Get
                Return Me.callAnalysisField
            End Get
            Set
                Me.callAnalysisField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TID() As String
            Get
                Return Me.tIDField
            End Get
            Set
                Me.tIDField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.42"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://odysseyservices.net/automatedui/")>  _
    Partial Public Class DeliveryItem
        
        Private jobField As String
        
        Private itemField As String
        
        Private outcomeField As String
        
        Private recipientField As String
        
        Private faxField As String
        
        Private emailField As String
        
        Private pagesField As String
        
        Private attemptsField As String
        
        Private finishDateField As String
        
        Private finishTimeField As String
        
        Private faxBytesField As String
        
        Private emailBytesField As String
        
        Private answerBackField As String
        
        Private calltimeField As String
        
        Private uD1Field As String
        
        Private callAnalysisField As String
        
        '''<remarks/>
        Public Property Job() As String
            Get
                Return Me.jobField
            End Get
            Set
                Me.jobField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Item() As String
            Get
                Return Me.itemField
            End Get
            Set
                Me.itemField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Outcome() As String
            Get
                Return Me.outcomeField
            End Get
            Set
                Me.outcomeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Recipient() As String
            Get
                Return Me.recipientField
            End Get
            Set
                Me.recipientField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Fax() As String
            Get
                Return Me.faxField
            End Get
            Set
                Me.faxField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Email() As String
            Get
                Return Me.emailField
            End Get
            Set
                Me.emailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Pages() As String
            Get
                Return Me.pagesField
            End Get
            Set
                Me.pagesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Attempts() As String
            Get
                Return Me.attemptsField
            End Get
            Set
                Me.attemptsField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FinishDate() As String
            Get
                Return Me.finishDateField
            End Get
            Set
                Me.finishDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FinishTime() As String
            Get
                Return Me.finishTimeField
            End Get
            Set
                Me.finishTimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property FaxBytes() As String
            Get
                Return Me.faxBytesField
            End Get
            Set
                Me.faxBytesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property EmailBytes() As String
            Get
                Return Me.emailBytesField
            End Get
            Set
                Me.emailBytesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property AnswerBack() As String
            Get
                Return Me.answerBackField
            End Get
            Set
                Me.answerBackField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Calltime() As String
            Get
                Return Me.calltimeField
            End Get
            Set
                Me.calltimeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UD1() As String
            Get
                Return Me.uD1Field
            End Get
            Set
                Me.uD1Field = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CallAnalysis() As String
            Get
                Return Me.callAnalysisField
            End Get
            Set
                Me.callAnalysisField = value
            End Set
        End Property
    End Class
    
    'This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Serializable(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     System.Xml.Serialization.XmlRootAttribute("ItemDetail"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
    Partial Public Class ItemDetail
        Inherits System.Data.DataSet
        
        Private tableDeliveryDetail As DeliveryDetailDataTable
        
        Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, false)
            If (Me.IsBinarySerialized(info, context) = true) Then
                Me.InitVars(false)
                Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
            If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As System.Data.DataSet = New System.Data.DataSet
                ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("DeliveryDetail")) Is Nothing) Then
                    MyBase.Tables.Add(New DeliveryDetailDataTable(ds.Tables("DeliveryDetail")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property DeliveryDetail() As DeliveryDetailDataTable
            Get
                Return Me.tableDeliveryDetail
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.BrowsableAttribute(true),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
        Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataSet
            Dim cln As ItemDetail = CType(MyBase.Clone,ItemDetail)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As System.Data.DataSet = New System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("DeliveryDetail")) Is Nothing) Then
                    MyBase.Tables.Add(New DeliveryDetailDataTable(ds.Tables("DeliveryDetail")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
            Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
            Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableDeliveryDetail = CType(MyBase.Tables("DeliveryDetail"),DeliveryDetailDataTable)
            If (initTable = true) Then
                If (Not (Me.tableDeliveryDetail) Is Nothing) Then
                    Me.tableDeliveryDetail.InitVars
                End If
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.DataSetName = "ItemDetail"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/ItemDetail.xsd"
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableDeliveryDetail = New DeliveryDetailDataTable
            MyBase.Tables.Add(Me.tableDeliveryDetail)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeDeliveryDetail() As Boolean
            Return false
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim ds As ItemDetail = New ItemDetail
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            xs.Add(ds.GetSchemaSerializable)
            Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Return type
        End Function
        
        Public Delegate Sub DeliveryDetailRowChangeEventHandler(ByVal sender As Object, ByVal e As DeliveryDetailRowChangeEvent)
        
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
         System.Serializable(),  _
         System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class DeliveryDetailDataTable
            Inherits System.Data.DataTable
            Implements System.Collections.IEnumerable
            
            Private column_Item As System.Data.DataColumn
            
            Private columnOutCome As System.Data.DataColumn
            
            Private columnRecipient As System.Data.DataColumn
            
            Private columnFax As System.Data.DataColumn
            
            Private columnEmail As System.Data.DataColumn
            
            Private columnPages As System.Data.DataColumn
            
            Private columnAttempts As System.Data.DataColumn
            
            Private columnFinishDate As System.Data.DataColumn
            
            Private columnFinishTime As System.Data.DataColumn
            
            Private columnFaxBytes As System.Data.DataColumn
            
            Private columnEmailBytes As System.Data.DataColumn
            
            Private columnAnswerBack As System.Data.DataColumn
            
            Private columnCallTime As System.Data.DataColumn
            
            Private columnUD1 As System.Data.DataColumn
            
            Private columnCallAnalysis As System.Data.DataColumn
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "DeliveryDetail"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property _ItemColumn() As System.Data.DataColumn
                Get
                    Return Me.column_Item
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property OutComeColumn() As System.Data.DataColumn
                Get
                    Return Me.columnOutCome
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property RecipientColumn() As System.Data.DataColumn
                Get
                    Return Me.columnRecipient
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property FaxColumn() As System.Data.DataColumn
                Get
                    Return Me.columnFax
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property EmailColumn() As System.Data.DataColumn
                Get
                    Return Me.columnEmail
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property PagesColumn() As System.Data.DataColumn
                Get
                    Return Me.columnPages
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property AttemptsColumn() As System.Data.DataColumn
                Get
                    Return Me.columnAttempts
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property FinishDateColumn() As System.Data.DataColumn
                Get
                    Return Me.columnFinishDate
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property FinishTimeColumn() As System.Data.DataColumn
                Get
                    Return Me.columnFinishTime
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property FaxBytesColumn() As System.Data.DataColumn
                Get
                    Return Me.columnFaxBytes
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property EmailBytesColumn() As System.Data.DataColumn
                Get
                    Return Me.columnEmailBytes
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property AnswerBackColumn() As System.Data.DataColumn
                Get
                    Return Me.columnAnswerBack
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CallTimeColumn() As System.Data.DataColumn
                Get
                    Return Me.columnCallTime
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property UD1Column() As System.Data.DataColumn
                Get
                    Return Me.columnUD1
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CallAnalysisColumn() As System.Data.DataColumn
                Get
                    Return Me.columnCallAnalysis
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As DeliveryDetailRow
                Get
                    Return CType(Me.Rows(index),DeliveryDetailRow)
                End Get
            End Property
            
            Public Event DeliveryDetailRowChanging As DeliveryDetailRowChangeEventHandler
            
            Public Event DeliveryDetailRowChanged As DeliveryDetailRowChangeEventHandler
            
            Public Event DeliveryDetailRowDeleting As DeliveryDetailRowChangeEventHandler
            
            Public Event DeliveryDetailRowDeleted As DeliveryDetailRowChangeEventHandler
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddDeliveryDetailRow(ByVal row As DeliveryDetailRow)
                Me.Rows.Add(row)
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddDeliveryDetailRow(ByVal _Item As String, ByVal OutCome As String, ByVal Recipient As String, ByVal Fax As String, ByVal Email As String, ByVal Pages As String, ByVal Attempts As String, ByVal FinishDate As String, ByVal FinishTime As String, ByVal FaxBytes As String, ByVal EmailBytes As String, ByVal AnswerBack As String, ByVal CallTime As String, ByVal UD1 As String, ByVal CallAnalysis As String) As DeliveryDetailRow
                Dim rowDeliveryDetailRow As DeliveryDetailRow = CType(Me.NewRow,DeliveryDetailRow)
                rowDeliveryDetailRow.ItemArray = New Object() {_Item, OutCome, Recipient, Fax, Email, Pages, Attempts, FinishDate, FinishTime, FaxBytes, EmailBytes, AnswerBack, CallTime, UD1, CallAnalysis}
                Me.Rows.Add(rowDeliveryDetailRow)
                Return rowDeliveryDetailRow
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As System.Data.DataTable
                Dim cln As DeliveryDetailDataTable = CType(MyBase.Clone,DeliveryDetailDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As System.Data.DataTable
                Return New DeliveryDetailDataTable
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.column_Item = MyBase.Columns("Item")
                Me.columnOutCome = MyBase.Columns("OutCome")
                Me.columnRecipient = MyBase.Columns("Recipient")
                Me.columnFax = MyBase.Columns("Fax")
                Me.columnEmail = MyBase.Columns("Email")
                Me.columnPages = MyBase.Columns("Pages")
                Me.columnAttempts = MyBase.Columns("Attempts")
                Me.columnFinishDate = MyBase.Columns("FinishDate")
                Me.columnFinishTime = MyBase.Columns("FinishTime")
                Me.columnFaxBytes = MyBase.Columns("FaxBytes")
                Me.columnEmailBytes = MyBase.Columns("EmailBytes")
                Me.columnAnswerBack = MyBase.Columns("AnswerBack")
                Me.columnCallTime = MyBase.Columns("CallTime")
                Me.columnUD1 = MyBase.Columns("UD1")
                Me.columnCallAnalysis = MyBase.Columns("CallAnalysis")
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.column_Item = New System.Data.DataColumn("Item", GetType(String), Nothing, System.Data.MappingType.Element)
                Me.column_Item.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_Item")
                Me.column_Item.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_ItemColumn")
                Me.column_Item.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_Item")
                Me.column_Item.ExtendedProperties.Add("Generator_UserColumnName", "Item")
                MyBase.Columns.Add(Me.column_Item)
                Me.columnOutCome = New System.Data.DataColumn("OutCome", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnOutCome)
                Me.columnRecipient = New System.Data.DataColumn("Recipient", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRecipient)
                Me.columnFax = New System.Data.DataColumn("Fax", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFax)
                Me.columnEmail = New System.Data.DataColumn("Email", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEmail)
                Me.columnPages = New System.Data.DataColumn("Pages", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPages)
                Me.columnAttempts = New System.Data.DataColumn("Attempts", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAttempts)
                Me.columnFinishDate = New System.Data.DataColumn("FinishDate", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFinishDate)
                Me.columnFinishTime = New System.Data.DataColumn("FinishTime", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFinishTime)
                Me.columnFaxBytes = New System.Data.DataColumn("FaxBytes", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFaxBytes)
                Me.columnEmailBytes = New System.Data.DataColumn("EmailBytes", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEmailBytes)
                Me.columnAnswerBack = New System.Data.DataColumn("AnswerBack", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAnswerBack)
                Me.columnCallTime = New System.Data.DataColumn("CallTime", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCallTime)
                Me.columnUD1 = New System.Data.DataColumn("UD1", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUD1)
                Me.columnCallAnalysis = New System.Data.DataColumn("CallAnalysis", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCallAnalysis)
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewDeliveryDetailRow() As DeliveryDetailRow
                Return CType(Me.NewRow,DeliveryDetailRow)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
                Return New DeliveryDetailRow(builder)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(DeliveryDetailRow)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.DeliveryDetailRowChangedEvent) Is Nothing) Then
                    RaiseEvent DeliveryDetailRowChanged(Me, New DeliveryDetailRowChangeEvent(CType(e.Row,DeliveryDetailRow), e.Action))
                End If
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.DeliveryDetailRowChangingEvent) Is Nothing) Then
                    RaiseEvent DeliveryDetailRowChanging(Me, New DeliveryDetailRowChangeEvent(CType(e.Row,DeliveryDetailRow), e.Action))
                End If
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.DeliveryDetailRowDeletedEvent) Is Nothing) Then
                    RaiseEvent DeliveryDetailRowDeleted(Me, New DeliveryDetailRowChangeEvent(CType(e.Row,DeliveryDetailRow), e.Action))
                End If
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.DeliveryDetailRowDeletingEvent) Is Nothing) Then
                    RaiseEvent DeliveryDetailRowDeleting(Me, New DeliveryDetailRowChangeEvent(CType(e.Row,DeliveryDetailRow), e.Action))
                End If
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveDeliveryDetailRow(ByVal row As DeliveryDetailRow)
                Me.Rows.Remove(row)
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
                Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
                Dim ds As ItemDetail = New ItemDetail
                xs.Add(ds.GetSchemaSerializable)
                Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "DeliveryDetailDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Return type
            End Function
        End Class
        
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Partial Public Class DeliveryDetailRow
            Inherits System.Data.DataRow
            
            Private tableDeliveryDetail As DeliveryDetailDataTable
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableDeliveryDetail = CType(Me.Table,DeliveryDetailDataTable)
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property _Item() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail._ItemColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Item' in table 'DeliveryDetail' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail._ItemColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property OutCome() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail.OutComeColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'OutCome' in table 'DeliveryDetail' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail.OutComeColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Recipient() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail.RecipientColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Recipient' in table 'DeliveryDetail' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail.RecipientColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Fax() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail.FaxColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Fax' in table 'DeliveryDetail' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail.FaxColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Email() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail.EmailColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Email' in table 'DeliveryDetail' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail.EmailColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Pages() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail.PagesColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Pages' in table 'DeliveryDetail' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail.PagesColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Attempts() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail.AttemptsColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Attempts' in table 'DeliveryDetail' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail.AttemptsColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property FinishDate() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail.FinishDateColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'FinishDate' in table 'DeliveryDetail' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail.FinishDateColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property FinishTime() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail.FinishTimeColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'FinishTime' in table 'DeliveryDetail' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail.FinishTimeColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property FaxBytes() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail.FaxBytesColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'FaxBytes' in table 'DeliveryDetail' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail.FaxBytesColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property EmailBytes() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail.EmailBytesColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'EmailBytes' in table 'DeliveryDetail' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail.EmailBytesColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property AnswerBack() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail.AnswerBackColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'AnswerBack' in table 'DeliveryDetail' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail.AnswerBackColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CallTime() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail.CallTimeColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'CallTime' in table 'DeliveryDetail' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail.CallTimeColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property UD1() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail.UD1Column),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'UD1' in table 'DeliveryDetail' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail.UD1Column) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CallAnalysis() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail.CallAnalysisColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'CallAnalysis' in table 'DeliveryDetail' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail.CallAnalysisColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Is_ItemNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail._ItemColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub Set_ItemNull()
                Me(Me.tableDeliveryDetail._ItemColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsOutComeNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail.OutComeColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetOutComeNull()
                Me(Me.tableDeliveryDetail.OutComeColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsRecipientNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail.RecipientColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetRecipientNull()
                Me(Me.tableDeliveryDetail.RecipientColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsFaxNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail.FaxColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetFaxNull()
                Me(Me.tableDeliveryDetail.FaxColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsEmailNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail.EmailColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetEmailNull()
                Me(Me.tableDeliveryDetail.EmailColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsPagesNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail.PagesColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetPagesNull()
                Me(Me.tableDeliveryDetail.PagesColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsAttemptsNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail.AttemptsColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetAttemptsNull()
                Me(Me.tableDeliveryDetail.AttemptsColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsFinishDateNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail.FinishDateColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetFinishDateNull()
                Me(Me.tableDeliveryDetail.FinishDateColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsFinishTimeNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail.FinishTimeColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetFinishTimeNull()
                Me(Me.tableDeliveryDetail.FinishTimeColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsFaxBytesNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail.FaxBytesColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetFaxBytesNull()
                Me(Me.tableDeliveryDetail.FaxBytesColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsEmailBytesNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail.EmailBytesColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetEmailBytesNull()
                Me(Me.tableDeliveryDetail.EmailBytesColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsAnswerBackNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail.AnswerBackColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetAnswerBackNull()
                Me(Me.tableDeliveryDetail.AnswerBackColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCallTimeNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail.CallTimeColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCallTimeNull()
                Me(Me.tableDeliveryDetail.CallTimeColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsUD1Null() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail.UD1Column)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetUD1Null()
                Me(Me.tableDeliveryDetail.UD1Column) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCallAnalysisNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail.CallAnalysisColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCallAnalysisNull()
                Me(Me.tableDeliveryDetail.CallAnalysisColumn) = System.Convert.DBNull
            End Sub
        End Class
        
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Class DeliveryDetailRowChangeEvent
            Inherits System.EventArgs
            
            Private eventRow As DeliveryDetailRow
            
            Private eventAction As System.Data.DataRowAction
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As DeliveryDetailRow, ByVal action As System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As DeliveryDetailRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    'This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Serializable(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     System.Xml.Serialization.XmlRootAttribute("ItemDetail2"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
    Partial Public Class ItemDetail2
        Inherits System.Data.DataSet
        
        Private tableDeliveryDetail2 As DeliveryDetail2DataTable
        
        Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, false)
            If (Me.IsBinarySerialized(info, context) = true) Then
                Me.InitVars(false)
                Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
            If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As System.Data.DataSet = New System.Data.DataSet
                ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("DeliveryDetail2")) Is Nothing) Then
                    MyBase.Tables.Add(New DeliveryDetail2DataTable(ds.Tables("DeliveryDetail2")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property DeliveryDetail2() As DeliveryDetail2DataTable
            Get
                Return Me.tableDeliveryDetail2
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.BrowsableAttribute(true),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
        Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataSet
            Dim cln As ItemDetail2 = CType(MyBase.Clone,ItemDetail2)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As System.Data.DataSet = New System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("DeliveryDetail2")) Is Nothing) Then
                    MyBase.Tables.Add(New DeliveryDetail2DataTable(ds.Tables("DeliveryDetail2")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
            Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
            Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableDeliveryDetail2 = CType(MyBase.Tables("DeliveryDetail2"),DeliveryDetail2DataTable)
            If (initTable = true) Then
                If (Not (Me.tableDeliveryDetail2) Is Nothing) Then
                    Me.tableDeliveryDetail2.InitVars
                End If
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.DataSetName = "ItemDetail2"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/ItemDetail2.xsd"
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableDeliveryDetail2 = New DeliveryDetail2DataTable
            MyBase.Tables.Add(Me.tableDeliveryDetail2)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeDeliveryDetail2() As Boolean
            Return false
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim ds As ItemDetail2 = New ItemDetail2
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            xs.Add(ds.GetSchemaSerializable)
            Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Return type
        End Function
        
        Public Delegate Sub DeliveryDetail2RowChangeEventHandler(ByVal sender As Object, ByVal e As DeliveryDetail2RowChangeEvent)
        
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
         System.Serializable(),  _
         System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class DeliveryDetail2DataTable
            Inherits System.Data.DataTable
            Implements System.Collections.IEnumerable
            
            Private columnJob As System.Data.DataColumn
            
            Private column_Item As System.Data.DataColumn
            
            Private columnDisposition As System.Data.DataColumn
            
            Private columnRecipient As System.Data.DataColumn
            
            Private columnFax As System.Data.DataColumn
            
            Private columnEmail As System.Data.DataColumn
            
            Private columnPages As System.Data.DataColumn
            
            Private columnAttempts As System.Data.DataColumn
            
            Private columnFirstDateTime As System.Data.DataColumn
            
            Private columnFinishDateTime As System.Data.DataColumn
            
            Private columnFaxBytes As System.Data.DataColumn
            
            Private columnEmailBytes As System.Data.DataColumn
            
            Private columnBaudRate As System.Data.DataColumn
            
            Private columnFaxResCode As System.Data.DataColumn
            
            Private columnAnswerBack As System.Data.DataColumn
            
            Private columnCallTime As System.Data.DataColumn
            
            Private columnOutcome As System.Data.DataColumn
            
            Private columnOutcomes As System.Data.DataColumn
            
            Private columnUD1 As System.Data.DataColumn
            
            Private columnUD2 As System.Data.DataColumn
            
            Private columnUD3 As System.Data.DataColumn
            
            Private columnUD4 As System.Data.DataColumn
            
            Private columnUD5 As System.Data.DataColumn
            
            Private columnCallAnalysis As System.Data.DataColumn
            
            Private columnTID As System.Data.DataColumn
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "DeliveryDetail2"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property JobColumn() As System.Data.DataColumn
                Get
                    Return Me.columnJob
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property _ItemColumn() As System.Data.DataColumn
                Get
                    Return Me.column_Item
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DispositionColumn() As System.Data.DataColumn
                Get
                    Return Me.columnDisposition
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property RecipientColumn() As System.Data.DataColumn
                Get
                    Return Me.columnRecipient
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property FaxColumn() As System.Data.DataColumn
                Get
                    Return Me.columnFax
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property EmailColumn() As System.Data.DataColumn
                Get
                    Return Me.columnEmail
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property PagesColumn() As System.Data.DataColumn
                Get
                    Return Me.columnPages
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property AttemptsColumn() As System.Data.DataColumn
                Get
                    Return Me.columnAttempts
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property FirstDateTimeColumn() As System.Data.DataColumn
                Get
                    Return Me.columnFirstDateTime
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property FinishDateTimeColumn() As System.Data.DataColumn
                Get
                    Return Me.columnFinishDateTime
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property FaxBytesColumn() As System.Data.DataColumn
                Get
                    Return Me.columnFaxBytes
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property EmailBytesColumn() As System.Data.DataColumn
                Get
                    Return Me.columnEmailBytes
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property BaudRateColumn() As System.Data.DataColumn
                Get
                    Return Me.columnBaudRate
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property FaxResCodeColumn() As System.Data.DataColumn
                Get
                    Return Me.columnFaxResCode
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property AnswerBackColumn() As System.Data.DataColumn
                Get
                    Return Me.columnAnswerBack
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CallTimeColumn() As System.Data.DataColumn
                Get
                    Return Me.columnCallTime
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property OutcomeColumn() As System.Data.DataColumn
                Get
                    Return Me.columnOutcome
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property OutcomesColumn() As System.Data.DataColumn
                Get
                    Return Me.columnOutcomes
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property UD1Column() As System.Data.DataColumn
                Get
                    Return Me.columnUD1
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property UD2Column() As System.Data.DataColumn
                Get
                    Return Me.columnUD2
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property UD3Column() As System.Data.DataColumn
                Get
                    Return Me.columnUD3
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property UD4Column() As System.Data.DataColumn
                Get
                    Return Me.columnUD4
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property UD5Column() As System.Data.DataColumn
                Get
                    Return Me.columnUD5
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CallAnalysisColumn() As System.Data.DataColumn
                Get
                    Return Me.columnCallAnalysis
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property TIDColumn() As System.Data.DataColumn
                Get
                    Return Me.columnTID
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As DeliveryDetail2Row
                Get
                    Return CType(Me.Rows(index),DeliveryDetail2Row)
                End Get
            End Property
            
            Public Event DeliveryDetail2RowChanging As DeliveryDetail2RowChangeEventHandler
            
            Public Event DeliveryDetail2RowChanged As DeliveryDetail2RowChangeEventHandler
            
            Public Event DeliveryDetail2RowDeleting As DeliveryDetail2RowChangeEventHandler
            
            Public Event DeliveryDetail2RowDeleted As DeliveryDetail2RowChangeEventHandler
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddDeliveryDetail2Row(ByVal row As DeliveryDetail2Row)
                Me.Rows.Add(row)
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddDeliveryDetail2Row( _
                        ByVal Job As Integer,  _
                        ByVal _Item As Integer,  _
                        ByVal Disposition As String,  _
                        ByVal Recipient As String,  _
                        ByVal Fax As String,  _
                        ByVal Email As String,  _
                        ByVal Pages As Integer,  _
                        ByVal Attempts As Integer,  _
                        ByVal FirstDateTime As Date,  _
                        ByVal FinishDateTime As Date,  _
                        ByVal FaxBytes As Integer,  _
                        ByVal EmailBytes As Integer,  _
                        ByVal BaudRate As Integer,  _
                        ByVal FaxResCode As Integer,  _
                        ByVal AnswerBack As String,  _
                        ByVal CallTime As String,  _
                        ByVal Outcome As String,  _
                        ByVal Outcomes As String,  _
                        ByVal UD1 As String,  _
                        ByVal UD2 As String,  _
                        ByVal UD3 As String,  _
                        ByVal UD4 As String,  _
                        ByVal UD5 As String,  _
                        ByVal CallAnalysis As String,  _
                        ByVal TID As String) As DeliveryDetail2Row
                Dim rowDeliveryDetail2Row As DeliveryDetail2Row = CType(Me.NewRow,DeliveryDetail2Row)
                rowDeliveryDetail2Row.ItemArray = New Object() {Job, _Item, Disposition, Recipient, Fax, Email, Pages, Attempts, FirstDateTime, FinishDateTime, FaxBytes, EmailBytes, BaudRate, FaxResCode, AnswerBack, CallTime, Outcome, Outcomes, UD1, UD2, UD3, UD4, UD5, CallAnalysis, TID}
                Me.Rows.Add(rowDeliveryDetail2Row)
                Return rowDeliveryDetail2Row
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As System.Data.DataTable
                Dim cln As DeliveryDetail2DataTable = CType(MyBase.Clone,DeliveryDetail2DataTable)
                cln.InitVars
                Return cln
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As System.Data.DataTable
                Return New DeliveryDetail2DataTable
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnJob = MyBase.Columns("Job")
                Me.column_Item = MyBase.Columns("Item")
                Me.columnDisposition = MyBase.Columns("Disposition")
                Me.columnRecipient = MyBase.Columns("Recipient")
                Me.columnFax = MyBase.Columns("Fax")
                Me.columnEmail = MyBase.Columns("Email")
                Me.columnPages = MyBase.Columns("Pages")
                Me.columnAttempts = MyBase.Columns("Attempts")
                Me.columnFirstDateTime = MyBase.Columns("FirstDateTime")
                Me.columnFinishDateTime = MyBase.Columns("FinishDateTime")
                Me.columnFaxBytes = MyBase.Columns("FaxBytes")
                Me.columnEmailBytes = MyBase.Columns("EmailBytes")
                Me.columnBaudRate = MyBase.Columns("BaudRate")
                Me.columnFaxResCode = MyBase.Columns("FaxResCode")
                Me.columnAnswerBack = MyBase.Columns("AnswerBack")
                Me.columnCallTime = MyBase.Columns("CallTime")
                Me.columnOutcome = MyBase.Columns("Outcome")
                Me.columnOutcomes = MyBase.Columns("Outcomes")
                Me.columnUD1 = MyBase.Columns("UD1")
                Me.columnUD2 = MyBase.Columns("UD2")
                Me.columnUD3 = MyBase.Columns("UD3")
                Me.columnUD4 = MyBase.Columns("UD4")
                Me.columnUD5 = MyBase.Columns("UD5")
                Me.columnCallAnalysis = MyBase.Columns("CallAnalysis")
                Me.columnTID = MyBase.Columns("TID")
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnJob = New System.Data.DataColumn("Job", GetType(Integer), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnJob)
                Me.column_Item = New System.Data.DataColumn("Item", GetType(Integer), Nothing, System.Data.MappingType.Element)
                Me.column_Item.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_Item")
                Me.column_Item.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_ItemColumn")
                Me.column_Item.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_Item")
                Me.column_Item.ExtendedProperties.Add("Generator_UserColumnName", "Item")
                MyBase.Columns.Add(Me.column_Item)
                Me.columnDisposition = New System.Data.DataColumn("Disposition", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDisposition)
                Me.columnRecipient = New System.Data.DataColumn("Recipient", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRecipient)
                Me.columnFax = New System.Data.DataColumn("Fax", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFax)
                Me.columnEmail = New System.Data.DataColumn("Email", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEmail)
                Me.columnPages = New System.Data.DataColumn("Pages", GetType(Integer), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPages)
                Me.columnAttempts = New System.Data.DataColumn("Attempts", GetType(Integer), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAttempts)
                Me.columnFirstDateTime = New System.Data.DataColumn("FirstDateTime", GetType(Date), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFirstDateTime)
                Me.columnFinishDateTime = New System.Data.DataColumn("FinishDateTime", GetType(Date), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFinishDateTime)
                Me.columnFaxBytes = New System.Data.DataColumn("FaxBytes", GetType(Integer), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFaxBytes)
                Me.columnEmailBytes = New System.Data.DataColumn("EmailBytes", GetType(Integer), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEmailBytes)
                Me.columnBaudRate = New System.Data.DataColumn("BaudRate", GetType(Integer), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnBaudRate)
                Me.columnFaxResCode = New System.Data.DataColumn("FaxResCode", GetType(Integer), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFaxResCode)
                Me.columnAnswerBack = New System.Data.DataColumn("AnswerBack", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAnswerBack)
                Me.columnCallTime = New System.Data.DataColumn("CallTime", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCallTime)
                Me.columnOutcome = New System.Data.DataColumn("Outcome", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnOutcome)
                Me.columnOutcomes = New System.Data.DataColumn("Outcomes", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnOutcomes)
                Me.columnUD1 = New System.Data.DataColumn("UD1", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUD1)
                Me.columnUD2 = New System.Data.DataColumn("UD2", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUD2)
                Me.columnUD3 = New System.Data.DataColumn("UD3", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUD3)
                Me.columnUD4 = New System.Data.DataColumn("UD4", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUD4)
                Me.columnUD5 = New System.Data.DataColumn("UD5", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUD5)
                Me.columnCallAnalysis = New System.Data.DataColumn("CallAnalysis", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCallAnalysis)
                Me.columnTID = New System.Data.DataColumn("TID", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTID)
                Me.columnFinishDateTime.Caption = "FinishDate"
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewDeliveryDetail2Row() As DeliveryDetail2Row
                Return CType(Me.NewRow,DeliveryDetail2Row)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
                Return New DeliveryDetail2Row(builder)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(DeliveryDetail2Row)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.DeliveryDetail2RowChangedEvent) Is Nothing) Then
                    RaiseEvent DeliveryDetail2RowChanged(Me, New DeliveryDetail2RowChangeEvent(CType(e.Row,DeliveryDetail2Row), e.Action))
                End If
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.DeliveryDetail2RowChangingEvent) Is Nothing) Then
                    RaiseEvent DeliveryDetail2RowChanging(Me, New DeliveryDetail2RowChangeEvent(CType(e.Row,DeliveryDetail2Row), e.Action))
                End If
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.DeliveryDetail2RowDeletedEvent) Is Nothing) Then
                    RaiseEvent DeliveryDetail2RowDeleted(Me, New DeliveryDetail2RowChangeEvent(CType(e.Row,DeliveryDetail2Row), e.Action))
                End If
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.DeliveryDetail2RowDeletingEvent) Is Nothing) Then
                    RaiseEvent DeliveryDetail2RowDeleting(Me, New DeliveryDetail2RowChangeEvent(CType(e.Row,DeliveryDetail2Row), e.Action))
                End If
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveDeliveryDetail2Row(ByVal row As DeliveryDetail2Row)
                Me.Rows.Remove(row)
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
                Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
                Dim ds As ItemDetail2 = New ItemDetail2
                xs.Add(ds.GetSchemaSerializable)
                Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "DeliveryDetail2DataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Return type
            End Function
        End Class
        
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Partial Public Class DeliveryDetail2Row
            Inherits System.Data.DataRow
            
            Private tableDeliveryDetail2 As DeliveryDetail2DataTable
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableDeliveryDetail2 = CType(Me.Table,DeliveryDetail2DataTable)
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Job() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.JobColumn),Integer)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Job' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.JobColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property _Item() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2._ItemColumn),Integer)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Item' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2._ItemColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Disposition() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.DispositionColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Disposition' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.DispositionColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Recipient() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.RecipientColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Recipient' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.RecipientColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Fax() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.FaxColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Fax' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.FaxColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Email() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.EmailColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Email' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.EmailColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Pages() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.PagesColumn),Integer)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Pages' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.PagesColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Attempts() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.AttemptsColumn),Integer)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Attempts' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.AttemptsColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property FirstDateTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.FirstDateTimeColumn),Date)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'FirstDateTime' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.FirstDateTimeColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property FinishDateTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.FinishDateTimeColumn),Date)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'FinishDateTime' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.FinishDateTimeColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property FaxBytes() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.FaxBytesColumn),Integer)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'FaxBytes' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.FaxBytesColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property EmailBytes() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.EmailBytesColumn),Integer)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'EmailBytes' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.EmailBytesColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property BaudRate() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.BaudRateColumn),Integer)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'BaudRate' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.BaudRateColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property FaxResCode() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.FaxResCodeColumn),Integer)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'FaxResCode' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.FaxResCodeColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property AnswerBack() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.AnswerBackColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'AnswerBack' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.AnswerBackColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CallTime() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.CallTimeColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'CallTime' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.CallTimeColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Outcome() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.OutcomeColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Outcome' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.OutcomeColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Outcomes() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.OutcomesColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Outcomes' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.OutcomesColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property UD1() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.UD1Column),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'UD1' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.UD1Column) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property UD2() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.UD2Column),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'UD2' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.UD2Column) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property UD3() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.UD3Column),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'UD3' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.UD3Column) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property UD4() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.UD4Column),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'UD4' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.UD4Column) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property UD5() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.UD5Column),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'UD5' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.UD5Column) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CallAnalysis() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.CallAnalysisColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'CallAnalysis' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.CallAnalysisColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property TID() As String
                Get
                    Try 
                        Return CType(Me(Me.tableDeliveryDetail2.TIDColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'TID' in table 'DeliveryDetail2' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableDeliveryDetail2.TIDColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsJobNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.JobColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetJobNull()
                Me(Me.tableDeliveryDetail2.JobColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Is_ItemNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2._ItemColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub Set_ItemNull()
                Me(Me.tableDeliveryDetail2._ItemColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsDispositionNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.DispositionColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetDispositionNull()
                Me(Me.tableDeliveryDetail2.DispositionColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsRecipientNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.RecipientColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetRecipientNull()
                Me(Me.tableDeliveryDetail2.RecipientColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsFaxNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.FaxColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetFaxNull()
                Me(Me.tableDeliveryDetail2.FaxColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsEmailNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.EmailColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetEmailNull()
                Me(Me.tableDeliveryDetail2.EmailColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsPagesNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.PagesColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetPagesNull()
                Me(Me.tableDeliveryDetail2.PagesColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsAttemptsNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.AttemptsColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetAttemptsNull()
                Me(Me.tableDeliveryDetail2.AttemptsColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsFirstDateTimeNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.FirstDateTimeColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetFirstDateTimeNull()
                Me(Me.tableDeliveryDetail2.FirstDateTimeColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsFinishDateTimeNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.FinishDateTimeColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetFinishDateTimeNull()
                Me(Me.tableDeliveryDetail2.FinishDateTimeColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsFaxBytesNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.FaxBytesColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetFaxBytesNull()
                Me(Me.tableDeliveryDetail2.FaxBytesColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsEmailBytesNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.EmailBytesColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetEmailBytesNull()
                Me(Me.tableDeliveryDetail2.EmailBytesColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsBaudRateNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.BaudRateColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetBaudRateNull()
                Me(Me.tableDeliveryDetail2.BaudRateColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsFaxResCodeNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.FaxResCodeColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetFaxResCodeNull()
                Me(Me.tableDeliveryDetail2.FaxResCodeColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsAnswerBackNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.AnswerBackColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetAnswerBackNull()
                Me(Me.tableDeliveryDetail2.AnswerBackColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCallTimeNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.CallTimeColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCallTimeNull()
                Me(Me.tableDeliveryDetail2.CallTimeColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsOutcomeNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.OutcomeColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetOutcomeNull()
                Me(Me.tableDeliveryDetail2.OutcomeColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsOutcomesNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.OutcomesColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetOutcomesNull()
                Me(Me.tableDeliveryDetail2.OutcomesColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsUD1Null() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.UD1Column)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetUD1Null()
                Me(Me.tableDeliveryDetail2.UD1Column) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsUD2Null() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.UD2Column)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetUD2Null()
                Me(Me.tableDeliveryDetail2.UD2Column) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsUD3Null() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.UD3Column)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetUD3Null()
                Me(Me.tableDeliveryDetail2.UD3Column) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsUD4Null() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.UD4Column)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetUD4Null()
                Me(Me.tableDeliveryDetail2.UD4Column) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsUD5Null() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.UD5Column)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetUD5Null()
                Me(Me.tableDeliveryDetail2.UD5Column) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCallAnalysisNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.CallAnalysisColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCallAnalysisNull()
                Me(Me.tableDeliveryDetail2.CallAnalysisColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsTIDNull() As Boolean
                Return Me.IsNull(Me.tableDeliveryDetail2.TIDColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetTIDNull()
                Me(Me.tableDeliveryDetail2.TIDColumn) = System.Convert.DBNull
            End Sub
        End Class
        
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Class DeliveryDetail2RowChangeEvent
            Inherits System.EventArgs
            
            Private eventRow As DeliveryDetail2Row
            
            Private eventAction As System.Data.DataRowAction
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As DeliveryDetail2Row, ByVal action As System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As DeliveryDetail2Row
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    'This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Serializable(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     System.Xml.Serialization.XmlRootAttribute("JobDataEx"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
    Partial Public Class JobDataEx
        Inherits System.Data.DataSet
        
        Private tableJobs As JobsDataTable
        
        Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, false)
            If (Me.IsBinarySerialized(info, context) = true) Then
                Me.InitVars(false)
                Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
            If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As System.Data.DataSet = New System.Data.DataSet
                ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("Jobs")) Is Nothing) Then
                    MyBase.Tables.Add(New JobsDataTable(ds.Tables("Jobs")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Jobs() As JobsDataTable
            Get
                Return Me.tableJobs
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.BrowsableAttribute(true),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
        Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataSet
            Dim cln As JobDataEx = CType(MyBase.Clone,JobDataEx)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As System.Data.DataSet = New System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("Jobs")) Is Nothing) Then
                    MyBase.Tables.Add(New JobsDataTable(ds.Tables("Jobs")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
            Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
            Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableJobs = CType(MyBase.Tables("Jobs"),JobsDataTable)
            If (initTable = true) Then
                If (Not (Me.tableJobs) Is Nothing) Then
                    Me.tableJobs.InitVars
                End If
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.DataSetName = "JobDataEx"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/JobDataEx.xsd"
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableJobs = New JobsDataTable
            MyBase.Tables.Add(Me.tableJobs)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeJobs() As Boolean
            Return false
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim ds As JobDataEx = New JobDataEx
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            xs.Add(ds.GetSchemaSerializable)
            Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Return type
        End Function
        
        Public Delegate Sub JobsRowChangeEventHandler(ByVal sender As Object, ByVal e As JobsRowChangeEvent)
        
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
         System.Serializable(),  _
         System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class JobsDataTable
            Inherits System.Data.DataTable
            Implements System.Collections.IEnumerable
            
            Private columnJob As System.Data.DataColumn
            
            Private column_Date As System.Data.DataColumn
            
            Private columnType As System.Data.DataColumn
            
            Private columnStatus As System.Data.DataColumn
            
            Private columnTotal As System.Data.DataColumn
            
            Private columnSent As System.Data.DataColumn
            
            Private columnFailed As System.Data.DataColumn
            
            Private columnRetries As System.Data.DataColumn
            
            Private columnRemaining As System.Data.DataColumn
            
            Private columnFirstList As System.Data.DataColumn
            
            Private columnFirstDoc As System.Data.DataColumn
            
            Private columnTrackingID As System.Data.DataColumn
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Jobs"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property JobColumn() As System.Data.DataColumn
                Get
                    Return Me.columnJob
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property _DateColumn() As System.Data.DataColumn
                Get
                    Return Me.column_Date
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property TypeColumn() As System.Data.DataColumn
                Get
                    Return Me.columnType
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property StatusColumn() As System.Data.DataColumn
                Get
                    Return Me.columnStatus
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property TotalColumn() As System.Data.DataColumn
                Get
                    Return Me.columnTotal
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property SentColumn() As System.Data.DataColumn
                Get
                    Return Me.columnSent
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property FailedColumn() As System.Data.DataColumn
                Get
                    Return Me.columnFailed
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property RetriesColumn() As System.Data.DataColumn
                Get
                    Return Me.columnRetries
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property RemainingColumn() As System.Data.DataColumn
                Get
                    Return Me.columnRemaining
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property FirstListColumn() As System.Data.DataColumn
                Get
                    Return Me.columnFirstList
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property FirstDocColumn() As System.Data.DataColumn
                Get
                    Return Me.columnFirstDoc
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property TrackingIDColumn() As System.Data.DataColumn
                Get
                    Return Me.columnTrackingID
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As JobsRow
                Get
                    Return CType(Me.Rows(index),JobsRow)
                End Get
            End Property
            
            Public Event JobsRowChanging As JobsRowChangeEventHandler
            
            Public Event JobsRowChanged As JobsRowChangeEventHandler
            
            Public Event JobsRowDeleting As JobsRowChangeEventHandler
            
            Public Event JobsRowDeleted As JobsRowChangeEventHandler
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddJobsRow(ByVal row As JobsRow)
                Me.Rows.Add(row)
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddJobsRow(ByVal Job As String, ByVal _Date As String, ByVal Type As String, ByVal Status As String, ByVal Total As Integer, ByVal Sent As Integer, ByVal Failed As Integer, ByVal Retries As Integer, ByVal Remaining As Integer, ByVal FirstList As String, ByVal FirstDoc As String, ByVal TrackingID As String) As JobsRow
                Dim rowJobsRow As JobsRow = CType(Me.NewRow,JobsRow)
                rowJobsRow.ItemArray = New Object() {Job, _Date, Type, Status, Total, Sent, Failed, Retries, Remaining, FirstList, FirstDoc, TrackingID}
                Me.Rows.Add(rowJobsRow)
                Return rowJobsRow
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As System.Data.DataTable
                Dim cln As JobsDataTable = CType(MyBase.Clone,JobsDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As System.Data.DataTable
                Return New JobsDataTable
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnJob = MyBase.Columns("Job")
                Me.column_Date = MyBase.Columns("Date")
                Me.columnType = MyBase.Columns("Type")
                Me.columnStatus = MyBase.Columns("Status")
                Me.columnTotal = MyBase.Columns("Total")
                Me.columnSent = MyBase.Columns("Sent")
                Me.columnFailed = MyBase.Columns("Failed")
                Me.columnRetries = MyBase.Columns("Retries")
                Me.columnRemaining = MyBase.Columns("Remaining")
                Me.columnFirstList = MyBase.Columns("FirstList")
                Me.columnFirstDoc = MyBase.Columns("FirstDoc")
                Me.columnTrackingID = MyBase.Columns("TrackingID")
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnJob = New System.Data.DataColumn("Job", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnJob)
                Me.column_Date = New System.Data.DataColumn("Date", GetType(String), Nothing, System.Data.MappingType.Element)
                Me.column_Date.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_Date")
                Me.column_Date.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_DateColumn")
                Me.column_Date.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_Date")
                Me.column_Date.ExtendedProperties.Add("Generator_UserColumnName", "Date")
                MyBase.Columns.Add(Me.column_Date)
                Me.columnType = New System.Data.DataColumn("Type", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnType)
                Me.columnStatus = New System.Data.DataColumn("Status", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnStatus)
                Me.columnTotal = New System.Data.DataColumn("Total", GetType(Integer), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTotal)
                Me.columnSent = New System.Data.DataColumn("Sent", GetType(Integer), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSent)
                Me.columnFailed = New System.Data.DataColumn("Failed", GetType(Integer), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFailed)
                Me.columnRetries = New System.Data.DataColumn("Retries", GetType(Integer), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRetries)
                Me.columnRemaining = New System.Data.DataColumn("Remaining", GetType(Integer), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRemaining)
                Me.columnFirstList = New System.Data.DataColumn("FirstList", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFirstList)
                Me.columnFirstDoc = New System.Data.DataColumn("FirstDoc", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFirstDoc)
                Me.columnTrackingID = New System.Data.DataColumn("TrackingID", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTrackingID)
                Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnJob}, false))
                Me.columnJob.Unique = true
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewJobsRow() As JobsRow
                Return CType(Me.NewRow,JobsRow)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
                Return New JobsRow(builder)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(JobsRow)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.JobsRowChangedEvent) Is Nothing) Then
                    RaiseEvent JobsRowChanged(Me, New JobsRowChangeEvent(CType(e.Row,JobsRow), e.Action))
                End If
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.JobsRowChangingEvent) Is Nothing) Then
                    RaiseEvent JobsRowChanging(Me, New JobsRowChangeEvent(CType(e.Row,JobsRow), e.Action))
                End If
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.JobsRowDeletedEvent) Is Nothing) Then
                    RaiseEvent JobsRowDeleted(Me, New JobsRowChangeEvent(CType(e.Row,JobsRow), e.Action))
                End If
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.JobsRowDeletingEvent) Is Nothing) Then
                    RaiseEvent JobsRowDeleting(Me, New JobsRowChangeEvent(CType(e.Row,JobsRow), e.Action))
                End If
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveJobsRow(ByVal row As JobsRow)
                Me.Rows.Remove(row)
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
                Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
                Dim ds As JobDataEx = New JobDataEx
                xs.Add(ds.GetSchemaSerializable)
                Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "JobsDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Return type
            End Function
        End Class
        
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Partial Public Class JobsRow
            Inherits System.Data.DataRow
            
            Private tableJobs As JobsDataTable
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableJobs = CType(Me.Table,JobsDataTable)
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Job() As String
                Get
                    Try 
                        Return CType(Me(Me.tableJobs.JobColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Job' in table 'Jobs' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJobs.JobColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property _Date() As String
                Get
                    Try 
                        Return CType(Me(Me.tableJobs._DateColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Date' in table 'Jobs' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJobs._DateColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Type() As String
                Get
                    Try 
                        Return CType(Me(Me.tableJobs.TypeColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Type' in table 'Jobs' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJobs.TypeColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Status() As String
                Get
                    Try 
                        Return CType(Me(Me.tableJobs.StatusColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Status' in table 'Jobs' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJobs.StatusColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Total() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableJobs.TotalColumn),Integer)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Total' in table 'Jobs' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJobs.TotalColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Sent() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableJobs.SentColumn),Integer)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Sent' in table 'Jobs' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJobs.SentColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Failed() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableJobs.FailedColumn),Integer)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Failed' in table 'Jobs' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJobs.FailedColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Retries() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableJobs.RetriesColumn),Integer)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Retries' in table 'Jobs' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJobs.RetriesColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Remaining() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableJobs.RemainingColumn),Integer)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Remaining' in table 'Jobs' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJobs.RemainingColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property FirstList() As String
                Get
                    Try 
                        Return CType(Me(Me.tableJobs.FirstListColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'FirstList' in table 'Jobs' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJobs.FirstListColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property FirstDoc() As String
                Get
                    Try 
                        Return CType(Me(Me.tableJobs.FirstDocColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'FirstDoc' in table 'Jobs' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJobs.FirstDocColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property TrackingID() As String
                Get
                    Try 
                        Return CType(Me(Me.tableJobs.TrackingIDColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'TrackingID' in table 'Jobs' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJobs.TrackingIDColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsJobNull() As Boolean
                Return Me.IsNull(Me.tableJobs.JobColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetJobNull()
                Me(Me.tableJobs.JobColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Is_DateNull() As Boolean
                Return Me.IsNull(Me.tableJobs._DateColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub Set_DateNull()
                Me(Me.tableJobs._DateColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsTypeNull() As Boolean
                Return Me.IsNull(Me.tableJobs.TypeColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetTypeNull()
                Me(Me.tableJobs.TypeColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsStatusNull() As Boolean
                Return Me.IsNull(Me.tableJobs.StatusColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetStatusNull()
                Me(Me.tableJobs.StatusColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsTotalNull() As Boolean
                Return Me.IsNull(Me.tableJobs.TotalColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetTotalNull()
                Me(Me.tableJobs.TotalColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsSentNull() As Boolean
                Return Me.IsNull(Me.tableJobs.SentColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetSentNull()
                Me(Me.tableJobs.SentColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsFailedNull() As Boolean
                Return Me.IsNull(Me.tableJobs.FailedColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetFailedNull()
                Me(Me.tableJobs.FailedColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsRetriesNull() As Boolean
                Return Me.IsNull(Me.tableJobs.RetriesColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetRetriesNull()
                Me(Me.tableJobs.RetriesColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsRemainingNull() As Boolean
                Return Me.IsNull(Me.tableJobs.RemainingColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetRemainingNull()
                Me(Me.tableJobs.RemainingColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsFirstListNull() As Boolean
                Return Me.IsNull(Me.tableJobs.FirstListColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetFirstListNull()
                Me(Me.tableJobs.FirstListColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsFirstDocNull() As Boolean
                Return Me.IsNull(Me.tableJobs.FirstDocColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetFirstDocNull()
                Me(Me.tableJobs.FirstDocColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsTrackingIDNull() As Boolean
                Return Me.IsNull(Me.tableJobs.TrackingIDColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetTrackingIDNull()
                Me(Me.tableJobs.TrackingIDColumn) = System.Convert.DBNull
            End Sub
        End Class
        
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Class JobsRowChangeEvent
            Inherits System.EventArgs
            
            Private eventRow As JobsRow
            
            Private eventAction As System.Data.DataRowAction
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As JobsRow, ByVal action As System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As JobsRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    'This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Serializable(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     System.Xml.Serialization.XmlRootAttribute("JobData"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
    Partial Public Class JobData
        Inherits System.Data.DataSet
        
        Private tableJobs As JobsDataTable
        
        Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, false)
            If (Me.IsBinarySerialized(info, context) = true) Then
                Me.InitVars(false)
                Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
            If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As System.Data.DataSet = New System.Data.DataSet
                ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("Jobs")) Is Nothing) Then
                    MyBase.Tables.Add(New JobsDataTable(ds.Tables("Jobs")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false),  _
         System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Jobs() As JobsDataTable
            Get
                Return Me.tableJobs
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.BrowsableAttribute(true),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
        Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataSet
            Dim cln As JobData = CType(MyBase.Clone,JobData)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As System.Data.DataSet = New System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("Jobs")) Is Nothing) Then
                    MyBase.Tables.Add(New JobsDataTable(ds.Tables("Jobs")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
            Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
            Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableJobs = CType(MyBase.Tables("Jobs"),JobsDataTable)
            If (initTable = true) Then
                If (Not (Me.tableJobs) Is Nothing) Then
                    Me.tableJobs.InitVars
                End If
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.DataSetName = "JobData"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/JobData.xsd"
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableJobs = New JobsDataTable
            MyBase.Tables.Add(Me.tableJobs)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeJobs() As Boolean
            Return false
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim ds As JobData = New JobData
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            xs.Add(ds.GetSchemaSerializable)
            Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Return type
        End Function
        
        Public Delegate Sub JobsRowChangeEventHandler(ByVal sender As Object, ByVal e As JobsRowChangeEvent)
        
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
         System.Serializable(),  _
         System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class JobsDataTable
            Inherits System.Data.DataTable
            Implements System.Collections.IEnumerable
            
            Private columnJob As System.Data.DataColumn
            
            Private column_Date As System.Data.DataColumn
            
            Private columnType As System.Data.DataColumn
            
            Private columnStatus As System.Data.DataColumn
            
            Private columnTotal As System.Data.DataColumn
            
            Private columnSent As System.Data.DataColumn
            
            Private columnFailed As System.Data.DataColumn
            
            Private columnRetries As System.Data.DataColumn
            
            Private columnRemaining As System.Data.DataColumn
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Jobs"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property JobColumn() As System.Data.DataColumn
                Get
                    Return Me.columnJob
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property _DateColumn() As System.Data.DataColumn
                Get
                    Return Me.column_Date
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property TypeColumn() As System.Data.DataColumn
                Get
                    Return Me.columnType
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property StatusColumn() As System.Data.DataColumn
                Get
                    Return Me.columnStatus
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property TotalColumn() As System.Data.DataColumn
                Get
                    Return Me.columnTotal
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property SentColumn() As System.Data.DataColumn
                Get
                    Return Me.columnSent
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property FailedColumn() As System.Data.DataColumn
                Get
                    Return Me.columnFailed
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property RetriesColumn() As System.Data.DataColumn
                Get
                    Return Me.columnRetries
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property RemainingColumn() As System.Data.DataColumn
                Get
                    Return Me.columnRemaining
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As JobsRow
                Get
                    Return CType(Me.Rows(index),JobsRow)
                End Get
            End Property
            
            Public Event JobsRowChanging As JobsRowChangeEventHandler
            
            Public Event JobsRowChanged As JobsRowChangeEventHandler
            
            Public Event JobsRowDeleting As JobsRowChangeEventHandler
            
            Public Event JobsRowDeleted As JobsRowChangeEventHandler
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddJobsRow(ByVal row As JobsRow)
                Me.Rows.Add(row)
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddJobsRow(ByVal Job As String, ByVal _Date As String, ByVal Type As String, ByVal Status As String, ByVal Total As Integer, ByVal Sent As Integer, ByVal Failed As Integer, ByVal Retries As Integer, ByVal Remaining As Integer) As JobsRow
                Dim rowJobsRow As JobsRow = CType(Me.NewRow,JobsRow)
                rowJobsRow.ItemArray = New Object() {Job, _Date, Type, Status, Total, Sent, Failed, Retries, Remaining}
                Me.Rows.Add(rowJobsRow)
                Return rowJobsRow
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As System.Data.DataTable
                Dim cln As JobsDataTable = CType(MyBase.Clone,JobsDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As System.Data.DataTable
                Return New JobsDataTable
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnJob = MyBase.Columns("Job")
                Me.column_Date = MyBase.Columns("Date")
                Me.columnType = MyBase.Columns("Type")
                Me.columnStatus = MyBase.Columns("Status")
                Me.columnTotal = MyBase.Columns("Total")
                Me.columnSent = MyBase.Columns("Sent")
                Me.columnFailed = MyBase.Columns("Failed")
                Me.columnRetries = MyBase.Columns("Retries")
                Me.columnRemaining = MyBase.Columns("Remaining")
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnJob = New System.Data.DataColumn("Job", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnJob)
                Me.column_Date = New System.Data.DataColumn("Date", GetType(String), Nothing, System.Data.MappingType.Element)
                Me.column_Date.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "_Date")
                Me.column_Date.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "_DateColumn")
                Me.column_Date.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "column_Date")
                Me.column_Date.ExtendedProperties.Add("Generator_UserColumnName", "Date")
                MyBase.Columns.Add(Me.column_Date)
                Me.columnType = New System.Data.DataColumn("Type", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnType)
                Me.columnStatus = New System.Data.DataColumn("Status", GetType(String), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnStatus)
                Me.columnTotal = New System.Data.DataColumn("Total", GetType(Integer), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTotal)
                Me.columnSent = New System.Data.DataColumn("Sent", GetType(Integer), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSent)
                Me.columnFailed = New System.Data.DataColumn("Failed", GetType(Integer), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFailed)
                Me.columnRetries = New System.Data.DataColumn("Retries", GetType(Integer), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRetries)
                Me.columnRemaining = New System.Data.DataColumn("Remaining", GetType(Integer), Nothing, System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRemaining)
                Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnJob}, false))
                Me.columnJob.Unique = true
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewJobsRow() As JobsRow
                Return CType(Me.NewRow,JobsRow)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
                Return New JobsRow(builder)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As System.Type
                Return GetType(JobsRow)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.JobsRowChangedEvent) Is Nothing) Then
                    RaiseEvent JobsRowChanged(Me, New JobsRowChangeEvent(CType(e.Row,JobsRow), e.Action))
                End If
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.JobsRowChangingEvent) Is Nothing) Then
                    RaiseEvent JobsRowChanging(Me, New JobsRowChangeEvent(CType(e.Row,JobsRow), e.Action))
                End If
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.JobsRowDeletedEvent) Is Nothing) Then
                    RaiseEvent JobsRowDeleted(Me, New JobsRowChangeEvent(CType(e.Row,JobsRow), e.Action))
                End If
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.JobsRowDeletingEvent) Is Nothing) Then
                    RaiseEvent JobsRowDeleting(Me, New JobsRowChangeEvent(CType(e.Row,JobsRow), e.Action))
                End If
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveJobsRow(ByVal row As JobsRow)
                Me.Rows.Remove(row)
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
                Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
                Dim ds As JobData = New JobData
                xs.Add(ds.GetSchemaSerializable)
                Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "JobsDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Return type
            End Function
        End Class
        
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Partial Public Class JobsRow
            Inherits System.Data.DataRow
            
            Private tableJobs As JobsDataTable
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableJobs = CType(Me.Table,JobsDataTable)
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Job() As String
                Get
                    Try 
                        Return CType(Me(Me.tableJobs.JobColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Job' in table 'Jobs' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJobs.JobColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property _Date() As String
                Get
                    Try 
                        Return CType(Me(Me.tableJobs._DateColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Date' in table 'Jobs' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJobs._DateColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Type() As String
                Get
                    Try 
                        Return CType(Me(Me.tableJobs.TypeColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Type' in table 'Jobs' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJobs.TypeColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Status() As String
                Get
                    Try 
                        Return CType(Me(Me.tableJobs.StatusColumn),String)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Status' in table 'Jobs' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJobs.StatusColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Total() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableJobs.TotalColumn),Integer)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Total' in table 'Jobs' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJobs.TotalColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Sent() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableJobs.SentColumn),Integer)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Sent' in table 'Jobs' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJobs.SentColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Failed() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableJobs.FailedColumn),Integer)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Failed' in table 'Jobs' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJobs.FailedColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Retries() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableJobs.RetriesColumn),Integer)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Retries' in table 'Jobs' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJobs.RetriesColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Remaining() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableJobs.RemainingColumn),Integer)
                    Catch e As System.InvalidCastException
                        Throw New System.Data.StrongTypingException("The value for column 'Remaining' in table 'Jobs' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJobs.RemainingColumn) = value
                End Set
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsJobNull() As Boolean
                Return Me.IsNull(Me.tableJobs.JobColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetJobNull()
                Me(Me.tableJobs.JobColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Is_DateNull() As Boolean
                Return Me.IsNull(Me.tableJobs._DateColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub Set_DateNull()
                Me(Me.tableJobs._DateColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsTypeNull() As Boolean
                Return Me.IsNull(Me.tableJobs.TypeColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetTypeNull()
                Me(Me.tableJobs.TypeColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsStatusNull() As Boolean
                Return Me.IsNull(Me.tableJobs.StatusColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetStatusNull()
                Me(Me.tableJobs.StatusColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsTotalNull() As Boolean
                Return Me.IsNull(Me.tableJobs.TotalColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetTotalNull()
                Me(Me.tableJobs.TotalColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsSentNull() As Boolean
                Return Me.IsNull(Me.tableJobs.SentColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetSentNull()
                Me(Me.tableJobs.SentColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsFailedNull() As Boolean
                Return Me.IsNull(Me.tableJobs.FailedColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetFailedNull()
                Me(Me.tableJobs.FailedColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsRetriesNull() As Boolean
                Return Me.IsNull(Me.tableJobs.RetriesColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetRetriesNull()
                Me(Me.tableJobs.RetriesColumn) = System.Convert.DBNull
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsRemainingNull() As Boolean
                Return Me.IsNull(Me.tableJobs.RemainingColumn)
            End Function
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetRemainingNull()
                Me(Me.tableJobs.RemainingColumn) = System.Convert.DBNull
            End Sub
        End Class
        
        <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Class JobsRowChangeEvent
            Inherits System.EventArgs
            
            Private eventRow As JobsRow
            
            Private eventAction As System.Data.DataRowAction
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As JobsRow, ByVal action As System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As JobsRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetReceivedFoldersRSCompletedEventHandler(ByVal sender As Object, ByVal e As GetReceivedFoldersRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReceivedFoldersRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetReceivedFoldersCompletedEventHandler(ByVal sender As Object, ByVal e As GetReceivedFoldersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReceivedFoldersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetReceivedFileNamesRSCompletedEventHandler(ByVal sender As Object, ByVal e As GetReceivedFileNamesRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReceivedFileNamesRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetReceivedFileNamesCompletedEventHandler(ByVal sender As Object, ByVal e As GetReceivedFileNamesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReceivedFileNamesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub DownLoadFilesFromReceivedFolderRSCompletedEventHandler(ByVal sender As Object, ByVal e As DownLoadFilesFromReceivedFolderRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownLoadFilesFromReceivedFolderRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As FileReference()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),FileReference())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub DownLoadFilesFromReceivedFolderCompletedEventHandler(ByVal sender As Object, ByVal e As DownLoadFilesFromReceivedFolderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownLoadFilesFromReceivedFolderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As FileReference()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),FileReference())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub DeleteFilesFromReceivedFolderRSCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteFilesFromReceivedFolderRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteFilesFromReceivedFolderRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub DeleteFilesFromReceivedFolderCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteFilesFromReceivedFolderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteFilesFromReceivedFolderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub getJobDetail3CompletedEventHandler(ByVal sender As Object, ByVal e As getJobDetail3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getJobDetail3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As DeliveryItem()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),DeliveryItem())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Tid() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Items() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub getJobDetail3RSCompletedEventHandler(ByVal sender As Object, ByVal e As getJobDetail3RSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getJobDetail3RSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As DeliveryItem()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),DeliveryItem())
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Tid() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Items() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub getJobDetailCompletedEventHandler(ByVal sender As Object, ByVal e As getJobDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getJobDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ItemDetail
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ItemDetail)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Tid() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Items() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub getJobDetailRSCompletedEventHandler(ByVal sender As Object, ByVal e As getJobDetailRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getJobDetailRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ItemDetail
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ItemDetail)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Tid() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Items() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub getJobDetail2CompletedEventHandler(ByVal sender As Object, ByVal e As getJobDetail2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getJobDetail2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ItemDetail
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ItemDetail)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Tid() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Items() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub getJobDetail2RSCompletedEventHandler(ByVal sender As Object, ByVal e As getJobDetail2RSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getJobDetail2RSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ItemDetail
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ItemDetail)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Tid() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Items() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub getItemDetailByDatesCompletedEventHandler(ByVal sender As Object, ByVal e As getItemDetailByDatesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getItemDetailByDatesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ItemDetail2
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ItemDetail2)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub getItemDetailByDatesRSCompletedEventHandler(ByVal sender As Object, ByVal e As getItemDetailByDatesRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getItemDetailByDatesRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ItemDetail2
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ItemDetail2)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub getItemDetailByDates2CompletedEventHandler(ByVal sender As Object, ByVal e As getItemDetailByDates2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getItemDetailByDates2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As DeliveryItem2()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),DeliveryItem2())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub getItemDetailByDates2RSCompletedEventHandler(ByVal sender As Object, ByVal e As getItemDetailByDates2RSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getItemDetailByDates2RSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As DeliveryItem2()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),DeliveryItem2())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetJobTypeDocsCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobTypeDocsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobTypeDocsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetJobTypeDocsRSCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobTypeDocsRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobTypeDocsRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetJobTypeListsCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobTypeListsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobTypeListsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetJobTypeListsRSCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobTypeListsRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobTypeListsRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetDefaultModeCompletedEventHandler(ByVal sender As Object, ByVal e As GetDefaultModeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDefaultModeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Faxmode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Faxmode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetDefaultModeRSCompletedEventHandler(ByVal sender As Object, ByVal e As GetDefaultModeRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDefaultModeRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Faxmode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Faxmode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetShouldSuppressFaxConversionCompletedEventHandler(ByVal sender As Object, ByVal e As GetShouldSuppressFaxConversionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetShouldSuppressFaxConversionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetShouldSuppressFaxConversionRSCompletedEventHandler(ByVal sender As Object, ByVal e As GetShouldSuppressFaxConversionRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetShouldSuppressFaxConversionRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub StatusExCompletedEventHandler(ByVal sender As Object, ByVal e As StatusExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StatusExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As JobDataEx
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),JobDataEx)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub StatusCompletedEventHandler(ByVal sender As Object, ByVal e As StatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As JobData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),JobData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub StatusForJobCompletedEventHandler(ByVal sender As Object, ByVal e As StatusForJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StatusForJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As JobDataEx
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),JobDataEx)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub StatusForJob2CompletedEventHandler(ByVal sender As Object, ByVal e As StatusForJob2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StatusForJob2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As JobStats
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),JobStats)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetJobTypesCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobTypesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobTypesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub StartBroadcastCompletedEventHandler(ByVal sender As Object, ByVal e As StartBroadcastCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StartBroadcastCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As BroadcastReturn
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),BroadcastReturn)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub StartPreviewCompletedEventHandler(ByVal sender As Object, ByVal e As StartPreviewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StartPreviewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As BroadcastReturn
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),BroadcastReturn)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetGroupCompletedEventHandler(ByVal sender As Object, ByVal e As GetGroupCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGroupCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As GroupMember()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),GroupMember())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub DownLoadFilesFromFoldersCompletedEventHandler(ByVal sender As Object, ByVal e As DownLoadFilesFromFoldersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownLoadFilesFromFoldersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As FileReference()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),FileReference())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetReportCompletedEventHandler(ByVal sender As Object, ByVal e As GetReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As FileReference
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),FileReference)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub DeleteFilesFromFoldersCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteFilesFromFoldersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteFilesFromFoldersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub UploadFilesToFoldersCompletedEventHandler(ByVal sender As Object, ByVal e As UploadFilesToFoldersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadFilesToFoldersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetDocumentsCompletedEventHandler(ByVal sender As Object, ByVal e As GetDocumentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDocumentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetListsCompletedEventHandler(ByVal sender As Object, ByVal e As GetListsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub CancelJobCompletedEventHandler(ByVal sender As Object, ByVal e As CancelJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub DownLoadFilesFromFoldersRSCompletedEventHandler(ByVal sender As Object, ByVal e As DownLoadFilesFromFoldersRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownLoadFilesFromFoldersRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As FileReference()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),FileReference())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetReportRSCompletedEventHandler(ByVal sender As Object, ByVal e As GetReportRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReportRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As FileReference
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),FileReference)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub DeleteFilesFromFoldersRSCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteFilesFromFoldersRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteFilesFromFoldersRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub UploadFilesToFoldersRSCompletedEventHandler(ByVal sender As Object, ByVal e As UploadFilesToFoldersRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadFilesToFoldersRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetCustomerNumberCompletedEventHandler(ByVal sender As Object, ByVal e As GetCustomerNumberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCustomerNumberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetDocumentsRSCompletedEventHandler(ByVal sender As Object, ByVal e As GetDocumentsRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDocumentsRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub CancelJobRSCompletedEventHandler(ByVal sender As Object, ByVal e As CancelJobRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelJobRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub ApprovePreviewCompletedEventHandler(ByVal sender As Object, ByVal e As ApprovePreviewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ApprovePreviewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub ApprovePreviewRSCompletedEventHandler(ByVal sender As Object, ByVal e As ApprovePreviewRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ApprovePreviewRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetPreviewCompletedEventHandler(ByVal sender As Object, ByVal e As GetPreviewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPreviewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As FileReference
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),FileReference)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetPreviewRSCompletedEventHandler(ByVal sender As Object, ByVal e As GetPreviewRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPreviewRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As FileReference
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),FileReference)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetListsRSCompletedEventHandler(ByVal sender As Object, ByVal e As GetListsRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetListsRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetJobTypesRSCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobTypesRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobTypesRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub StatusRSCompletedEventHandler(ByVal sender As Object, ByVal e As StatusRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StatusRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As JobData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),JobData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub StatusForJobRSCompletedEventHandler(ByVal sender As Object, ByVal e As StatusForJobRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StatusForJobRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As JobDataEx
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),JobDataEx)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub StatusForJob2RSCompletedEventHandler(ByVal sender As Object, ByVal e As StatusForJob2RSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StatusForJob2RSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As JobStats
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),JobStats)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub StatusExRSCompletedEventHandler(ByVal sender As Object, ByVal e As StatusExRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StatusExRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As JobDataEx
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),JobDataEx)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub StatusEx2CompletedEventHandler(ByVal sender As Object, ByVal e As StatusEx2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StatusEx2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As JobStats()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),JobStats())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub StatusEx2RSCompletedEventHandler(ByVal sender As Object, ByVal e As StatusEx2RSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StatusEx2RSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As JobStats()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),JobStats())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub StartBroadcastRSCompletedEventHandler(ByVal sender As Object, ByVal e As StartBroadcastRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StartBroadcastRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As BroadcastReturn
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),BroadcastReturn)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub StartHtmlMergeCompletedEventHandler(ByVal sender As Object, ByVal e As StartHtmlMergeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StartHtmlMergeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As BroadcastReturn
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),BroadcastReturn)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub StartHtmlMergeRSCompletedEventHandler(ByVal sender As Object, ByVal e As StartHtmlMergeRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StartHtmlMergeRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As BroadcastReturn
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),BroadcastReturn)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub StartPreviewRSCompletedEventHandler(ByVal sender As Object, ByVal e As StartPreviewRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StartPreviewRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As BroadcastReturn
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),BroadcastReturn)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub SubmitFileCompletedEventHandler(ByVal sender As Object, ByVal e As SubmitFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubmitFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As BroadcastReturn
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),BroadcastReturn)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub SubmitFileRSCompletedEventHandler(ByVal sender As Object, ByVal e As SubmitFileRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubmitFileRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As BroadcastReturn
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),BroadcastReturn)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetInboundFaxActivityRSCompletedEventHandler(ByVal sender As Object, ByVal e As GetInboundFaxActivityRSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInboundFaxActivityRSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub GetInboundFaxActivityCompletedEventHandler(ByVal sender As Object, ByVal e As GetInboundFaxActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInboundFaxActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
End Namespace
