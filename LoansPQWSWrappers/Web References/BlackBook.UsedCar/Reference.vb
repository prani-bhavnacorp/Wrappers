'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
'
Namespace BlackBook.UsedCar
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="UsedCarWS", [Namespace]:="http://localhost/webservices/UsedCarWS")>  _
    Partial Public Class UsedCarWSWse
        Inherits Microsoft.Web.Services3.WebServicesClientProtocol
        
        Private userCredentialsValueField As UserCredentials
        
        Private getYearsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getMakesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getModelsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getSeriesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getStylesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private applyUSAdjustmentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private applyUSAdjustments1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private applyCanadianAdjustmentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private applyCanadianAdjustments1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getValuesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getValues1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getVINValuesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getVINValues1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getVINValues2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getVINValues3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getMileageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCanadianMileageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCanadianMileage1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getMileage1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAddDeductsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAddDeducts1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getSingleStateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAllStatesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getSingleProvinceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAllProvincesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getHistoricalProvincesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getStandardEquipmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getStandardEquipment1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getColorsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getColors1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPhotoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPDFSpecOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getTrendAnalysisValuesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getVehicleClassesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_BlackBook_UsedCar_UsedCarWS
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Property UserCredentialsValue() As UserCredentials
            Get
                Return Me.userCredentialsValueField
            End Get
            Set
                Me.userCredentialsValueField = value
            End Set
        End Property
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event getYearsCompleted As getYearsCompletedEventHandler
        
        '''<remarks/>
        Public Event getMakesCompleted As getMakesCompletedEventHandler
        
        '''<remarks/>
        Public Event getModelsCompleted As getModelsCompletedEventHandler
        
        '''<remarks/>
        Public Event getSeriesCompleted As getSeriesCompletedEventHandler
        
        '''<remarks/>
        Public Event getStylesCompleted As getStylesCompletedEventHandler
        
        '''<remarks/>
        Public Event applyUSAdjustmentsCompleted As applyUSAdjustmentsCompletedEventHandler
        
        '''<remarks/>
        Public Event applyUSAdjustments1Completed As applyUSAdjustments1CompletedEventHandler
        
        '''<remarks/>
        Public Event applyCanadianAdjustmentsCompleted As applyCanadianAdjustmentsCompletedEventHandler
        
        '''<remarks/>
        Public Event applyCanadianAdjustments1Completed As applyCanadianAdjustments1CompletedEventHandler
        
        '''<remarks/>
        Public Event getValuesCompleted As getValuesCompletedEventHandler
        
        '''<remarks/>
        Public Event getValues1Completed As getValues1CompletedEventHandler
        
        '''<remarks/>
        Public Event getVINValuesCompleted As getVINValuesCompletedEventHandler
        
        '''<remarks/>
        Public Event getVINValues1Completed As getVINValues1CompletedEventHandler
        
        '''<remarks/>
        Public Event getVINValues2Completed As getVINValues2CompletedEventHandler
        
        '''<remarks/>
        Public Event getVINValues3Completed As getVINValues3CompletedEventHandler
        
        '''<remarks/>
        Public Event getMileageCompleted As getMileageCompletedEventHandler
        
        '''<remarks/>
        Public Event getCanadianMileageCompleted As getCanadianMileageCompletedEventHandler
        
        '''<remarks/>
        Public Event getCanadianMileage1Completed As getCanadianMileage1CompletedEventHandler
        
        '''<remarks/>
        Public Event getMileage1Completed As getMileage1CompletedEventHandler
        
        '''<remarks/>
        Public Event getAddDeductsCompleted As getAddDeductsCompletedEventHandler
        
        '''<remarks/>
        Public Event getAddDeducts1Completed As getAddDeducts1CompletedEventHandler
        
        '''<remarks/>
        Public Event getSingleStateCompleted As getSingleStateCompletedEventHandler
        
        '''<remarks/>
        Public Event getAllStatesCompleted As getAllStatesCompletedEventHandler
        
        '''<remarks/>
        Public Event getSingleProvinceCompleted As getSingleProvinceCompletedEventHandler
        
        '''<remarks/>
        Public Event getAllProvincesCompleted As getAllProvincesCompletedEventHandler
        
        '''<remarks/>
        Public Event getHistoricalProvincesCompleted As getHistoricalProvincesCompletedEventHandler
        
        '''<remarks/>
        Public Event getStandardEquipmentCompleted As getStandardEquipmentCompletedEventHandler
        
        '''<remarks/>
        Public Event getStandardEquipment1Completed As getStandardEquipment1CompletedEventHandler
        
        '''<remarks/>
        Public Event getColorsCompleted As getColorsCompletedEventHandler
        
        '''<remarks/>
        Public Event getColors1Completed As getColors1CompletedEventHandler
        
        '''<remarks/>
        Public Event getPhotoCompleted As getPhotoCompletedEventHandler
        
        '''<remarks/>
        Public Event getPDFSpecCompleted As getPDFSpecCompletedEventHandler
        
        '''<remarks/>
        Public Event getTrendAnalysisValuesCompleted As getTrendAnalysisValuesCompletedEventHandler
        
        '''<remarks/>
        Public Event getVehicleClassesCompleted As getVehicleClassesCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/Years", RequestElementName:="Years", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="YearsResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getYears(ByVal sCountryCode As String) As <System.Xml.Serialization.XmlElementAttribute("YearsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getYears", New Object() {sCountryCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getYearsAsync(ByVal sCountryCode As String)
            Me.getYearsAsync(sCountryCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getYearsAsync(ByVal sCountryCode As String, ByVal userState As Object)
            If (Me.getYearsOperationCompleted Is Nothing) Then
                Me.getYearsOperationCompleted = AddressOf Me.OngetYearsOperationCompleted
            End If
            Me.InvokeAsync("getYears", New Object() {sCountryCode}, Me.getYearsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetYearsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getYearsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getYearsCompleted(Me, New getYearsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/Makes", RequestElementName:="Makes", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="MakesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getMakes(ByVal sCountryCode As String, ByVal sYear As String) As <System.Xml.Serialization.XmlElementAttribute("MakesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getMakes", New Object() {sCountryCode, sYear})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getMakesAsync(ByVal sCountryCode As String, ByVal sYear As String)
            Me.getMakesAsync(sCountryCode, sYear, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getMakesAsync(ByVal sCountryCode As String, ByVal sYear As String, ByVal userState As Object)
            If (Me.getMakesOperationCompleted Is Nothing) Then
                Me.getMakesOperationCompleted = AddressOf Me.OngetMakesOperationCompleted
            End If
            Me.InvokeAsync("getMakes", New Object() {sCountryCode, sYear}, Me.getMakesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetMakesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getMakesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getMakesCompleted(Me, New getMakesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/Models", RequestElementName:="Models", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="ModelsResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getModels(ByVal sCountryCode As String, ByVal sYear As String, ByVal sMake As String) As <System.Xml.Serialization.XmlElementAttribute("ModelsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getModels", New Object() {sCountryCode, sYear, sMake})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getModelsAsync(ByVal sCountryCode As String, ByVal sYear As String, ByVal sMake As String)
            Me.getModelsAsync(sCountryCode, sYear, sMake, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getModelsAsync(ByVal sCountryCode As String, ByVal sYear As String, ByVal sMake As String, ByVal userState As Object)
            If (Me.getModelsOperationCompleted Is Nothing) Then
                Me.getModelsOperationCompleted = AddressOf Me.OngetModelsOperationCompleted
            End If
            Me.InvokeAsync("getModels", New Object() {sCountryCode, sYear, sMake}, Me.getModelsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetModelsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getModelsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getModelsCompleted(Me, New getModelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/Series", RequestElementName:="Series", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="SeriesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getSeries(ByVal sCountryCode As String, ByVal sYear As String, ByVal sMake As String, ByVal sModel As String) As <System.Xml.Serialization.XmlElementAttribute("SeriesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getSeries", New Object() {sCountryCode, sYear, sMake, sModel})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getSeriesAsync(ByVal sCountryCode As String, ByVal sYear As String, ByVal sMake As String, ByVal sModel As String)
            Me.getSeriesAsync(sCountryCode, sYear, sMake, sModel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getSeriesAsync(ByVal sCountryCode As String, ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal userState As Object)
            If (Me.getSeriesOperationCompleted Is Nothing) Then
                Me.getSeriesOperationCompleted = AddressOf Me.OngetSeriesOperationCompleted
            End If
            Me.InvokeAsync("getSeries", New Object() {sCountryCode, sYear, sMake, sModel}, Me.getSeriesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetSeriesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getSeriesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getSeriesCompleted(Me, New getSeriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/BodyStyles", RequestElementName:="BodyStyles", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="BodyStylesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getStyles(ByVal sCountryCode As String, ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal sSeries As String) As <System.Xml.Serialization.XmlElementAttribute("BodyStylesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getStyles", New Object() {sCountryCode, sYear, sMake, sModel, sSeries})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getStylesAsync(ByVal sCountryCode As String, ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal sSeries As String)
            Me.getStylesAsync(sCountryCode, sYear, sMake, sModel, sSeries, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getStylesAsync(ByVal sCountryCode As String, ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal sSeries As String, ByVal userState As Object)
            If (Me.getStylesOperationCompleted Is Nothing) Then
                Me.getStylesOperationCompleted = AddressOf Me.OngetStylesOperationCompleted
            End If
            Me.InvokeAsync("getStyles", New Object() {sCountryCode, sYear, sMake, sModel, sSeries}, Me.getStylesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetStylesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getStylesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getStylesCompleted(Me, New getStylesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/ApplyUSHistoricalAdjustments", RequestElementName:="ApplyUSHistoricalAdjustments", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="ApplyUSHistoricalAdjustmentsResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function applyUSAdjustments( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer,  _
                    ByVal dHistoricalDate As Date) As <System.Xml.Serialization.XmlElementAttribute("ApplyUSHistoricalAdjustmentsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("applyUSAdjustments", New Object() {ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, dHistoricalDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub applyUSAdjustmentsAsync( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer,  _
                    ByVal dHistoricalDate As Date)
            Me.applyUSAdjustmentsAsync(ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, dHistoricalDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub applyUSAdjustmentsAsync( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer,  _
                    ByVal dHistoricalDate As Date,  _
                    ByVal userState As Object)
            If (Me.applyUSAdjustmentsOperationCompleted Is Nothing) Then
                Me.applyUSAdjustmentsOperationCompleted = AddressOf Me.OnapplyUSAdjustmentsOperationCompleted
            End If
            Me.InvokeAsync("applyUSAdjustments", New Object() {ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, dHistoricalDate}, Me.applyUSAdjustmentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnapplyUSAdjustmentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.applyUSAdjustmentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent applyUSAdjustmentsCompleted(Me, New applyUSAdjustmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="applyUSAdjustments1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/ApplyUSCurrentAdjustments", RequestElementName:="ApplyUSCurrentAdjustments", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="ApplyUSCurrentAdjustmentsResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function applyUSAdjustments( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer) As <System.Xml.Serialization.XmlElementAttribute("ApplyUSCurrentAdjustmentsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("applyUSAdjustments1", New Object() {ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub applyUSAdjustments1Async( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer)
            Me.applyUSAdjustments1Async(ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub applyUSAdjustments1Async( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer,  _
                    ByVal userState As Object)
            If (Me.applyUSAdjustments1OperationCompleted Is Nothing) Then
                Me.applyUSAdjustments1OperationCompleted = AddressOf Me.OnapplyUSAdjustments1OperationCompleted
            End If
            Me.InvokeAsync("applyUSAdjustments1", New Object() {ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj}, Me.applyUSAdjustments1OperationCompleted, userState)
        End Sub
        
        Private Sub OnapplyUSAdjustments1OperationCompleted(ByVal arg As Object)
            If (Not (Me.applyUSAdjustments1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent applyUSAdjustments1Completed(Me, New applyUSAdjustments1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/ApplyCanadaHistoricalAdjustments", RequestElementName:="ApplyCanadaHistoricalAdjustments", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="ApplyCanadaHistoricalAdjustmentsResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function applyCanadianAdjustments( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sProvince As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer,  _
                    ByVal dHistoricalDate As Date) As <System.Xml.Serialization.XmlElementAttribute("ApplyCanadaHistoricalAdjustmentsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("applyCanadianAdjustments", New Object() {ds, sFrequencyCode, iMileage, sProvince, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, dHistoricalDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub applyCanadianAdjustmentsAsync( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sProvince As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer,  _
                    ByVal dHistoricalDate As Date)
            Me.applyCanadianAdjustmentsAsync(ds, sFrequencyCode, iMileage, sProvince, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, dHistoricalDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub applyCanadianAdjustmentsAsync( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sProvince As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer,  _
                    ByVal dHistoricalDate As Date,  _
                    ByVal userState As Object)
            If (Me.applyCanadianAdjustmentsOperationCompleted Is Nothing) Then
                Me.applyCanadianAdjustmentsOperationCompleted = AddressOf Me.OnapplyCanadianAdjustmentsOperationCompleted
            End If
            Me.InvokeAsync("applyCanadianAdjustments", New Object() {ds, sFrequencyCode, iMileage, sProvince, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, dHistoricalDate}, Me.applyCanadianAdjustmentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnapplyCanadianAdjustmentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.applyCanadianAdjustmentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent applyCanadianAdjustmentsCompleted(Me, New applyCanadianAdjustmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="applyCanadianAdjustments1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/ApplyCanadaCurrentAdjustments", RequestElementName:="ApplyCanadaCurrentAdjustments", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="ApplyCanadaCurrentAdjustmentsResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function applyCanadianAdjustments( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer) As <System.Xml.Serialization.XmlElementAttribute("ApplyCanadaCurrentAdjustmentsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("applyCanadianAdjustments1", New Object() {ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub applyCanadianAdjustments1Async( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer)
            Me.applyCanadianAdjustments1Async(ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub applyCanadianAdjustments1Async( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer,  _
                    ByVal userState As Object)
            If (Me.applyCanadianAdjustments1OperationCompleted Is Nothing) Then
                Me.applyCanadianAdjustments1OperationCompleted = AddressOf Me.OnapplyCanadianAdjustments1OperationCompleted
            End If
            Me.InvokeAsync("applyCanadianAdjustments1", New Object() {ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj}, Me.applyCanadianAdjustments1OperationCompleted, userState)
        End Sub
        
        Private Sub OnapplyCanadianAdjustments1OperationCompleted(ByVal arg As Object)
            If (Not (Me.applyCanadianAdjustments1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent applyCanadianAdjustments1Completed(Me, New applyCanadianAdjustments1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalValues", RequestElementName:="HistoricalValues", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="HistoricalValuesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getValues( _
                    ByVal sCountryCode As String,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal sYear As String,  _
                    ByVal sMake As String,  _
                    ByVal sModel As String,  _
                    ByVal sSeries As String,  _
                    ByVal sStyle As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal bFillDrilldown As Boolean,  _
                    ByVal bReturnMileage As Boolean,  _
                    ByVal bReturnAddDeducts As Boolean,  _
                    ByVal dHistoricalDate As Date) As <System.Xml.Serialization.XmlElementAttribute("HistoricalValuesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getValues", New Object() {sCountryCode, sFrequencyCode, sYear, sMake, sModel, sSeries, sStyle, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getValuesAsync( _
                    ByVal sCountryCode As String,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal sYear As String,  _
                    ByVal sMake As String,  _
                    ByVal sModel As String,  _
                    ByVal sSeries As String,  _
                    ByVal sStyle As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal bFillDrilldown As Boolean,  _
                    ByVal bReturnMileage As Boolean,  _
                    ByVal bReturnAddDeducts As Boolean,  _
                    ByVal dHistoricalDate As Date)
            Me.getValuesAsync(sCountryCode, sFrequencyCode, sYear, sMake, sModel, sSeries, sStyle, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getValuesAsync( _
                    ByVal sCountryCode As String,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal sYear As String,  _
                    ByVal sMake As String,  _
                    ByVal sModel As String,  _
                    ByVal sSeries As String,  _
                    ByVal sStyle As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal bFillDrilldown As Boolean,  _
                    ByVal bReturnMileage As Boolean,  _
                    ByVal bReturnAddDeducts As Boolean,  _
                    ByVal dHistoricalDate As Date,  _
                    ByVal userState As Object)
            If (Me.getValuesOperationCompleted Is Nothing) Then
                Me.getValuesOperationCompleted = AddressOf Me.OngetValuesOperationCompleted
            End If
            Me.InvokeAsync("getValues", New Object() {sCountryCode, sFrequencyCode, sYear, sMake, sModel, sSeries, sStyle, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate}, Me.getValuesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetValuesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getValuesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getValuesCompleted(Me, New getValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="getValues1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentValues", RequestElementName:="CurrentValues", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="CurrentValuesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getValues( _
                    ByVal sCountryCode As String,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal sYear As String,  _
                    ByVal sMake As String,  _
                    ByVal sModel As String,  _
                    ByVal sSeries As String,  _
                    ByVal sStyle As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal bFillDrilldown As Boolean,  _
                    ByVal bReturnMileage As Boolean,  _
                    ByVal bReturnAddDeducts As Boolean) As <System.Xml.Serialization.XmlElementAttribute("CurrentValuesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getValues1", New Object() {sCountryCode, sFrequencyCode, sYear, sMake, sModel, sSeries, sStyle, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getValues1Async( _
                    ByVal sCountryCode As String,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal sYear As String,  _
                    ByVal sMake As String,  _
                    ByVal sModel As String,  _
                    ByVal sSeries As String,  _
                    ByVal sStyle As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal bFillDrilldown As Boolean,  _
                    ByVal bReturnMileage As Boolean,  _
                    ByVal bReturnAddDeducts As Boolean)
            Me.getValues1Async(sCountryCode, sFrequencyCode, sYear, sMake, sModel, sSeries, sStyle, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getValues1Async( _
                    ByVal sCountryCode As String,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal sYear As String,  _
                    ByVal sMake As String,  _
                    ByVal sModel As String,  _
                    ByVal sSeries As String,  _
                    ByVal sStyle As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal bFillDrilldown As Boolean,  _
                    ByVal bReturnMileage As Boolean,  _
                    ByVal bReturnAddDeducts As Boolean,  _
                    ByVal userState As Object)
            If (Me.getValues1OperationCompleted Is Nothing) Then
                Me.getValues1OperationCompleted = AddressOf Me.OngetValues1OperationCompleted
            End If
            Me.InvokeAsync("getValues1", New Object() {sCountryCode, sFrequencyCode, sYear, sMake, sModel, sSeries, sStyle, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts}, Me.getValues1OperationCompleted, userState)
        End Sub
        
        Private Sub OngetValues1OperationCompleted(ByVal arg As Object)
            If (Not (Me.getValues1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getValues1Completed(Me, New getValues1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentVINUVCValues", RequestElementName:="CurrentVINUVCValues", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="CurrentVINUVCValuesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getVINValues(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal sUVC As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean) As <System.Xml.Serialization.XmlElementAttribute("CurrentVINUVCValuesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getVINValues", New Object() {sCountryCode, sFrequencyCode, sVIN, sUVC, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getVINValuesAsync(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal sUVC As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean)
            Me.getVINValuesAsync(sCountryCode, sFrequencyCode, sVIN, sUVC, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getVINValuesAsync(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal sUVC As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean, ByVal userState As Object)
            If (Me.getVINValuesOperationCompleted Is Nothing) Then
                Me.getVINValuesOperationCompleted = AddressOf Me.OngetVINValuesOperationCompleted
            End If
            Me.InvokeAsync("getVINValues", New Object() {sCountryCode, sFrequencyCode, sVIN, sUVC, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts}, Me.getVINValuesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetVINValuesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getVINValuesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getVINValuesCompleted(Me, New getVINValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="getVINValues1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalVINValues", RequestElementName:="HistoricalVINValues", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="HistoricalVINValuesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getVINValues(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean, ByVal dHistoricalDate As Date) As <System.Xml.Serialization.XmlElementAttribute("HistoricalVINValuesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getVINValues1", New Object() {sCountryCode, sFrequencyCode, sVIN, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getVINValues1Async(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean, ByVal dHistoricalDate As Date)
            Me.getVINValues1Async(sCountryCode, sFrequencyCode, sVIN, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getVINValues1Async(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean, ByVal dHistoricalDate As Date, ByVal userState As Object)
            If (Me.getVINValues1OperationCompleted Is Nothing) Then
                Me.getVINValues1OperationCompleted = AddressOf Me.OngetVINValues1OperationCompleted
            End If
            Me.InvokeAsync("getVINValues1", New Object() {sCountryCode, sFrequencyCode, sVIN, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate}, Me.getVINValues1OperationCompleted, userState)
        End Sub
        
        Private Sub OngetVINValues1OperationCompleted(ByVal arg As Object)
            If (Not (Me.getVINValues1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getVINValues1Completed(Me, New getVINValues1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="getVINValues2"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalVINUVCValues", RequestElementName:="HistoricalVINUVCValues", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="HistoricalVINUVCValuesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getVINValues(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal sUVC As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean, ByVal dHistoricalDate As Date) As <System.Xml.Serialization.XmlElementAttribute("HistoricalVINUVCValuesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getVINValues2", New Object() {sCountryCode, sFrequencyCode, sVIN, sUVC, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getVINValues2Async(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal sUVC As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean, ByVal dHistoricalDate As Date)
            Me.getVINValues2Async(sCountryCode, sFrequencyCode, sVIN, sUVC, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getVINValues2Async(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal sUVC As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean, ByVal dHistoricalDate As Date, ByVal userState As Object)
            If (Me.getVINValues2OperationCompleted Is Nothing) Then
                Me.getVINValues2OperationCompleted = AddressOf Me.OngetVINValues2OperationCompleted
            End If
            Me.InvokeAsync("getVINValues2", New Object() {sCountryCode, sFrequencyCode, sVIN, sUVC, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate}, Me.getVINValues2OperationCompleted, userState)
        End Sub
        
        Private Sub OngetVINValues2OperationCompleted(ByVal arg As Object)
            If (Not (Me.getVINValues2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getVINValues2Completed(Me, New getVINValues2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="getVINValues3"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentVINValues", RequestElementName:="CurrentVINValues", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="CurrentVINValuesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getVINValues(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean) As <System.Xml.Serialization.XmlElementAttribute("CurrentVINValuesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getVINValues3", New Object() {sCountryCode, sFrequencyCode, sVIN, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getVINValues3Async(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean)
            Me.getVINValues3Async(sCountryCode, sFrequencyCode, sVIN, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getVINValues3Async(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean, ByVal userState As Object)
            If (Me.getVINValues3OperationCompleted Is Nothing) Then
                Me.getVINValues3OperationCompleted = AddressOf Me.OngetVINValues3OperationCompleted
            End If
            Me.InvokeAsync("getVINValues3", New Object() {sCountryCode, sFrequencyCode, sVIN, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts}, Me.getVINValues3OperationCompleted, userState)
        End Sub
        
        Private Sub OngetVINValues3OperationCompleted(ByVal arg As Object)
            If (Not (Me.getVINValues3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getVINValues3Completed(Me, New getVINValues3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalMileage", RequestElementName:="HistoricalMileage", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="HistoricalMileageResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getMileage(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer, ByVal dHistoricalDate As Date) As <System.Xml.Serialization.XmlElementAttribute("HistoricalMileageResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getMileage", New Object() {sFrequencyCode, sVINYear, sMileageCategory, iMileage, dHistoricalDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getMileageAsync(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer, ByVal dHistoricalDate As Date)
            Me.getMileageAsync(sFrequencyCode, sVINYear, sMileageCategory, iMileage, dHistoricalDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getMileageAsync(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer, ByVal dHistoricalDate As Date, ByVal userState As Object)
            If (Me.getMileageOperationCompleted Is Nothing) Then
                Me.getMileageOperationCompleted = AddressOf Me.OngetMileageOperationCompleted
            End If
            Me.InvokeAsync("getMileage", New Object() {sFrequencyCode, sVINYear, sMileageCategory, iMileage, dHistoricalDate}, Me.getMileageOperationCompleted, userState)
        End Sub
        
        Private Sub OngetMileageOperationCompleted(ByVal arg As Object)
            If (Not (Me.getMileageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getMileageCompleted(Me, New getMileageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalCanadianMileage", RequestElementName:="HistoricalCanadianMileage", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="HistoricalCanadianMileageResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getCanadianMileage(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer, ByVal dHistoricalDate As Date) As <System.Xml.Serialization.XmlElementAttribute("HistoricalCanadianMileageResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getCanadianMileage", New Object() {sFrequencyCode, sVINYear, sMileageCategory, iMileage, dHistoricalDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCanadianMileageAsync(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer, ByVal dHistoricalDate As Date)
            Me.getCanadianMileageAsync(sFrequencyCode, sVINYear, sMileageCategory, iMileage, dHistoricalDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCanadianMileageAsync(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer, ByVal dHistoricalDate As Date, ByVal userState As Object)
            If (Me.getCanadianMileageOperationCompleted Is Nothing) Then
                Me.getCanadianMileageOperationCompleted = AddressOf Me.OngetCanadianMileageOperationCompleted
            End If
            Me.InvokeAsync("getCanadianMileage", New Object() {sFrequencyCode, sVINYear, sMileageCategory, iMileage, dHistoricalDate}, Me.getCanadianMileageOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCanadianMileageOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCanadianMileageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCanadianMileageCompleted(Me, New getCanadianMileageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="getCanadianMileage1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentCanadianMileage", RequestElementName:="CurrentCanadianMileage", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="CurrentCanadianMileageResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getCanadianMileage(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer) As <System.Xml.Serialization.XmlElementAttribute("CurrentCanadianMileageResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getCanadianMileage1", New Object() {sFrequencyCode, sVINYear, sMileageCategory, iMileage})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCanadianMileage1Async(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer)
            Me.getCanadianMileage1Async(sFrequencyCode, sVINYear, sMileageCategory, iMileage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCanadianMileage1Async(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer, ByVal userState As Object)
            If (Me.getCanadianMileage1OperationCompleted Is Nothing) Then
                Me.getCanadianMileage1OperationCompleted = AddressOf Me.OngetCanadianMileage1OperationCompleted
            End If
            Me.InvokeAsync("getCanadianMileage1", New Object() {sFrequencyCode, sVINYear, sMileageCategory, iMileage}, Me.getCanadianMileage1OperationCompleted, userState)
        End Sub
        
        Private Sub OngetCanadianMileage1OperationCompleted(ByVal arg As Object)
            If (Not (Me.getCanadianMileage1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCanadianMileage1Completed(Me, New getCanadianMileage1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="getMileage1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentMileage", RequestElementName:="CurrentMileage", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="CurrentMileageResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getMileage(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer) As <System.Xml.Serialization.XmlElementAttribute("CurrentMileageResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getMileage1", New Object() {sFrequencyCode, sVINYear, sMileageCategory, iMileage})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getMileage1Async(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer)
            Me.getMileage1Async(sFrequencyCode, sVINYear, sMileageCategory, iMileage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getMileage1Async(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer, ByVal userState As Object)
            If (Me.getMileage1OperationCompleted Is Nothing) Then
                Me.getMileage1OperationCompleted = AddressOf Me.OngetMileage1OperationCompleted
            End If
            Me.InvokeAsync("getMileage1", New Object() {sFrequencyCode, sVINYear, sMileageCategory, iMileage}, Me.getMileage1OperationCompleted, userState)
        End Sub
        
        Private Sub OngetMileage1OperationCompleted(ByVal arg As Object)
            If (Not (Me.getMileage1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getMileage1Completed(Me, New getMileage1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalAddDeducts", RequestElementName:="HistoricalAddDeducts", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="HistoricalAddDeductsResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getAddDeducts(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal sVIN As String, ByVal dHistoricalDate As Date) As <System.Xml.Serialization.XmlElementAttribute("HistoricalAddDeductsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getAddDeducts", New Object() {sCountryCode, sFrequencyCode, sVINYear, sGroupNumber, sVIN, dHistoricalDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAddDeductsAsync(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal sVIN As String, ByVal dHistoricalDate As Date)
            Me.getAddDeductsAsync(sCountryCode, sFrequencyCode, sVINYear, sGroupNumber, sVIN, dHistoricalDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAddDeductsAsync(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal sVIN As String, ByVal dHistoricalDate As Date, ByVal userState As Object)
            If (Me.getAddDeductsOperationCompleted Is Nothing) Then
                Me.getAddDeductsOperationCompleted = AddressOf Me.OngetAddDeductsOperationCompleted
            End If
            Me.InvokeAsync("getAddDeducts", New Object() {sCountryCode, sFrequencyCode, sVINYear, sGroupNumber, sVIN, dHistoricalDate}, Me.getAddDeductsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAddDeductsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAddDeductsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAddDeductsCompleted(Me, New getAddDeductsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="getAddDeducts1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentAddDeducts", RequestElementName:="CurrentAddDeducts", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="CurrentAddDeductsResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getAddDeducts(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal sVIN As String) As <System.Xml.Serialization.XmlElementAttribute("CurrentAddDeductsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getAddDeducts1", New Object() {sCountryCode, sFrequencyCode, sVINYear, sGroupNumber, sVIN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAddDeducts1Async(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal sVIN As String)
            Me.getAddDeducts1Async(sCountryCode, sFrequencyCode, sVINYear, sGroupNumber, sVIN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAddDeducts1Async(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal sVIN As String, ByVal userState As Object)
            If (Me.getAddDeducts1OperationCompleted Is Nothing) Then
                Me.getAddDeducts1OperationCompleted = AddressOf Me.OngetAddDeducts1OperationCompleted
            End If
            Me.InvokeAsync("getAddDeducts1", New Object() {sCountryCode, sFrequencyCode, sVINYear, sGroupNumber, sVIN}, Me.getAddDeducts1OperationCompleted, userState)
        End Sub
        
        Private Sub OngetAddDeducts1OperationCompleted(ByVal arg As Object)
            If (Not (Me.getAddDeducts1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAddDeducts1Completed(Me, New getAddDeducts1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/SingleState", RequestElementName:="SingleState", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="SingleStateResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getSingleState(ByVal sState As String) As <System.Xml.Serialization.XmlElementAttribute("SingleStateResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getSingleState", New Object() {sState})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getSingleStateAsync(ByVal sState As String)
            Me.getSingleStateAsync(sState, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getSingleStateAsync(ByVal sState As String, ByVal userState As Object)
            If (Me.getSingleStateOperationCompleted Is Nothing) Then
                Me.getSingleStateOperationCompleted = AddressOf Me.OngetSingleStateOperationCompleted
            End If
            Me.InvokeAsync("getSingleState", New Object() {sState}, Me.getSingleStateOperationCompleted, userState)
        End Sub
        
        Private Sub OngetSingleStateOperationCompleted(ByVal arg As Object)
            If (Not (Me.getSingleStateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getSingleStateCompleted(Me, New getSingleStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/AllStates", RequestElementName:="AllStates", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="AllStatesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAllStates() As <System.Xml.Serialization.XmlElementAttribute("AllStatesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getAllStates", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAllStatesAsync()
            Me.getAllStatesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAllStatesAsync(ByVal userState As Object)
            If (Me.getAllStatesOperationCompleted Is Nothing) Then
                Me.getAllStatesOperationCompleted = AddressOf Me.OngetAllStatesOperationCompleted
            End If
            Me.InvokeAsync("getAllStates", New Object(-1) {}, Me.getAllStatesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAllStatesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAllStatesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAllStatesCompleted(Me, New getAllStatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/SingleProvince", RequestElementName:="SingleProvince", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="SingleProvinceResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getSingleProvince(ByVal sProvince As String) As <System.Xml.Serialization.XmlElementAttribute("SingleProvinceResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getSingleProvince", New Object() {sProvince})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getSingleProvinceAsync(ByVal sProvince As String)
            Me.getSingleProvinceAsync(sProvince, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getSingleProvinceAsync(ByVal sProvince As String, ByVal userState As Object)
            If (Me.getSingleProvinceOperationCompleted Is Nothing) Then
                Me.getSingleProvinceOperationCompleted = AddressOf Me.OngetSingleProvinceOperationCompleted
            End If
            Me.InvokeAsync("getSingleProvince", New Object() {sProvince}, Me.getSingleProvinceOperationCompleted, userState)
        End Sub
        
        Private Sub OngetSingleProvinceOperationCompleted(ByVal arg As Object)
            If (Not (Me.getSingleProvinceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getSingleProvinceCompleted(Me, New getSingleProvinceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/AllProvinces", RequestElementName:="AllProvinces", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="AllProvincesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAllProvinces() As <System.Xml.Serialization.XmlElementAttribute("AllProvincesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getAllProvinces", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAllProvincesAsync()
            Me.getAllProvincesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAllProvincesAsync(ByVal userState As Object)
            If (Me.getAllProvincesOperationCompleted Is Nothing) Then
                Me.getAllProvincesOperationCompleted = AddressOf Me.OngetAllProvincesOperationCompleted
            End If
            Me.InvokeAsync("getAllProvinces", New Object(-1) {}, Me.getAllProvincesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAllProvincesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAllProvincesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAllProvincesCompleted(Me, New getAllProvincesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalProvinces", RequestElementName:="HistoricalProvinces", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="HistoricalProvincesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getHistoricalProvinces(ByVal sDate As Date) As <System.Xml.Serialization.XmlElementAttribute("HistoricalProvincesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getHistoricalProvinces", New Object() {sDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getHistoricalProvincesAsync(ByVal sDate As Date)
            Me.getHistoricalProvincesAsync(sDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getHistoricalProvincesAsync(ByVal sDate As Date, ByVal userState As Object)
            If (Me.getHistoricalProvincesOperationCompleted Is Nothing) Then
                Me.getHistoricalProvincesOperationCompleted = AddressOf Me.OngetHistoricalProvincesOperationCompleted
            End If
            Me.InvokeAsync("getHistoricalProvinces", New Object() {sDate}, Me.getHistoricalProvincesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetHistoricalProvincesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getHistoricalProvincesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getHistoricalProvincesCompleted(Me, New getHistoricalProvincesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/StandardEquipmentByCategory", RequestElementName:="StandardEquipmentByCategory", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="StandardEquipmentByCategoryResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getStandardEquipment(ByVal sCountryCode As String, ByVal sUVC As String, ByVal sCategory As String) As <System.Xml.Serialization.XmlElementAttribute("StandardEquipmentByCategoryResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getStandardEquipment", New Object() {sCountryCode, sUVC, sCategory})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getStandardEquipmentAsync(ByVal sCountryCode As String, ByVal sUVC As String, ByVal sCategory As String)
            Me.getStandardEquipmentAsync(sCountryCode, sUVC, sCategory, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getStandardEquipmentAsync(ByVal sCountryCode As String, ByVal sUVC As String, ByVal sCategory As String, ByVal userState As Object)
            If (Me.getStandardEquipmentOperationCompleted Is Nothing) Then
                Me.getStandardEquipmentOperationCompleted = AddressOf Me.OngetStandardEquipmentOperationCompleted
            End If
            Me.InvokeAsync("getStandardEquipment", New Object() {sCountryCode, sUVC, sCategory}, Me.getStandardEquipmentOperationCompleted, userState)
        End Sub
        
        Private Sub OngetStandardEquipmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.getStandardEquipmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getStandardEquipmentCompleted(Me, New getStandardEquipmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="getStandardEquipment1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/StandardEquipment", RequestElementName:="StandardEquipment", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="StandardEquipmentResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getStandardEquipment(ByVal sCountryCode As String, ByVal sUVC As String) As <System.Xml.Serialization.XmlElementAttribute("StandardEquipmentResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getStandardEquipment1", New Object() {sCountryCode, sUVC})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getStandardEquipment1Async(ByVal sCountryCode As String, ByVal sUVC As String)
            Me.getStandardEquipment1Async(sCountryCode, sUVC, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getStandardEquipment1Async(ByVal sCountryCode As String, ByVal sUVC As String, ByVal userState As Object)
            If (Me.getStandardEquipment1OperationCompleted Is Nothing) Then
                Me.getStandardEquipment1OperationCompleted = AddressOf Me.OngetStandardEquipment1OperationCompleted
            End If
            Me.InvokeAsync("getStandardEquipment1", New Object() {sCountryCode, sUVC}, Me.getStandardEquipment1OperationCompleted, userState)
        End Sub
        
        Private Sub OngetStandardEquipment1OperationCompleted(ByVal arg As Object)
            If (Not (Me.getStandardEquipment1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getStandardEquipment1Completed(Me, New getStandardEquipment1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/ColorsByCategory", RequestElementName:="ColorsByCategory", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="ColorsByCategoryResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getColors(ByVal sCountryCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal sCategory As String) As <System.Xml.Serialization.XmlElementAttribute("ColorsByCategoryResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getColors", New Object() {sCountryCode, sVINYear, sGroupNumber, sCategory})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getColorsAsync(ByVal sCountryCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal sCategory As String)
            Me.getColorsAsync(sCountryCode, sVINYear, sGroupNumber, sCategory, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getColorsAsync(ByVal sCountryCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal sCategory As String, ByVal userState As Object)
            If (Me.getColorsOperationCompleted Is Nothing) Then
                Me.getColorsOperationCompleted = AddressOf Me.OngetColorsOperationCompleted
            End If
            Me.InvokeAsync("getColors", New Object() {sCountryCode, sVINYear, sGroupNumber, sCategory}, Me.getColorsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetColorsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getColorsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getColorsCompleted(Me, New getColorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="getColors1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/Colors", RequestElementName:="Colors", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="ColorsResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getColors(ByVal sCountryCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String) As <System.Xml.Serialization.XmlElementAttribute("ColorsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getColors1", New Object() {sCountryCode, sVINYear, sGroupNumber})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getColors1Async(ByVal sCountryCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String)
            Me.getColors1Async(sCountryCode, sVINYear, sGroupNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getColors1Async(ByVal sCountryCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal userState As Object)
            If (Me.getColors1OperationCompleted Is Nothing) Then
                Me.getColors1OperationCompleted = AddressOf Me.OngetColors1OperationCompleted
            End If
            Me.InvokeAsync("getColors1", New Object() {sCountryCode, sVINYear, sGroupNumber}, Me.getColors1OperationCompleted, userState)
        End Sub
        
        Private Sub OngetColors1OperationCompleted(ByVal arg As Object)
            If (Not (Me.getColors1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getColors1Completed(Me, New getColors1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/Photo", RequestElementName:="Photo", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="PhotoResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPhoto(ByVal sCountryCode As String, ByVal sUVC As String) As <System.Xml.Serialization.XmlElementAttribute("PhotoResult", DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("getPhoto", New Object() {sCountryCode, sUVC})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPhotoAsync(ByVal sCountryCode As String, ByVal sUVC As String)
            Me.getPhotoAsync(sCountryCode, sUVC, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPhotoAsync(ByVal sCountryCode As String, ByVal sUVC As String, ByVal userState As Object)
            If (Me.getPhotoOperationCompleted Is Nothing) Then
                Me.getPhotoOperationCompleted = AddressOf Me.OngetPhotoOperationCompleted
            End If
            Me.InvokeAsync("getPhoto", New Object() {sCountryCode, sUVC}, Me.getPhotoOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPhotoOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPhotoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPhotoCompleted(Me, New getPhotoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/PDF", RequestElementName:="PDF", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="PDFResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPDFSpec(ByVal sCountryCode As String, ByVal sUVC As String) As <System.Xml.Serialization.XmlElementAttribute("PDFResult", DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("getPDFSpec", New Object() {sCountryCode, sUVC})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPDFSpecAsync(ByVal sCountryCode As String, ByVal sUVC As String)
            Me.getPDFSpecAsync(sCountryCode, sUVC, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPDFSpecAsync(ByVal sCountryCode As String, ByVal sUVC As String, ByVal userState As Object)
            If (Me.getPDFSpecOperationCompleted Is Nothing) Then
                Me.getPDFSpecOperationCompleted = AddressOf Me.OngetPDFSpecOperationCompleted
            End If
            Me.InvokeAsync("getPDFSpec", New Object() {sCountryCode, sUVC}, Me.getPDFSpecOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPDFSpecOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPDFSpecCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPDFSpecCompleted(Me, New getPDFSpecCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/TrendAnalysis", RequestElementName:="TrendAnalysis", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="TrendAnalysisResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getTrendAnalysisValues(ByVal sCountryCode As String, ByVal sUVC As String, ByVal sAnnualOrMonthly As String, ByVal dStartDate As Date, ByVal dEndDate As Date) As <System.Xml.Serialization.XmlElementAttribute("TrendAnalysisResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getTrendAnalysisValues", New Object() {sCountryCode, sUVC, sAnnualOrMonthly, dStartDate, dEndDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getTrendAnalysisValuesAsync(ByVal sCountryCode As String, ByVal sUVC As String, ByVal sAnnualOrMonthly As String, ByVal dStartDate As Date, ByVal dEndDate As Date)
            Me.getTrendAnalysisValuesAsync(sCountryCode, sUVC, sAnnualOrMonthly, dStartDate, dEndDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getTrendAnalysisValuesAsync(ByVal sCountryCode As String, ByVal sUVC As String, ByVal sAnnualOrMonthly As String, ByVal dStartDate As Date, ByVal dEndDate As Date, ByVal userState As Object)
            If (Me.getTrendAnalysisValuesOperationCompleted Is Nothing) Then
                Me.getTrendAnalysisValuesOperationCompleted = AddressOf Me.OngetTrendAnalysisValuesOperationCompleted
            End If
            Me.InvokeAsync("getTrendAnalysisValues", New Object() {sCountryCode, sUVC, sAnnualOrMonthly, dStartDate, dEndDate}, Me.getTrendAnalysisValuesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetTrendAnalysisValuesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getTrendAnalysisValuesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getTrendAnalysisValuesCompleted(Me, New getTrendAnalysisValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/VehicleClassifications", RequestElementName:="VehicleClassifications", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="VehicleClassificationsResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getVehicleClasses() As <System.Xml.Serialization.XmlElementAttribute("VehicleClassificationsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getVehicleClasses", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getVehicleClassesAsync()
            Me.getVehicleClassesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getVehicleClassesAsync(ByVal userState As Object)
            If (Me.getVehicleClassesOperationCompleted Is Nothing) Then
                Me.getVehicleClassesOperationCompleted = AddressOf Me.OngetVehicleClassesOperationCompleted
            End If
            Me.InvokeAsync("getVehicleClasses", New Object(-1) {}, Me.getVehicleClassesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetVehicleClassesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getVehicleClassesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getVehicleClassesCompleted(Me, New getVehicleClassesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="UsedCarWSSoap", [Namespace]:="http://localhost/webservices/UsedCarWS")>  _
    Partial Public Class UsedCarWSSoapWse
        Inherits Microsoft.Web.Services3.WebServicesClientProtocol
        
        Private getIPAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_BlackBook_UsedCar_UsedCarWS
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event getIPAddressCompleted As getIPAddressCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/IPAddress", RequestElementName:="IPAddress", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="IPAddressResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getIPAddress() As <System.Xml.Serialization.XmlElementAttribute("IPAddressResult")> String
            Dim results() As Object = Me.Invoke("getIPAddress", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getIPAddressAsync()
            Me.getIPAddressAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getIPAddressAsync(ByVal userState As Object)
            If (Me.getIPAddressOperationCompleted Is Nothing) Then
                Me.getIPAddressOperationCompleted = AddressOf Me.OngetIPAddressOperationCompleted
            End If
            Me.InvokeAsync("getIPAddress", New Object(-1) {}, Me.getIPAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OngetIPAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.getIPAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getIPAddressCompleted(Me, New getIPAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="UsedCarWS", [Namespace]:="http://localhost/webservices/UsedCarWS")>  _
    Partial Public Class UsedCarWS
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private userCredentialsValueField As UserCredentials
        
        Private getYearsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getMakesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getModelsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getSeriesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getStylesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private applyUSAdjustmentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private applyUSAdjustments1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private applyCanadianAdjustmentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private applyCanadianAdjustments1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getValuesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getValues1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getVINValuesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getVINValues1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getVINValues2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getVINValues3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getMileageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCanadianMileageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCanadianMileage1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getMileage1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAddDeductsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAddDeducts1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getSingleStateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAllStatesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getSingleProvinceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAllProvincesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getHistoricalProvincesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getStandardEquipmentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getStandardEquipment1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getColorsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getColors1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPhotoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPDFSpecOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getTrendAnalysisValuesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getVehicleClassesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_BlackBook_UsedCar_UsedCarWS
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Property UserCredentialsValue() As UserCredentials
            Get
                Return Me.userCredentialsValueField
            End Get
            Set
                Me.userCredentialsValueField = value
            End Set
        End Property
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event getYearsCompleted As getYearsCompletedEventHandler
        
        '''<remarks/>
        Public Event getMakesCompleted As getMakesCompletedEventHandler
        
        '''<remarks/>
        Public Event getModelsCompleted As getModelsCompletedEventHandler
        
        '''<remarks/>
        Public Event getSeriesCompleted As getSeriesCompletedEventHandler
        
        '''<remarks/>
        Public Event getStylesCompleted As getStylesCompletedEventHandler
        
        '''<remarks/>
        Public Event applyUSAdjustmentsCompleted As applyUSAdjustmentsCompletedEventHandler
        
        '''<remarks/>
        Public Event applyUSAdjustments1Completed As applyUSAdjustments1CompletedEventHandler
        
        '''<remarks/>
        Public Event applyCanadianAdjustmentsCompleted As applyCanadianAdjustmentsCompletedEventHandler
        
        '''<remarks/>
        Public Event applyCanadianAdjustments1Completed As applyCanadianAdjustments1CompletedEventHandler
        
        '''<remarks/>
        Public Event getValuesCompleted As getValuesCompletedEventHandler
        
        '''<remarks/>
        Public Event getValues1Completed As getValues1CompletedEventHandler
        
        '''<remarks/>
        Public Event getVINValuesCompleted As getVINValuesCompletedEventHandler
        
        '''<remarks/>
        Public Event getVINValues1Completed As getVINValues1CompletedEventHandler
        
        '''<remarks/>
        Public Event getVINValues2Completed As getVINValues2CompletedEventHandler
        
        '''<remarks/>
        Public Event getVINValues3Completed As getVINValues3CompletedEventHandler
        
        '''<remarks/>
        Public Event getMileageCompleted As getMileageCompletedEventHandler
        
        '''<remarks/>
        Public Event getCanadianMileageCompleted As getCanadianMileageCompletedEventHandler
        
        '''<remarks/>
        Public Event getCanadianMileage1Completed As getCanadianMileage1CompletedEventHandler
        
        '''<remarks/>
        Public Event getMileage1Completed As getMileage1CompletedEventHandler
        
        '''<remarks/>
        Public Event getAddDeductsCompleted As getAddDeductsCompletedEventHandler
        
        '''<remarks/>
        Public Event getAddDeducts1Completed As getAddDeducts1CompletedEventHandler
        
        '''<remarks/>
        Public Event getSingleStateCompleted As getSingleStateCompletedEventHandler
        
        '''<remarks/>
        Public Event getAllStatesCompleted As getAllStatesCompletedEventHandler
        
        '''<remarks/>
        Public Event getSingleProvinceCompleted As getSingleProvinceCompletedEventHandler
        
        '''<remarks/>
        Public Event getAllProvincesCompleted As getAllProvincesCompletedEventHandler
        
        '''<remarks/>
        Public Event getHistoricalProvincesCompleted As getHistoricalProvincesCompletedEventHandler
        
        '''<remarks/>
        Public Event getStandardEquipmentCompleted As getStandardEquipmentCompletedEventHandler
        
        '''<remarks/>
        Public Event getStandardEquipment1Completed As getStandardEquipment1CompletedEventHandler
        
        '''<remarks/>
        Public Event getColorsCompleted As getColorsCompletedEventHandler
        
        '''<remarks/>
        Public Event getColors1Completed As getColors1CompletedEventHandler
        
        '''<remarks/>
        Public Event getPhotoCompleted As getPhotoCompletedEventHandler
        
        '''<remarks/>
        Public Event getPDFSpecCompleted As getPDFSpecCompletedEventHandler
        
        '''<remarks/>
        Public Event getTrendAnalysisValuesCompleted As getTrendAnalysisValuesCompletedEventHandler
        
        '''<remarks/>
        Public Event getVehicleClassesCompleted As getVehicleClassesCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/Years", RequestElementName:="Years", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="YearsResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getYears(ByVal sCountryCode As String) As <System.Xml.Serialization.XmlElementAttribute("YearsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getYears", New Object() {sCountryCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetYears(ByVal sCountryCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getYears", New Object() {sCountryCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetYears(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getYearsAsync(ByVal sCountryCode As String)
            Me.getYearsAsync(sCountryCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getYearsAsync(ByVal sCountryCode As String, ByVal userState As Object)
            If (Me.getYearsOperationCompleted Is Nothing) Then
                Me.getYearsOperationCompleted = AddressOf Me.OngetYearsOperationCompleted
            End If
            Me.InvokeAsync("getYears", New Object() {sCountryCode}, Me.getYearsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetYearsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getYearsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getYearsCompleted(Me, New getYearsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/Makes", RequestElementName:="Makes", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="MakesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getMakes(ByVal sCountryCode As String, ByVal sYear As String) As <System.Xml.Serialization.XmlElementAttribute("MakesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getMakes", New Object() {sCountryCode, sYear})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetMakes(ByVal sCountryCode As String, ByVal sYear As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getMakes", New Object() {sCountryCode, sYear}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetMakes(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getMakesAsync(ByVal sCountryCode As String, ByVal sYear As String)
            Me.getMakesAsync(sCountryCode, sYear, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getMakesAsync(ByVal sCountryCode As String, ByVal sYear As String, ByVal userState As Object)
            If (Me.getMakesOperationCompleted Is Nothing) Then
                Me.getMakesOperationCompleted = AddressOf Me.OngetMakesOperationCompleted
            End If
            Me.InvokeAsync("getMakes", New Object() {sCountryCode, sYear}, Me.getMakesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetMakesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getMakesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getMakesCompleted(Me, New getMakesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/Models", RequestElementName:="Models", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="ModelsResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getModels(ByVal sCountryCode As String, ByVal sYear As String, ByVal sMake As String) As <System.Xml.Serialization.XmlElementAttribute("ModelsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getModels", New Object() {sCountryCode, sYear, sMake})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetModels(ByVal sCountryCode As String, ByVal sYear As String, ByVal sMake As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getModels", New Object() {sCountryCode, sYear, sMake}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetModels(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getModelsAsync(ByVal sCountryCode As String, ByVal sYear As String, ByVal sMake As String)
            Me.getModelsAsync(sCountryCode, sYear, sMake, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getModelsAsync(ByVal sCountryCode As String, ByVal sYear As String, ByVal sMake As String, ByVal userState As Object)
            If (Me.getModelsOperationCompleted Is Nothing) Then
                Me.getModelsOperationCompleted = AddressOf Me.OngetModelsOperationCompleted
            End If
            Me.InvokeAsync("getModels", New Object() {sCountryCode, sYear, sMake}, Me.getModelsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetModelsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getModelsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getModelsCompleted(Me, New getModelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/Series", RequestElementName:="Series", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="SeriesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getSeries(ByVal sCountryCode As String, ByVal sYear As String, ByVal sMake As String, ByVal sModel As String) As <System.Xml.Serialization.XmlElementAttribute("SeriesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getSeries", New Object() {sCountryCode, sYear, sMake, sModel})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetSeries(ByVal sCountryCode As String, ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getSeries", New Object() {sCountryCode, sYear, sMake, sModel}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetSeries(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getSeriesAsync(ByVal sCountryCode As String, ByVal sYear As String, ByVal sMake As String, ByVal sModel As String)
            Me.getSeriesAsync(sCountryCode, sYear, sMake, sModel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getSeriesAsync(ByVal sCountryCode As String, ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal userState As Object)
            If (Me.getSeriesOperationCompleted Is Nothing) Then
                Me.getSeriesOperationCompleted = AddressOf Me.OngetSeriesOperationCompleted
            End If
            Me.InvokeAsync("getSeries", New Object() {sCountryCode, sYear, sMake, sModel}, Me.getSeriesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetSeriesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getSeriesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getSeriesCompleted(Me, New getSeriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/BodyStyles", RequestElementName:="BodyStyles", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="BodyStylesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getStyles(ByVal sCountryCode As String, ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal sSeries As String) As <System.Xml.Serialization.XmlElementAttribute("BodyStylesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getStyles", New Object() {sCountryCode, sYear, sMake, sModel, sSeries})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetStyles(ByVal sCountryCode As String, ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal sSeries As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getStyles", New Object() {sCountryCode, sYear, sMake, sModel, sSeries}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetStyles(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getStylesAsync(ByVal sCountryCode As String, ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal sSeries As String)
            Me.getStylesAsync(sCountryCode, sYear, sMake, sModel, sSeries, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getStylesAsync(ByVal sCountryCode As String, ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal sSeries As String, ByVal userState As Object)
            If (Me.getStylesOperationCompleted Is Nothing) Then
                Me.getStylesOperationCompleted = AddressOf Me.OngetStylesOperationCompleted
            End If
            Me.InvokeAsync("getStyles", New Object() {sCountryCode, sYear, sMake, sModel, sSeries}, Me.getStylesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetStylesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getStylesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getStylesCompleted(Me, New getStylesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/ApplyUSHistoricalAdjustments", RequestElementName:="ApplyUSHistoricalAdjustments", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="ApplyUSHistoricalAdjustmentsResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function applyUSAdjustments( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer,  _
                    ByVal dHistoricalDate As Date) As <System.Xml.Serialization.XmlElementAttribute("ApplyUSHistoricalAdjustmentsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("applyUSAdjustments", New Object() {ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, dHistoricalDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginapplyUSAdjustments( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer,  _
                    ByVal dHistoricalDate As Date,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("applyUSAdjustments", New Object() {ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, dHistoricalDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndapplyUSAdjustments(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub applyUSAdjustmentsAsync( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer,  _
                    ByVal dHistoricalDate As Date)
            Me.applyUSAdjustmentsAsync(ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, dHistoricalDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub applyUSAdjustmentsAsync( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer,  _
                    ByVal dHistoricalDate As Date,  _
                    ByVal userState As Object)
            If (Me.applyUSAdjustmentsOperationCompleted Is Nothing) Then
                Me.applyUSAdjustmentsOperationCompleted = AddressOf Me.OnapplyUSAdjustmentsOperationCompleted
            End If
            Me.InvokeAsync("applyUSAdjustments", New Object() {ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, dHistoricalDate}, Me.applyUSAdjustmentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnapplyUSAdjustmentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.applyUSAdjustmentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent applyUSAdjustmentsCompleted(Me, New applyUSAdjustmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="applyUSAdjustments1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/ApplyUSCurrentAdjustments", RequestElementName:="ApplyUSCurrentAdjustments", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="ApplyUSCurrentAdjustmentsResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function applyUSAdjustments( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer) As <System.Xml.Serialization.XmlElementAttribute("ApplyUSCurrentAdjustmentsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("applyUSAdjustments1", New Object() {ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginapplyUSAdjustments1( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("applyUSAdjustments1", New Object() {ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndapplyUSAdjustments1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub applyUSAdjustments1Async( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer)
            Me.applyUSAdjustments1Async(ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub applyUSAdjustments1Async( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer,  _
                    ByVal userState As Object)
            If (Me.applyUSAdjustments1OperationCompleted Is Nothing) Then
                Me.applyUSAdjustments1OperationCompleted = AddressOf Me.OnapplyUSAdjustments1OperationCompleted
            End If
            Me.InvokeAsync("applyUSAdjustments1", New Object() {ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj}, Me.applyUSAdjustments1OperationCompleted, userState)
        End Sub
        
        Private Sub OnapplyUSAdjustments1OperationCompleted(ByVal arg As Object)
            If (Not (Me.applyUSAdjustments1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent applyUSAdjustments1Completed(Me, New applyUSAdjustments1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/ApplyCanadaHistoricalAdjustments", RequestElementName:="ApplyCanadaHistoricalAdjustments", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="ApplyCanadaHistoricalAdjustmentsResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function applyCanadianAdjustments( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sProvince As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer,  _
                    ByVal dHistoricalDate As Date) As <System.Xml.Serialization.XmlElementAttribute("ApplyCanadaHistoricalAdjustmentsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("applyCanadianAdjustments", New Object() {ds, sFrequencyCode, iMileage, sProvince, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, dHistoricalDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginapplyCanadianAdjustments( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sProvince As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer,  _
                    ByVal dHistoricalDate As Date,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("applyCanadianAdjustments", New Object() {ds, sFrequencyCode, iMileage, sProvince, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, dHistoricalDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndapplyCanadianAdjustments(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub applyCanadianAdjustmentsAsync( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sProvince As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer,  _
                    ByVal dHistoricalDate As Date)
            Me.applyCanadianAdjustmentsAsync(ds, sFrequencyCode, iMileage, sProvince, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, dHistoricalDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub applyCanadianAdjustmentsAsync( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sProvince As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer,  _
                    ByVal dHistoricalDate As Date,  _
                    ByVal userState As Object)
            If (Me.applyCanadianAdjustmentsOperationCompleted Is Nothing) Then
                Me.applyCanadianAdjustmentsOperationCompleted = AddressOf Me.OnapplyCanadianAdjustmentsOperationCompleted
            End If
            Me.InvokeAsync("applyCanadianAdjustments", New Object() {ds, sFrequencyCode, iMileage, sProvince, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, dHistoricalDate}, Me.applyCanadianAdjustmentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnapplyCanadianAdjustmentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.applyCanadianAdjustmentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent applyCanadianAdjustmentsCompleted(Me, New applyCanadianAdjustmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="applyCanadianAdjustments1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/ApplyCanadaCurrentAdjustments", RequestElementName:="ApplyCanadaCurrentAdjustments", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="ApplyCanadaCurrentAdjustmentsResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function applyCanadianAdjustments( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer) As <System.Xml.Serialization.XmlElementAttribute("ApplyCanadaCurrentAdjustmentsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("applyCanadianAdjustments1", New Object() {ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginapplyCanadianAdjustments1( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("applyCanadianAdjustments1", New Object() {ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndapplyCanadianAdjustments1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub applyCanadianAdjustments1Async( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer)
            Me.applyCanadianAdjustments1Async(ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub applyCanadianAdjustments1Async( _
                    ByVal ds As System.Data.DataSet,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal i12MonthResidualAdj As Integer,  _
                    ByVal i24MonthResidualAdj As Integer,  _
                    ByVal i30MonthResidualAdj As Integer,  _
                    ByVal i36MonthResidualAdj As Integer,  _
                    ByVal i42MonthResidualAdj As Integer,  _
                    ByVal i48MonthResidualAdj As Integer,  _
                    ByVal i60MonthResidualAdj As Integer,  _
                    ByVal i72MonthResidualAdj As Integer,  _
                    ByVal userState As Object)
            If (Me.applyCanadianAdjustments1OperationCompleted Is Nothing) Then
                Me.applyCanadianAdjustments1OperationCompleted = AddressOf Me.OnapplyCanadianAdjustments1OperationCompleted
            End If
            Me.InvokeAsync("applyCanadianAdjustments1", New Object() {ds, sFrequencyCode, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, i12MonthResidualAdj, i24MonthResidualAdj, i30MonthResidualAdj, i36MonthResidualAdj, i42MonthResidualAdj, i48MonthResidualAdj, i60MonthResidualAdj, i72MonthResidualAdj}, Me.applyCanadianAdjustments1OperationCompleted, userState)
        End Sub
        
        Private Sub OnapplyCanadianAdjustments1OperationCompleted(ByVal arg As Object)
            If (Not (Me.applyCanadianAdjustments1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent applyCanadianAdjustments1Completed(Me, New applyCanadianAdjustments1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalValues", RequestElementName:="HistoricalValues", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="HistoricalValuesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getValues( _
                    ByVal sCountryCode As String,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal sYear As String,  _
                    ByVal sMake As String,  _
                    ByVal sModel As String,  _
                    ByVal sSeries As String,  _
                    ByVal sStyle As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal bFillDrilldown As Boolean,  _
                    ByVal bReturnMileage As Boolean,  _
                    ByVal bReturnAddDeducts As Boolean,  _
                    ByVal dHistoricalDate As Date) As <System.Xml.Serialization.XmlElementAttribute("HistoricalValuesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getValues", New Object() {sCountryCode, sFrequencyCode, sYear, sMake, sModel, sSeries, sStyle, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetValues( _
                    ByVal sCountryCode As String,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal sYear As String,  _
                    ByVal sMake As String,  _
                    ByVal sModel As String,  _
                    ByVal sSeries As String,  _
                    ByVal sStyle As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal bFillDrilldown As Boolean,  _
                    ByVal bReturnMileage As Boolean,  _
                    ByVal bReturnAddDeducts As Boolean,  _
                    ByVal dHistoricalDate As Date,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getValues", New Object() {sCountryCode, sFrequencyCode, sYear, sMake, sModel, sSeries, sStyle, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetValues(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getValuesAsync( _
                    ByVal sCountryCode As String,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal sYear As String,  _
                    ByVal sMake As String,  _
                    ByVal sModel As String,  _
                    ByVal sSeries As String,  _
                    ByVal sStyle As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal bFillDrilldown As Boolean,  _
                    ByVal bReturnMileage As Boolean,  _
                    ByVal bReturnAddDeducts As Boolean,  _
                    ByVal dHistoricalDate As Date)
            Me.getValuesAsync(sCountryCode, sFrequencyCode, sYear, sMake, sModel, sSeries, sStyle, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getValuesAsync( _
                    ByVal sCountryCode As String,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal sYear As String,  _
                    ByVal sMake As String,  _
                    ByVal sModel As String,  _
                    ByVal sSeries As String,  _
                    ByVal sStyle As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal bFillDrilldown As Boolean,  _
                    ByVal bReturnMileage As Boolean,  _
                    ByVal bReturnAddDeducts As Boolean,  _
                    ByVal dHistoricalDate As Date,  _
                    ByVal userState As Object)
            If (Me.getValuesOperationCompleted Is Nothing) Then
                Me.getValuesOperationCompleted = AddressOf Me.OngetValuesOperationCompleted
            End If
            Me.InvokeAsync("getValues", New Object() {sCountryCode, sFrequencyCode, sYear, sMake, sModel, sSeries, sStyle, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate}, Me.getValuesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetValuesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getValuesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getValuesCompleted(Me, New getValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="getValues1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentValues", RequestElementName:="CurrentValues", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="CurrentValuesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getValues( _
                    ByVal sCountryCode As String,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal sYear As String,  _
                    ByVal sMake As String,  _
                    ByVal sModel As String,  _
                    ByVal sSeries As String,  _
                    ByVal sStyle As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal bFillDrilldown As Boolean,  _
                    ByVal bReturnMileage As Boolean,  _
                    ByVal bReturnAddDeducts As Boolean) As <System.Xml.Serialization.XmlElementAttribute("CurrentValuesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getValues1", New Object() {sCountryCode, sFrequencyCode, sYear, sMake, sModel, sSeries, sStyle, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetValues1( _
                    ByVal sCountryCode As String,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal sYear As String,  _
                    ByVal sMake As String,  _
                    ByVal sModel As String,  _
                    ByVal sSeries As String,  _
                    ByVal sStyle As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal bFillDrilldown As Boolean,  _
                    ByVal bReturnMileage As Boolean,  _
                    ByVal bReturnAddDeducts As Boolean,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getValues1", New Object() {sCountryCode, sFrequencyCode, sYear, sMake, sModel, sSeries, sStyle, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetValues1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getValues1Async( _
                    ByVal sCountryCode As String,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal sYear As String,  _
                    ByVal sMake As String,  _
                    ByVal sModel As String,  _
                    ByVal sSeries As String,  _
                    ByVal sStyle As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal bFillDrilldown As Boolean,  _
                    ByVal bReturnMileage As Boolean,  _
                    ByVal bReturnAddDeducts As Boolean)
            Me.getValues1Async(sCountryCode, sFrequencyCode, sYear, sMake, sModel, sSeries, sStyle, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getValues1Async( _
                    ByVal sCountryCode As String,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal sYear As String,  _
                    ByVal sMake As String,  _
                    ByVal sModel As String,  _
                    ByVal sSeries As String,  _
                    ByVal sStyle As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal bFillDrilldown As Boolean,  _
                    ByVal bReturnMileage As Boolean,  _
                    ByVal bReturnAddDeducts As Boolean,  _
                    ByVal userState As Object)
            If (Me.getValues1OperationCompleted Is Nothing) Then
                Me.getValues1OperationCompleted = AddressOf Me.OngetValues1OperationCompleted
            End If
            Me.InvokeAsync("getValues1", New Object() {sCountryCode, sFrequencyCode, sYear, sMake, sModel, sSeries, sStyle, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts}, Me.getValues1OperationCompleted, userState)
        End Sub
        
        Private Sub OngetValues1OperationCompleted(ByVal arg As Object)
            If (Not (Me.getValues1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getValues1Completed(Me, New getValues1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentVINUVCValues", RequestElementName:="CurrentVINUVCValues", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="CurrentVINUVCValuesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getVINValues(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal sUVC As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean) As <System.Xml.Serialization.XmlElementAttribute("CurrentVINUVCValuesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getVINValues", New Object() {sCountryCode, sFrequencyCode, sVIN, sUVC, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetVINValues(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal sUVC As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getVINValues", New Object() {sCountryCode, sFrequencyCode, sVIN, sUVC, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetVINValues(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getVINValuesAsync(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal sUVC As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean)
            Me.getVINValuesAsync(sCountryCode, sFrequencyCode, sVIN, sUVC, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getVINValuesAsync(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal sUVC As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean, ByVal userState As Object)
            If (Me.getVINValuesOperationCompleted Is Nothing) Then
                Me.getVINValuesOperationCompleted = AddressOf Me.OngetVINValuesOperationCompleted
            End If
            Me.InvokeAsync("getVINValues", New Object() {sCountryCode, sFrequencyCode, sVIN, sUVC, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts}, Me.getVINValuesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetVINValuesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getVINValuesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getVINValuesCompleted(Me, New getVINValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="getVINValues1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalVINValues", RequestElementName:="HistoricalVINValues", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="HistoricalVINValuesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getVINValues(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean, ByVal dHistoricalDate As Date) As <System.Xml.Serialization.XmlElementAttribute("HistoricalVINValuesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getVINValues1", New Object() {sCountryCode, sFrequencyCode, sVIN, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetVINValues1(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean, ByVal dHistoricalDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getVINValues1", New Object() {sCountryCode, sFrequencyCode, sVIN, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetVINValues1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getVINValues1Async(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean, ByVal dHistoricalDate As Date)
            Me.getVINValues1Async(sCountryCode, sFrequencyCode, sVIN, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getVINValues1Async(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean, ByVal dHistoricalDate As Date, ByVal userState As Object)
            If (Me.getVINValues1OperationCompleted Is Nothing) Then
                Me.getVINValues1OperationCompleted = AddressOf Me.OngetVINValues1OperationCompleted
            End If
            Me.InvokeAsync("getVINValues1", New Object() {sCountryCode, sFrequencyCode, sVIN, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate}, Me.getVINValues1OperationCompleted, userState)
        End Sub
        
        Private Sub OngetVINValues1OperationCompleted(ByVal arg As Object)
            If (Not (Me.getVINValues1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getVINValues1Completed(Me, New getVINValues1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="getVINValues2"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalVINUVCValues", RequestElementName:="HistoricalVINUVCValues", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="HistoricalVINUVCValuesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getVINValues(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal sUVC As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean, ByVal dHistoricalDate As Date) As <System.Xml.Serialization.XmlElementAttribute("HistoricalVINUVCValuesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getVINValues2", New Object() {sCountryCode, sFrequencyCode, sVIN, sUVC, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetVINValues2( _
                    ByVal sCountryCode As String,  _
                    ByVal sFrequencyCode As String,  _
                    ByVal sVIN As String,  _
                    ByVal sUVC As String,  _
                    ByVal iMileage As Integer,  _
                    ByVal sState As String,  _
                    ByVal iExtraCleanAddDeductAdj As Integer,  _
                    ByVal iCleanAddDeductAdj As Integer,  _
                    ByVal iAverageAddDeductAdj As Integer,  _
                    ByVal iRoughAddDeductAdj As Integer,  _
                    ByVal bFillDrilldown As Boolean,  _
                    ByVal bReturnMileage As Boolean,  _
                    ByVal bReturnAddDeducts As Boolean,  _
                    ByVal dHistoricalDate As Date,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getVINValues2", New Object() {sCountryCode, sFrequencyCode, sVIN, sUVC, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetVINValues2(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getVINValues2Async(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal sUVC As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean, ByVal dHistoricalDate As Date)
            Me.getVINValues2Async(sCountryCode, sFrequencyCode, sVIN, sUVC, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getVINValues2Async(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal sUVC As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean, ByVal dHistoricalDate As Date, ByVal userState As Object)
            If (Me.getVINValues2OperationCompleted Is Nothing) Then
                Me.getVINValues2OperationCompleted = AddressOf Me.OngetVINValues2OperationCompleted
            End If
            Me.InvokeAsync("getVINValues2", New Object() {sCountryCode, sFrequencyCode, sVIN, sUVC, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, dHistoricalDate}, Me.getVINValues2OperationCompleted, userState)
        End Sub
        
        Private Sub OngetVINValues2OperationCompleted(ByVal arg As Object)
            If (Not (Me.getVINValues2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getVINValues2Completed(Me, New getVINValues2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="getVINValues3"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentVINValues", RequestElementName:="CurrentVINValues", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="CurrentVINValuesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getVINValues(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean) As <System.Xml.Serialization.XmlElementAttribute("CurrentVINValuesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getVINValues3", New Object() {sCountryCode, sFrequencyCode, sVIN, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetVINValues3(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getVINValues3", New Object() {sCountryCode, sFrequencyCode, sVIN, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetVINValues3(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getVINValues3Async(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean)
            Me.getVINValues3Async(sCountryCode, sFrequencyCode, sVIN, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getVINValues3Async(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVIN As String, ByVal iMileage As Integer, ByVal sState As String, ByVal iExtraCleanAddDeductAdj As Integer, ByVal iCleanAddDeductAdj As Integer, ByVal iAverageAddDeductAdj As Integer, ByVal iRoughAddDeductAdj As Integer, ByVal bFillDrilldown As Boolean, ByVal bReturnMileage As Boolean, ByVal bReturnAddDeducts As Boolean, ByVal userState As Object)
            If (Me.getVINValues3OperationCompleted Is Nothing) Then
                Me.getVINValues3OperationCompleted = AddressOf Me.OngetVINValues3OperationCompleted
            End If
            Me.InvokeAsync("getVINValues3", New Object() {sCountryCode, sFrequencyCode, sVIN, iMileage, sState, iExtraCleanAddDeductAdj, iCleanAddDeductAdj, iAverageAddDeductAdj, iRoughAddDeductAdj, bFillDrilldown, bReturnMileage, bReturnAddDeducts}, Me.getVINValues3OperationCompleted, userState)
        End Sub
        
        Private Sub OngetVINValues3OperationCompleted(ByVal arg As Object)
            If (Not (Me.getVINValues3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getVINValues3Completed(Me, New getVINValues3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalMileage", RequestElementName:="HistoricalMileage", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="HistoricalMileageResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getMileage(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer, ByVal dHistoricalDate As Date) As <System.Xml.Serialization.XmlElementAttribute("HistoricalMileageResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getMileage", New Object() {sFrequencyCode, sVINYear, sMileageCategory, iMileage, dHistoricalDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetMileage(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer, ByVal dHistoricalDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getMileage", New Object() {sFrequencyCode, sVINYear, sMileageCategory, iMileage, dHistoricalDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetMileage(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getMileageAsync(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer, ByVal dHistoricalDate As Date)
            Me.getMileageAsync(sFrequencyCode, sVINYear, sMileageCategory, iMileage, dHistoricalDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getMileageAsync(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer, ByVal dHistoricalDate As Date, ByVal userState As Object)
            If (Me.getMileageOperationCompleted Is Nothing) Then
                Me.getMileageOperationCompleted = AddressOf Me.OngetMileageOperationCompleted
            End If
            Me.InvokeAsync("getMileage", New Object() {sFrequencyCode, sVINYear, sMileageCategory, iMileage, dHistoricalDate}, Me.getMileageOperationCompleted, userState)
        End Sub
        
        Private Sub OngetMileageOperationCompleted(ByVal arg As Object)
            If (Not (Me.getMileageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getMileageCompleted(Me, New getMileageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalCanadianMileage", RequestElementName:="HistoricalCanadianMileage", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="HistoricalCanadianMileageResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getCanadianMileage(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer, ByVal dHistoricalDate As Date) As <System.Xml.Serialization.XmlElementAttribute("HistoricalCanadianMileageResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getCanadianMileage", New Object() {sFrequencyCode, sVINYear, sMileageCategory, iMileage, dHistoricalDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetCanadianMileage(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer, ByVal dHistoricalDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getCanadianMileage", New Object() {sFrequencyCode, sVINYear, sMileageCategory, iMileage, dHistoricalDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetCanadianMileage(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCanadianMileageAsync(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer, ByVal dHistoricalDate As Date)
            Me.getCanadianMileageAsync(sFrequencyCode, sVINYear, sMileageCategory, iMileage, dHistoricalDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCanadianMileageAsync(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer, ByVal dHistoricalDate As Date, ByVal userState As Object)
            If (Me.getCanadianMileageOperationCompleted Is Nothing) Then
                Me.getCanadianMileageOperationCompleted = AddressOf Me.OngetCanadianMileageOperationCompleted
            End If
            Me.InvokeAsync("getCanadianMileage", New Object() {sFrequencyCode, sVINYear, sMileageCategory, iMileage, dHistoricalDate}, Me.getCanadianMileageOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCanadianMileageOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCanadianMileageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCanadianMileageCompleted(Me, New getCanadianMileageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="getCanadianMileage1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentCanadianMileage", RequestElementName:="CurrentCanadianMileage", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="CurrentCanadianMileageResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getCanadianMileage(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer) As <System.Xml.Serialization.XmlElementAttribute("CurrentCanadianMileageResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getCanadianMileage1", New Object() {sFrequencyCode, sVINYear, sMileageCategory, iMileage})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetCanadianMileage1(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getCanadianMileage1", New Object() {sFrequencyCode, sVINYear, sMileageCategory, iMileage}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetCanadianMileage1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCanadianMileage1Async(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer)
            Me.getCanadianMileage1Async(sFrequencyCode, sVINYear, sMileageCategory, iMileage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCanadianMileage1Async(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer, ByVal userState As Object)
            If (Me.getCanadianMileage1OperationCompleted Is Nothing) Then
                Me.getCanadianMileage1OperationCompleted = AddressOf Me.OngetCanadianMileage1OperationCompleted
            End If
            Me.InvokeAsync("getCanadianMileage1", New Object() {sFrequencyCode, sVINYear, sMileageCategory, iMileage}, Me.getCanadianMileage1OperationCompleted, userState)
        End Sub
        
        Private Sub OngetCanadianMileage1OperationCompleted(ByVal arg As Object)
            If (Not (Me.getCanadianMileage1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCanadianMileage1Completed(Me, New getCanadianMileage1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="getMileage1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentMileage", RequestElementName:="CurrentMileage", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="CurrentMileageResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getMileage(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer) As <System.Xml.Serialization.XmlElementAttribute("CurrentMileageResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getMileage1", New Object() {sFrequencyCode, sVINYear, sMileageCategory, iMileage})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetMileage1(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getMileage1", New Object() {sFrequencyCode, sVINYear, sMileageCategory, iMileage}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetMileage1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getMileage1Async(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer)
            Me.getMileage1Async(sFrequencyCode, sVINYear, sMileageCategory, iMileage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getMileage1Async(ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sMileageCategory As String, ByVal iMileage As Integer, ByVal userState As Object)
            If (Me.getMileage1OperationCompleted Is Nothing) Then
                Me.getMileage1OperationCompleted = AddressOf Me.OngetMileage1OperationCompleted
            End If
            Me.InvokeAsync("getMileage1", New Object() {sFrequencyCode, sVINYear, sMileageCategory, iMileage}, Me.getMileage1OperationCompleted, userState)
        End Sub
        
        Private Sub OngetMileage1OperationCompleted(ByVal arg As Object)
            If (Not (Me.getMileage1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getMileage1Completed(Me, New getMileage1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalAddDeducts", RequestElementName:="HistoricalAddDeducts", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="HistoricalAddDeductsResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getAddDeducts(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal sVIN As String, ByVal dHistoricalDate As Date) As <System.Xml.Serialization.XmlElementAttribute("HistoricalAddDeductsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getAddDeducts", New Object() {sCountryCode, sFrequencyCode, sVINYear, sGroupNumber, sVIN, dHistoricalDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetAddDeducts(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal sVIN As String, ByVal dHistoricalDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getAddDeducts", New Object() {sCountryCode, sFrequencyCode, sVINYear, sGroupNumber, sVIN, dHistoricalDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetAddDeducts(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAddDeductsAsync(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal sVIN As String, ByVal dHistoricalDate As Date)
            Me.getAddDeductsAsync(sCountryCode, sFrequencyCode, sVINYear, sGroupNumber, sVIN, dHistoricalDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAddDeductsAsync(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal sVIN As String, ByVal dHistoricalDate As Date, ByVal userState As Object)
            If (Me.getAddDeductsOperationCompleted Is Nothing) Then
                Me.getAddDeductsOperationCompleted = AddressOf Me.OngetAddDeductsOperationCompleted
            End If
            Me.InvokeAsync("getAddDeducts", New Object() {sCountryCode, sFrequencyCode, sVINYear, sGroupNumber, sVIN, dHistoricalDate}, Me.getAddDeductsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAddDeductsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAddDeductsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAddDeductsCompleted(Me, New getAddDeductsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="getAddDeducts1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/CurrentAddDeducts", RequestElementName:="CurrentAddDeducts", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="CurrentAddDeductsResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getAddDeducts(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal sVIN As String) As <System.Xml.Serialization.XmlElementAttribute("CurrentAddDeductsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getAddDeducts1", New Object() {sCountryCode, sFrequencyCode, sVINYear, sGroupNumber, sVIN})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetAddDeducts1(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal sVIN As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getAddDeducts1", New Object() {sCountryCode, sFrequencyCode, sVINYear, sGroupNumber, sVIN}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetAddDeducts1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAddDeducts1Async(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal sVIN As String)
            Me.getAddDeducts1Async(sCountryCode, sFrequencyCode, sVINYear, sGroupNumber, sVIN, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAddDeducts1Async(ByVal sCountryCode As String, ByVal sFrequencyCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal sVIN As String, ByVal userState As Object)
            If (Me.getAddDeducts1OperationCompleted Is Nothing) Then
                Me.getAddDeducts1OperationCompleted = AddressOf Me.OngetAddDeducts1OperationCompleted
            End If
            Me.InvokeAsync("getAddDeducts1", New Object() {sCountryCode, sFrequencyCode, sVINYear, sGroupNumber, sVIN}, Me.getAddDeducts1OperationCompleted, userState)
        End Sub
        
        Private Sub OngetAddDeducts1OperationCompleted(ByVal arg As Object)
            If (Not (Me.getAddDeducts1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAddDeducts1Completed(Me, New getAddDeducts1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/SingleState", RequestElementName:="SingleState", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="SingleStateResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getSingleState(ByVal sState As String) As <System.Xml.Serialization.XmlElementAttribute("SingleStateResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getSingleState", New Object() {sState})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetSingleState(ByVal sState As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getSingleState", New Object() {sState}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetSingleState(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getSingleStateAsync(ByVal sState As String)
            Me.getSingleStateAsync(sState, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getSingleStateAsync(ByVal sState As String, ByVal userState As Object)
            If (Me.getSingleStateOperationCompleted Is Nothing) Then
                Me.getSingleStateOperationCompleted = AddressOf Me.OngetSingleStateOperationCompleted
            End If
            Me.InvokeAsync("getSingleState", New Object() {sState}, Me.getSingleStateOperationCompleted, userState)
        End Sub
        
        Private Sub OngetSingleStateOperationCompleted(ByVal arg As Object)
            If (Not (Me.getSingleStateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getSingleStateCompleted(Me, New getSingleStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/AllStates", RequestElementName:="AllStates", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="AllStatesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAllStates() As <System.Xml.Serialization.XmlElementAttribute("AllStatesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getAllStates", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetAllStates(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getAllStates", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetAllStates(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAllStatesAsync()
            Me.getAllStatesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAllStatesAsync(ByVal userState As Object)
            If (Me.getAllStatesOperationCompleted Is Nothing) Then
                Me.getAllStatesOperationCompleted = AddressOf Me.OngetAllStatesOperationCompleted
            End If
            Me.InvokeAsync("getAllStates", New Object(-1) {}, Me.getAllStatesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAllStatesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAllStatesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAllStatesCompleted(Me, New getAllStatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/SingleProvince", RequestElementName:="SingleProvince", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="SingleProvinceResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getSingleProvince(ByVal sProvince As String) As <System.Xml.Serialization.XmlElementAttribute("SingleProvinceResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getSingleProvince", New Object() {sProvince})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetSingleProvince(ByVal sProvince As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getSingleProvince", New Object() {sProvince}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetSingleProvince(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getSingleProvinceAsync(ByVal sProvince As String)
            Me.getSingleProvinceAsync(sProvince, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getSingleProvinceAsync(ByVal sProvince As String, ByVal userState As Object)
            If (Me.getSingleProvinceOperationCompleted Is Nothing) Then
                Me.getSingleProvinceOperationCompleted = AddressOf Me.OngetSingleProvinceOperationCompleted
            End If
            Me.InvokeAsync("getSingleProvince", New Object() {sProvince}, Me.getSingleProvinceOperationCompleted, userState)
        End Sub
        
        Private Sub OngetSingleProvinceOperationCompleted(ByVal arg As Object)
            If (Not (Me.getSingleProvinceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getSingleProvinceCompleted(Me, New getSingleProvinceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/AllProvinces", RequestElementName:="AllProvinces", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="AllProvincesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAllProvinces() As <System.Xml.Serialization.XmlElementAttribute("AllProvincesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getAllProvinces", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetAllProvinces(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getAllProvinces", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetAllProvinces(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAllProvincesAsync()
            Me.getAllProvincesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAllProvincesAsync(ByVal userState As Object)
            If (Me.getAllProvincesOperationCompleted Is Nothing) Then
                Me.getAllProvincesOperationCompleted = AddressOf Me.OngetAllProvincesOperationCompleted
            End If
            Me.InvokeAsync("getAllProvinces", New Object(-1) {}, Me.getAllProvincesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAllProvincesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAllProvincesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAllProvincesCompleted(Me, New getAllProvincesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/HistoricalProvinces", RequestElementName:="HistoricalProvinces", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="HistoricalProvincesResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getHistoricalProvinces(ByVal sDate As Date) As <System.Xml.Serialization.XmlElementAttribute("HistoricalProvincesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getHistoricalProvinces", New Object() {sDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetHistoricalProvinces(ByVal sDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getHistoricalProvinces", New Object() {sDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetHistoricalProvinces(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getHistoricalProvincesAsync(ByVal sDate As Date)
            Me.getHistoricalProvincesAsync(sDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getHistoricalProvincesAsync(ByVal sDate As Date, ByVal userState As Object)
            If (Me.getHistoricalProvincesOperationCompleted Is Nothing) Then
                Me.getHistoricalProvincesOperationCompleted = AddressOf Me.OngetHistoricalProvincesOperationCompleted
            End If
            Me.InvokeAsync("getHistoricalProvinces", New Object() {sDate}, Me.getHistoricalProvincesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetHistoricalProvincesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getHistoricalProvincesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getHistoricalProvincesCompleted(Me, New getHistoricalProvincesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/StandardEquipmentByCategory", RequestElementName:="StandardEquipmentByCategory", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="StandardEquipmentByCategoryResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getStandardEquipment(ByVal sCountryCode As String, ByVal sUVC As String, ByVal sCategory As String) As <System.Xml.Serialization.XmlElementAttribute("StandardEquipmentByCategoryResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getStandardEquipment", New Object() {sCountryCode, sUVC, sCategory})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetStandardEquipment(ByVal sCountryCode As String, ByVal sUVC As String, ByVal sCategory As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getStandardEquipment", New Object() {sCountryCode, sUVC, sCategory}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetStandardEquipment(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getStandardEquipmentAsync(ByVal sCountryCode As String, ByVal sUVC As String, ByVal sCategory As String)
            Me.getStandardEquipmentAsync(sCountryCode, sUVC, sCategory, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getStandardEquipmentAsync(ByVal sCountryCode As String, ByVal sUVC As String, ByVal sCategory As String, ByVal userState As Object)
            If (Me.getStandardEquipmentOperationCompleted Is Nothing) Then
                Me.getStandardEquipmentOperationCompleted = AddressOf Me.OngetStandardEquipmentOperationCompleted
            End If
            Me.InvokeAsync("getStandardEquipment", New Object() {sCountryCode, sUVC, sCategory}, Me.getStandardEquipmentOperationCompleted, userState)
        End Sub
        
        Private Sub OngetStandardEquipmentOperationCompleted(ByVal arg As Object)
            If (Not (Me.getStandardEquipmentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getStandardEquipmentCompleted(Me, New getStandardEquipmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="getStandardEquipment1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/StandardEquipment", RequestElementName:="StandardEquipment", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="StandardEquipmentResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getStandardEquipment(ByVal sCountryCode As String, ByVal sUVC As String) As <System.Xml.Serialization.XmlElementAttribute("StandardEquipmentResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getStandardEquipment1", New Object() {sCountryCode, sUVC})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetStandardEquipment1(ByVal sCountryCode As String, ByVal sUVC As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getStandardEquipment1", New Object() {sCountryCode, sUVC}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetStandardEquipment1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getStandardEquipment1Async(ByVal sCountryCode As String, ByVal sUVC As String)
            Me.getStandardEquipment1Async(sCountryCode, sUVC, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getStandardEquipment1Async(ByVal sCountryCode As String, ByVal sUVC As String, ByVal userState As Object)
            If (Me.getStandardEquipment1OperationCompleted Is Nothing) Then
                Me.getStandardEquipment1OperationCompleted = AddressOf Me.OngetStandardEquipment1OperationCompleted
            End If
            Me.InvokeAsync("getStandardEquipment1", New Object() {sCountryCode, sUVC}, Me.getStandardEquipment1OperationCompleted, userState)
        End Sub
        
        Private Sub OngetStandardEquipment1OperationCompleted(ByVal arg As Object)
            If (Not (Me.getStandardEquipment1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getStandardEquipment1Completed(Me, New getStandardEquipment1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/ColorsByCategory", RequestElementName:="ColorsByCategory", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="ColorsByCategoryResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getColors(ByVal sCountryCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal sCategory As String) As <System.Xml.Serialization.XmlElementAttribute("ColorsByCategoryResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getColors", New Object() {sCountryCode, sVINYear, sGroupNumber, sCategory})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetColors(ByVal sCountryCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal sCategory As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getColors", New Object() {sCountryCode, sVINYear, sGroupNumber, sCategory}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetColors(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getColorsAsync(ByVal sCountryCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal sCategory As String)
            Me.getColorsAsync(sCountryCode, sVINYear, sGroupNumber, sCategory, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getColorsAsync(ByVal sCountryCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal sCategory As String, ByVal userState As Object)
            If (Me.getColorsOperationCompleted Is Nothing) Then
                Me.getColorsOperationCompleted = AddressOf Me.OngetColorsOperationCompleted
            End If
            Me.InvokeAsync("getColors", New Object() {sCountryCode, sVINYear, sGroupNumber, sCategory}, Me.getColorsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetColorsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getColorsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getColorsCompleted(Me, New getColorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="getColors1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/Colors", RequestElementName:="Colors", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="ColorsResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getColors(ByVal sCountryCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String) As <System.Xml.Serialization.XmlElementAttribute("ColorsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getColors1", New Object() {sCountryCode, sVINYear, sGroupNumber})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetColors1(ByVal sCountryCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getColors1", New Object() {sCountryCode, sVINYear, sGroupNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetColors1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getColors1Async(ByVal sCountryCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String)
            Me.getColors1Async(sCountryCode, sVINYear, sGroupNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getColors1Async(ByVal sCountryCode As String, ByVal sVINYear As String, ByVal sGroupNumber As String, ByVal userState As Object)
            If (Me.getColors1OperationCompleted Is Nothing) Then
                Me.getColors1OperationCompleted = AddressOf Me.OngetColors1OperationCompleted
            End If
            Me.InvokeAsync("getColors1", New Object() {sCountryCode, sVINYear, sGroupNumber}, Me.getColors1OperationCompleted, userState)
        End Sub
        
        Private Sub OngetColors1OperationCompleted(ByVal arg As Object)
            If (Not (Me.getColors1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getColors1Completed(Me, New getColors1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/Photo", RequestElementName:="Photo", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="PhotoResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPhoto(ByVal sCountryCode As String, ByVal sUVC As String) As <System.Xml.Serialization.XmlElementAttribute("PhotoResult", DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("getPhoto", New Object() {sCountryCode, sUVC})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Function BegingetPhoto(ByVal sCountryCode As String, ByVal sUVC As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getPhoto", New Object() {sCountryCode, sUVC}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetPhoto(ByVal asyncResult As System.IAsyncResult) As Byte()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPhotoAsync(ByVal sCountryCode As String, ByVal sUVC As String)
            Me.getPhotoAsync(sCountryCode, sUVC, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPhotoAsync(ByVal sCountryCode As String, ByVal sUVC As String, ByVal userState As Object)
            If (Me.getPhotoOperationCompleted Is Nothing) Then
                Me.getPhotoOperationCompleted = AddressOf Me.OngetPhotoOperationCompleted
            End If
            Me.InvokeAsync("getPhoto", New Object() {sCountryCode, sUVC}, Me.getPhotoOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPhotoOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPhotoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPhotoCompleted(Me, New getPhotoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/PDF", RequestElementName:="PDF", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="PDFResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPDFSpec(ByVal sCountryCode As String, ByVal sUVC As String) As <System.Xml.Serialization.XmlElementAttribute("PDFResult", DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("getPDFSpec", New Object() {sCountryCode, sUVC})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Function BegingetPDFSpec(ByVal sCountryCode As String, ByVal sUVC As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getPDFSpec", New Object() {sCountryCode, sUVC}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetPDFSpec(ByVal asyncResult As System.IAsyncResult) As Byte()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPDFSpecAsync(ByVal sCountryCode As String, ByVal sUVC As String)
            Me.getPDFSpecAsync(sCountryCode, sUVC, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPDFSpecAsync(ByVal sCountryCode As String, ByVal sUVC As String, ByVal userState As Object)
            If (Me.getPDFSpecOperationCompleted Is Nothing) Then
                Me.getPDFSpecOperationCompleted = AddressOf Me.OngetPDFSpecOperationCompleted
            End If
            Me.InvokeAsync("getPDFSpec", New Object() {sCountryCode, sUVC}, Me.getPDFSpecOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPDFSpecOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPDFSpecCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPDFSpecCompleted(Me, New getPDFSpecCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/TrendAnalysis", RequestElementName:="TrendAnalysis", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="TrendAnalysisResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getTrendAnalysisValues(ByVal sCountryCode As String, ByVal sUVC As String, ByVal sAnnualOrMonthly As String, ByVal dStartDate As Date, ByVal dEndDate As Date) As <System.Xml.Serialization.XmlElementAttribute("TrendAnalysisResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getTrendAnalysisValues", New Object() {sCountryCode, sUVC, sAnnualOrMonthly, dStartDate, dEndDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetTrendAnalysisValues(ByVal sCountryCode As String, ByVal sUVC As String, ByVal sAnnualOrMonthly As String, ByVal dStartDate As Date, ByVal dEndDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getTrendAnalysisValues", New Object() {sCountryCode, sUVC, sAnnualOrMonthly, dStartDate, dEndDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetTrendAnalysisValues(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getTrendAnalysisValuesAsync(ByVal sCountryCode As String, ByVal sUVC As String, ByVal sAnnualOrMonthly As String, ByVal dStartDate As Date, ByVal dEndDate As Date)
            Me.getTrendAnalysisValuesAsync(sCountryCode, sUVC, sAnnualOrMonthly, dStartDate, dEndDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getTrendAnalysisValuesAsync(ByVal sCountryCode As String, ByVal sUVC As String, ByVal sAnnualOrMonthly As String, ByVal dStartDate As Date, ByVal dEndDate As Date, ByVal userState As Object)
            If (Me.getTrendAnalysisValuesOperationCompleted Is Nothing) Then
                Me.getTrendAnalysisValuesOperationCompleted = AddressOf Me.OngetTrendAnalysisValuesOperationCompleted
            End If
            Me.InvokeAsync("getTrendAnalysisValues", New Object() {sCountryCode, sUVC, sAnnualOrMonthly, dStartDate, dEndDate}, Me.getTrendAnalysisValuesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetTrendAnalysisValuesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getTrendAnalysisValuesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getTrendAnalysisValuesCompleted(Me, New getTrendAnalysisValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/VehicleClassifications", RequestElementName:="VehicleClassifications", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="VehicleClassificationsResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getVehicleClasses() As <System.Xml.Serialization.XmlElementAttribute("VehicleClassificationsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getVehicleClasses", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetVehicleClasses(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getVehicleClasses", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetVehicleClasses(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getVehicleClassesAsync()
            Me.getVehicleClassesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getVehicleClassesAsync(ByVal userState As Object)
            If (Me.getVehicleClassesOperationCompleted Is Nothing) Then
                Me.getVehicleClassesOperationCompleted = AddressOf Me.OngetVehicleClassesOperationCompleted
            End If
            Me.InvokeAsync("getVehicleClasses", New Object(-1) {}, Me.getVehicleClassesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetVehicleClassesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getVehicleClassesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getVehicleClassesCompleted(Me, New getVehicleClassesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="UsedCarWSSoap", [Namespace]:="http://localhost/webservices/UsedCarWS")>  _
    Partial Public Class UsedCarWSSoap
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private getIPAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_BlackBook_UsedCar_UsedCarWS
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event getIPAddressCompleted As getIPAddressCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://localhost/webservices/UsedCarWS/IPAddress", RequestElementName:="IPAddress", RequestNamespace:="http://localhost/webservices/UsedCarWS", ResponseElementName:="IPAddressResponse", ResponseNamespace:="http://localhost/webservices/UsedCarWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getIPAddress() As <System.Xml.Serialization.XmlElementAttribute("IPAddressResult")> String
            Dim results() As Object = Me.Invoke("getIPAddress", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BegingetIPAddress(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getIPAddress", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetIPAddress(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getIPAddressAsync()
            Me.getIPAddressAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getIPAddressAsync(ByVal userState As Object)
            If (Me.getIPAddressOperationCompleted Is Nothing) Then
                Me.getIPAddressOperationCompleted = AddressOf Me.OngetIPAddressOperationCompleted
            End If
            Me.InvokeAsync("getIPAddress", New Object(-1) {}, Me.getIPAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OngetIPAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.getIPAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getIPAddressCompleted(Me, New getIPAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://localhost/webservices/UsedCarWS"),  _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="http://localhost/webservices/UsedCarWS", IsNullable:=false)>  _
    Partial Public Class UserCredentials
        Inherits System.Web.Services.Protocols.SoapHeader
        
        Private useridField As String
        
        Private passwordField As String
        
        Private customerField As String
        
        Private producttypeField As String
        
        Private returncodeField As Integer
        
        Private returnmessageField As String
        
        Private anyAttrField() As System.Xml.XmlAttribute
        
        '''<remarks/>
        Public Property userid() As String
            Get
                Return Me.useridField
            End Get
            Set
                Me.useridField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property password() As String
            Get
                Return Me.passwordField
            End Get
            Set
                Me.passwordField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customer() As String
            Get
                Return Me.customerField
            End Get
            Set
                Me.customerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property producttype() As String
            Get
                Return Me.producttypeField
            End Get
            Set
                Me.producttypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property returncode() As Integer
            Get
                Return Me.returncodeField
            End Get
            Set
                Me.returncodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property returnmessage() As String
            Get
                Return Me.returnmessageField
            End Get
            Set
                Me.returnmessageField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyAttributeAttribute()>  _
        Public Property AnyAttr() As System.Xml.XmlAttribute()
            Get
                Return Me.anyAttrField
            End Get
            Set
                Me.anyAttrField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getYearsCompletedEventHandler(ByVal sender As Object, ByVal e As getYearsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getYearsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getMakesCompletedEventHandler(ByVal sender As Object, ByVal e As getMakesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getMakesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getModelsCompletedEventHandler(ByVal sender As Object, ByVal e As getModelsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getModelsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getSeriesCompletedEventHandler(ByVal sender As Object, ByVal e As getSeriesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getSeriesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getStylesCompletedEventHandler(ByVal sender As Object, ByVal e As getStylesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getStylesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub applyUSAdjustmentsCompletedEventHandler(ByVal sender As Object, ByVal e As applyUSAdjustmentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class applyUSAdjustmentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub applyUSAdjustments1CompletedEventHandler(ByVal sender As Object, ByVal e As applyUSAdjustments1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class applyUSAdjustments1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub applyCanadianAdjustmentsCompletedEventHandler(ByVal sender As Object, ByVal e As applyCanadianAdjustmentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class applyCanadianAdjustmentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub applyCanadianAdjustments1CompletedEventHandler(ByVal sender As Object, ByVal e As applyCanadianAdjustments1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class applyCanadianAdjustments1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getValuesCompletedEventHandler(ByVal sender As Object, ByVal e As getValuesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getValuesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getValues1CompletedEventHandler(ByVal sender As Object, ByVal e As getValues1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getValues1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getVINValuesCompletedEventHandler(ByVal sender As Object, ByVal e As getVINValuesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getVINValuesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getVINValues1CompletedEventHandler(ByVal sender As Object, ByVal e As getVINValues1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getVINValues1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getVINValues2CompletedEventHandler(ByVal sender As Object, ByVal e As getVINValues2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getVINValues2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getVINValues3CompletedEventHandler(ByVal sender As Object, ByVal e As getVINValues3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getVINValues3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getMileageCompletedEventHandler(ByVal sender As Object, ByVal e As getMileageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getMileageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getCanadianMileageCompletedEventHandler(ByVal sender As Object, ByVal e As getCanadianMileageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCanadianMileageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getCanadianMileage1CompletedEventHandler(ByVal sender As Object, ByVal e As getCanadianMileage1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCanadianMileage1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getMileage1CompletedEventHandler(ByVal sender As Object, ByVal e As getMileage1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getMileage1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getAddDeductsCompletedEventHandler(ByVal sender As Object, ByVal e As getAddDeductsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAddDeductsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getAddDeducts1CompletedEventHandler(ByVal sender As Object, ByVal e As getAddDeducts1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAddDeducts1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getSingleStateCompletedEventHandler(ByVal sender As Object, ByVal e As getSingleStateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getSingleStateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getAllStatesCompletedEventHandler(ByVal sender As Object, ByVal e As getAllStatesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAllStatesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getSingleProvinceCompletedEventHandler(ByVal sender As Object, ByVal e As getSingleProvinceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getSingleProvinceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getAllProvincesCompletedEventHandler(ByVal sender As Object, ByVal e As getAllProvincesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAllProvincesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getHistoricalProvincesCompletedEventHandler(ByVal sender As Object, ByVal e As getHistoricalProvincesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getHistoricalProvincesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getStandardEquipmentCompletedEventHandler(ByVal sender As Object, ByVal e As getStandardEquipmentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getStandardEquipmentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getStandardEquipment1CompletedEventHandler(ByVal sender As Object, ByVal e As getStandardEquipment1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getStandardEquipment1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getColorsCompletedEventHandler(ByVal sender As Object, ByVal e As getColorsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getColorsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getColors1CompletedEventHandler(ByVal sender As Object, ByVal e As getColors1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getColors1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getPhotoCompletedEventHandler(ByVal sender As Object, ByVal e As getPhotoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getPhotoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getPDFSpecCompletedEventHandler(ByVal sender As Object, ByVal e As getPDFSpecCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getPDFSpecCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getTrendAnalysisValuesCompletedEventHandler(ByVal sender As Object, ByVal e As getTrendAnalysisValuesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getTrendAnalysisValuesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getVehicleClassesCompletedEventHandler(ByVal sender As Object, ByVal e As getVehicleClassesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getVehicleClassesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getIPAddressCompletedEventHandler(ByVal sender As Object, ByVal e As getIPAddressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getIPAddressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
