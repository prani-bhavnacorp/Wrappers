'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3615
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3615.
'
Namespace LendersOffice.Loan
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="LoanSoap", [Namespace]:="http://www.lendersoffice.com/los/webservices/")>  _
    Partial Public Class LoanWse
        Inherits Microsoft.Web.Services3.WebServicesClientProtocol
        
        Private LoadOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadPDFDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsLoanExistedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RetrieveCustomReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrepareLoanForResubmissionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateWithFannieMaeFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateWithCalyxPointFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ListModifiedLoansOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ClearModifiedLoansListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ClearModifiedLoanByNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadMismo21OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveMismo21OperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadMismo23OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveMismo23OperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadMismo23ByLoanNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPdfByLoanNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadFannieMaeFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadCalyxPointFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadLONXmlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RunQuickPricerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_LendersOffice_Loan_Loan
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event LoadCompleted As LoadCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadPDFDocumentCompleted As UploadPDFDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveCompleted As SaveCompletedEventHandler
        
        '''<remarks/>
        Public Event IsLoanExistedCompleted As IsLoanExistedCompletedEventHandler
        
        '''<remarks/>
        Public Event RetrieveCustomReportCompleted As RetrieveCustomReportCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateCompleted As CreateCompletedEventHandler
        
        '''<remarks/>
        Public Event PrepareLoanForResubmissionCompleted As PrepareLoanForResubmissionCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateWithFannieMaeFileCompleted As CreateWithFannieMaeFileCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateWithCalyxPointFileCompleted As CreateWithCalyxPointFileCompletedEventHandler
        
        '''<remarks/>
        Public Event ListModifiedLoansCompleted As ListModifiedLoansCompletedEventHandler
        
        '''<remarks/>
        Public Event ClearModifiedLoansListCompleted As ClearModifiedLoansListCompletedEventHandler
        
        '''<remarks/>
        Public Event ClearModifiedLoanByNameCompleted As ClearModifiedLoanByNameCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadMismo21Completed As LoadMismo21CompletedEventHandler
        
        '''<remarks/>
        Public Event SaveMismo21Completed As SaveMismo21CompletedEventHandler
        
        '''<remarks/>
        Public Event LoadMismo23Completed As LoadMismo23CompletedEventHandler
        
        '''<remarks/>
        Public Event SaveMismo23Completed As SaveMismo23CompletedEventHandler
        
        '''<remarks/>
        Public Event LoadMismo23ByLoanNameCompleted As LoadMismo23ByLoanNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPdfByLoanNameCompleted As GetPdfByLoanNameCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadFannieMaeFileCompleted As UploadFannieMaeFileCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadCalyxPointFileCompleted As UploadCalyxPointFileCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadLONXmlCompleted As UploadLONXmlCompletedEventHandler
        
        '''<remarks/>
        Public Event RunQuickPricerCompleted As RunQuickPricerCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/Load", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Load(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlQuery As String, ByVal format As Integer) As String
            Dim results() As Object = Me.Invoke("Load", New Object() {sTicket, sLNm, sXmlQuery, format})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlQuery As String, ByVal format As Integer)
            Me.LoadAsync(sTicket, sLNm, sXmlQuery, format, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlQuery As String, ByVal format As Integer, ByVal userState As Object)
            If (Me.LoadOperationCompleted Is Nothing) Then
                Me.LoadOperationCompleted = AddressOf Me.OnLoadOperationCompleted
            End If
            Me.InvokeAsync("Load", New Object() {sTicket, sLNm, sXmlQuery, format}, Me.LoadOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadCompleted(Me, New LoadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/UploadPDFDocument", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadPDFDocument(ByVal sTicket As String, ByVal sLNm As String, ByVal documentType As String, ByVal notes As String, ByVal sDataContent As String) As String
            Dim results() As Object = Me.Invoke("UploadPDFDocument", New Object() {sTicket, sLNm, documentType, notes, sDataContent})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadPDFDocumentAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal documentType As String, ByVal notes As String, ByVal sDataContent As String)
            Me.UploadPDFDocumentAsync(sTicket, sLNm, documentType, notes, sDataContent, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadPDFDocumentAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal documentType As String, ByVal notes As String, ByVal sDataContent As String, ByVal userState As Object)
            If (Me.UploadPDFDocumentOperationCompleted Is Nothing) Then
                Me.UploadPDFDocumentOperationCompleted = AddressOf Me.OnUploadPDFDocumentOperationCompleted
            End If
            Me.InvokeAsync("UploadPDFDocument", New Object() {sTicket, sLNm, documentType, notes, sDataContent}, Me.UploadPDFDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadPDFDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadPDFDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadPDFDocumentCompleted(Me, New UploadPDFDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/Save", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Save(ByVal sTicket As String, ByVal sLNm As String, ByVal sDataContent As String, ByVal format As Integer) As String
            Dim results() As Object = Me.Invoke("Save", New Object() {sTicket, sLNm, sDataContent, format})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sDataContent As String, ByVal format As Integer)
            Me.SaveAsync(sTicket, sLNm, sDataContent, format, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sDataContent As String, ByVal format As Integer, ByVal userState As Object)
            If (Me.SaveOperationCompleted Is Nothing) Then
                Me.SaveOperationCompleted = AddressOf Me.OnSaveOperationCompleted
            End If
            Me.InvokeAsync("Save", New Object() {sTicket, sLNm, sDataContent, format}, Me.SaveOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveCompleted(Me, New SaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/IsLoanExisted", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsLoanExisted(ByVal sTicket As String, ByVal sLNm As String) As Boolean
            Dim results() As Object = Me.Invoke("IsLoanExisted", New Object() {sTicket, sLNm})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsLoanExistedAsync(ByVal sTicket As String, ByVal sLNm As String)
            Me.IsLoanExistedAsync(sTicket, sLNm, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsLoanExistedAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal userState As Object)
            If (Me.IsLoanExistedOperationCompleted Is Nothing) Then
                Me.IsLoanExistedOperationCompleted = AddressOf Me.OnIsLoanExistedOperationCompleted
            End If
            Me.InvokeAsync("IsLoanExisted", New Object() {sTicket, sLNm}, Me.IsLoanExistedOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsLoanExistedOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsLoanExistedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsLoanExistedCompleted(Me, New IsLoanExistedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RetrieveCustomReport", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RetrieveCustomReport(ByVal sTicket As String, ByVal sQueryNm As String, ByVal includeAllWithAccess As Boolean) As String
            Dim results() As Object = Me.Invoke("RetrieveCustomReport", New Object() {sTicket, sQueryNm, includeAllWithAccess})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RetrieveCustomReportAsync(ByVal sTicket As String, ByVal sQueryNm As String, ByVal includeAllWithAccess As Boolean)
            Me.RetrieveCustomReportAsync(sTicket, sQueryNm, includeAllWithAccess, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RetrieveCustomReportAsync(ByVal sTicket As String, ByVal sQueryNm As String, ByVal includeAllWithAccess As Boolean, ByVal userState As Object)
            If (Me.RetrieveCustomReportOperationCompleted Is Nothing) Then
                Me.RetrieveCustomReportOperationCompleted = AddressOf Me.OnRetrieveCustomReportOperationCompleted
            End If
            Me.InvokeAsync("RetrieveCustomReport", New Object() {sTicket, sQueryNm, includeAllWithAccess}, Me.RetrieveCustomReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnRetrieveCustomReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.RetrieveCustomReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RetrieveCustomReportCompleted(Me, New RetrieveCustomReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/Create", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Create(ByVal sTicket As String, ByVal sTemplateNm As String) As String
            Dim results() As Object = Me.Invoke("Create", New Object() {sTicket, sTemplateNm})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateAsync(ByVal sTicket As String, ByVal sTemplateNm As String)
            Me.CreateAsync(sTicket, sTemplateNm, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateAsync(ByVal sTicket As String, ByVal sTemplateNm As String, ByVal userState As Object)
            If (Me.CreateOperationCompleted Is Nothing) Then
                Me.CreateOperationCompleted = AddressOf Me.OnCreateOperationCompleted
            End If
            Me.InvokeAsync("Create", New Object() {sTicket, sTemplateNm}, Me.CreateOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateCompleted(Me, New CreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/PrepareLoanForResubmission", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrepareLoanForResubmission(ByVal sTicket As String, ByVal sLNm As String) As String
            Dim results() As Object = Me.Invoke("PrepareLoanForResubmission", New Object() {sTicket, sLNm})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrepareLoanForResubmissionAsync(ByVal sTicket As String, ByVal sLNm As String)
            Me.PrepareLoanForResubmissionAsync(sTicket, sLNm, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrepareLoanForResubmissionAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal userState As Object)
            If (Me.PrepareLoanForResubmissionOperationCompleted Is Nothing) Then
                Me.PrepareLoanForResubmissionOperationCompleted = AddressOf Me.OnPrepareLoanForResubmissionOperationCompleted
            End If
            Me.InvokeAsync("PrepareLoanForResubmission", New Object() {sTicket, sLNm}, Me.PrepareLoanForResubmissionOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrepareLoanForResubmissionOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrepareLoanForResubmissionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrepareLoanForResubmissionCompleted(Me, New PrepareLoanForResubmissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/CreateWithFannieMaeFile", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateWithFannieMaeFile(ByVal sTicket As String, ByVal content As String) As String
            Dim results() As Object = Me.Invoke("CreateWithFannieMaeFile", New Object() {sTicket, content})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateWithFannieMaeFileAsync(ByVal sTicket As String, ByVal content As String)
            Me.CreateWithFannieMaeFileAsync(sTicket, content, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateWithFannieMaeFileAsync(ByVal sTicket As String, ByVal content As String, ByVal userState As Object)
            If (Me.CreateWithFannieMaeFileOperationCompleted Is Nothing) Then
                Me.CreateWithFannieMaeFileOperationCompleted = AddressOf Me.OnCreateWithFannieMaeFileOperationCompleted
            End If
            Me.InvokeAsync("CreateWithFannieMaeFile", New Object() {sTicket, content}, Me.CreateWithFannieMaeFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateWithFannieMaeFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateWithFannieMaeFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateWithFannieMaeFileCompleted(Me, New CreateWithFannieMaeFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/CreateWithCalyxPointFile", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateWithCalyxPointFile(ByVal sTicket As String, ByVal base64content As String) As String
            Dim results() As Object = Me.Invoke("CreateWithCalyxPointFile", New Object() {sTicket, base64content})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateWithCalyxPointFileAsync(ByVal sTicket As String, ByVal base64content As String)
            Me.CreateWithCalyxPointFileAsync(sTicket, base64content, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateWithCalyxPointFileAsync(ByVal sTicket As String, ByVal base64content As String, ByVal userState As Object)
            If (Me.CreateWithCalyxPointFileOperationCompleted Is Nothing) Then
                Me.CreateWithCalyxPointFileOperationCompleted = AddressOf Me.OnCreateWithCalyxPointFileOperationCompleted
            End If
            Me.InvokeAsync("CreateWithCalyxPointFile", New Object() {sTicket, base64content}, Me.CreateWithCalyxPointFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateWithCalyxPointFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateWithCalyxPointFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateWithCalyxPointFileCompleted(Me, New CreateWithCalyxPointFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/ListModifiedLoans", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ListModifiedLoans(ByVal sTicket As String) As String
            Dim results() As Object = Me.Invoke("ListModifiedLoans", New Object() {sTicket})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ListModifiedLoansAsync(ByVal sTicket As String)
            Me.ListModifiedLoansAsync(sTicket, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ListModifiedLoansAsync(ByVal sTicket As String, ByVal userState As Object)
            If (Me.ListModifiedLoansOperationCompleted Is Nothing) Then
                Me.ListModifiedLoansOperationCompleted = AddressOf Me.OnListModifiedLoansOperationCompleted
            End If
            Me.InvokeAsync("ListModifiedLoans", New Object() {sTicket}, Me.ListModifiedLoansOperationCompleted, userState)
        End Sub
        
        Private Sub OnListModifiedLoansOperationCompleted(ByVal arg As Object)
            If (Not (Me.ListModifiedLoansCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ListModifiedLoansCompleted(Me, New ListModifiedLoansCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/ClearModifiedLoansList", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ClearModifiedLoansList(ByVal sTicket As String, ByVal lastModifiedDate As Date)
            Me.Invoke("ClearModifiedLoansList", New Object() {sTicket, lastModifiedDate})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClearModifiedLoansListAsync(ByVal sTicket As String, ByVal lastModifiedDate As Date)
            Me.ClearModifiedLoansListAsync(sTicket, lastModifiedDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClearModifiedLoansListAsync(ByVal sTicket As String, ByVal lastModifiedDate As Date, ByVal userState As Object)
            If (Me.ClearModifiedLoansListOperationCompleted Is Nothing) Then
                Me.ClearModifiedLoansListOperationCompleted = AddressOf Me.OnClearModifiedLoansListOperationCompleted
            End If
            Me.InvokeAsync("ClearModifiedLoansList", New Object() {sTicket, lastModifiedDate}, Me.ClearModifiedLoansListOperationCompleted, userState)
        End Sub
        
        Private Sub OnClearModifiedLoansListOperationCompleted(ByVal arg As Object)
            If (Not (Me.ClearModifiedLoansListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ClearModifiedLoansListCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/ClearModifiedLoanByName", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ClearModifiedLoanByName(ByVal sTicket As String, ByVal loanName As String)
            Me.Invoke("ClearModifiedLoanByName", New Object() {sTicket, loanName})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClearModifiedLoanByNameAsync(ByVal sTicket As String, ByVal loanName As String)
            Me.ClearModifiedLoanByNameAsync(sTicket, loanName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClearModifiedLoanByNameAsync(ByVal sTicket As String, ByVal loanName As String, ByVal userState As Object)
            If (Me.ClearModifiedLoanByNameOperationCompleted Is Nothing) Then
                Me.ClearModifiedLoanByNameOperationCompleted = AddressOf Me.OnClearModifiedLoanByNameOperationCompleted
            End If
            Me.InvokeAsync("ClearModifiedLoanByName", New Object() {sTicket, loanName}, Me.ClearModifiedLoanByNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnClearModifiedLoanByNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.ClearModifiedLoanByNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ClearModifiedLoanByNameCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/LoadMismo21", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadMismo21(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlQuery As String) As String
            Dim results() As Object = Me.Invoke("LoadMismo21", New Object() {sTicket, loanId, sXmlQuery})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadMismo21Async(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlQuery As String)
            Me.LoadMismo21Async(sTicket, loanId, sXmlQuery, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadMismo21Async(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlQuery As String, ByVal userState As Object)
            If (Me.LoadMismo21OperationCompleted Is Nothing) Then
                Me.LoadMismo21OperationCompleted = AddressOf Me.OnLoadMismo21OperationCompleted
            End If
            Me.InvokeAsync("LoadMismo21", New Object() {sTicket, loanId, sXmlQuery}, Me.LoadMismo21OperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadMismo21OperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadMismo21CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadMismo21Completed(Me, New LoadMismo21CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/SaveMismo21", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveMismo21(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String) As System.Guid
            Dim results() As Object = Me.Invoke("SaveMismo21", New Object() {sTicket, loanId, sXmlData})
            Return CType(results(0),System.Guid)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveMismo21Async(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String)
            Me.SaveMismo21Async(sTicket, loanId, sXmlData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveMismo21Async(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String, ByVal userState As Object)
            If (Me.SaveMismo21OperationCompleted Is Nothing) Then
                Me.SaveMismo21OperationCompleted = AddressOf Me.OnSaveMismo21OperationCompleted
            End If
            Me.InvokeAsync("SaveMismo21", New Object() {sTicket, loanId, sXmlData}, Me.SaveMismo21OperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveMismo21OperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveMismo21CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveMismo21Completed(Me, New SaveMismo21CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/LoadMismo23", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadMismo23(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlQuery As String) As String
            Dim results() As Object = Me.Invoke("LoadMismo23", New Object() {sTicket, loanId, sXmlQuery})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadMismo23Async(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlQuery As String)
            Me.LoadMismo23Async(sTicket, loanId, sXmlQuery, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadMismo23Async(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlQuery As String, ByVal userState As Object)
            If (Me.LoadMismo23OperationCompleted Is Nothing) Then
                Me.LoadMismo23OperationCompleted = AddressOf Me.OnLoadMismo23OperationCompleted
            End If
            Me.InvokeAsync("LoadMismo23", New Object() {sTicket, loanId, sXmlQuery}, Me.LoadMismo23OperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadMismo23OperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadMismo23CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadMismo23Completed(Me, New LoadMismo23CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/SaveMismo23", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveMismo23(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String) As System.Guid
            Dim results() As Object = Me.Invoke("SaveMismo23", New Object() {sTicket, loanId, sXmlData})
            Return CType(results(0),System.Guid)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveMismo23Async(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String)
            Me.SaveMismo23Async(sTicket, loanId, sXmlData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveMismo23Async(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String, ByVal userState As Object)
            If (Me.SaveMismo23OperationCompleted Is Nothing) Then
                Me.SaveMismo23OperationCompleted = AddressOf Me.OnSaveMismo23OperationCompleted
            End If
            Me.InvokeAsync("SaveMismo23", New Object() {sTicket, loanId, sXmlData}, Me.SaveMismo23OperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveMismo23OperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveMismo23CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveMismo23Completed(Me, New SaveMismo23CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/LoadMismo23ByLoanName", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadMismo23ByLoanName(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlQuery As String) As String
            Dim results() As Object = Me.Invoke("LoadMismo23ByLoanName", New Object() {sTicket, sLNm, sXmlQuery})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadMismo23ByLoanNameAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlQuery As String)
            Me.LoadMismo23ByLoanNameAsync(sTicket, sLNm, sXmlQuery, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadMismo23ByLoanNameAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlQuery As String, ByVal userState As Object)
            If (Me.LoadMismo23ByLoanNameOperationCompleted Is Nothing) Then
                Me.LoadMismo23ByLoanNameOperationCompleted = AddressOf Me.OnLoadMismo23ByLoanNameOperationCompleted
            End If
            Me.InvokeAsync("LoadMismo23ByLoanName", New Object() {sTicket, sLNm, sXmlQuery}, Me.LoadMismo23ByLoanNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadMismo23ByLoanNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadMismo23ByLoanNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadMismo23ByLoanNameCompleted(Me, New LoadMismo23ByLoanNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/GetPdfByLoanName", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPdfByLoanName(ByVal sTicket As String, ByVal sLNm As String, ByVal sPdfName As String) As String
            Dim results() As Object = Me.Invoke("GetPdfByLoanName", New Object() {sTicket, sLNm, sPdfName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPdfByLoanNameAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sPdfName As String)
            Me.GetPdfByLoanNameAsync(sTicket, sLNm, sPdfName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPdfByLoanNameAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sPdfName As String, ByVal userState As Object)
            If (Me.GetPdfByLoanNameOperationCompleted Is Nothing) Then
                Me.GetPdfByLoanNameOperationCompleted = AddressOf Me.OnGetPdfByLoanNameOperationCompleted
            End If
            Me.InvokeAsync("GetPdfByLoanName", New Object() {sTicket, sLNm, sPdfName}, Me.GetPdfByLoanNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPdfByLoanNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPdfByLoanNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPdfByLoanNameCompleted(Me, New GetPdfByLoanNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/UploadFannieMaeFile", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadFannieMaeFile(ByVal sTicket As String, ByVal content As String) As System.Guid
            Dim results() As Object = Me.Invoke("UploadFannieMaeFile", New Object() {sTicket, content})
            Return CType(results(0),System.Guid)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadFannieMaeFileAsync(ByVal sTicket As String, ByVal content As String)
            Me.UploadFannieMaeFileAsync(sTicket, content, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadFannieMaeFileAsync(ByVal sTicket As String, ByVal content As String, ByVal userState As Object)
            If (Me.UploadFannieMaeFileOperationCompleted Is Nothing) Then
                Me.UploadFannieMaeFileOperationCompleted = AddressOf Me.OnUploadFannieMaeFileOperationCompleted
            End If
            Me.InvokeAsync("UploadFannieMaeFile", New Object() {sTicket, content}, Me.UploadFannieMaeFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadFannieMaeFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadFannieMaeFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadFannieMaeFileCompleted(Me, New UploadFannieMaeFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/UploadCalyxPointFile", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadCalyxPointFile(ByVal sTicket As String, ByVal base64content As String) As System.Guid
            Dim results() As Object = Me.Invoke("UploadCalyxPointFile", New Object() {sTicket, base64content})
            Return CType(results(0),System.Guid)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadCalyxPointFileAsync(ByVal sTicket As String, ByVal base64content As String)
            Me.UploadCalyxPointFileAsync(sTicket, base64content, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadCalyxPointFileAsync(ByVal sTicket As String, ByVal base64content As String, ByVal userState As Object)
            If (Me.UploadCalyxPointFileOperationCompleted Is Nothing) Then
                Me.UploadCalyxPointFileOperationCompleted = AddressOf Me.OnUploadCalyxPointFileOperationCompleted
            End If
            Me.InvokeAsync("UploadCalyxPointFile", New Object() {sTicket, base64content}, Me.UploadCalyxPointFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadCalyxPointFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadCalyxPointFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadCalyxPointFileCompleted(Me, New UploadCalyxPointFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/UploadLONXml", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadLONXml(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String) As System.Guid
            Dim results() As Object = Me.Invoke("UploadLONXml", New Object() {sTicket, loanId, sXmlData})
            Return CType(results(0),System.Guid)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadLONXmlAsync(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String)
            Me.UploadLONXmlAsync(sTicket, loanId, sXmlData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadLONXmlAsync(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String, ByVal userState As Object)
            If (Me.UploadLONXmlOperationCompleted Is Nothing) Then
                Me.UploadLONXmlOperationCompleted = AddressOf Me.OnUploadLONXmlOperationCompleted
            End If
            Me.InvokeAsync("UploadLONXml", New Object() {sTicket, loanId, sXmlData}, Me.UploadLONXmlOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadLONXmlOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadLONXmlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadLONXmlCompleted(Me, New UploadLONXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RunQuickPricer", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RunQuickPricer(ByVal sTicket As String, ByVal sXmlData As String) As String
            Dim results() As Object = Me.Invoke("RunQuickPricer", New Object() {sTicket, sXmlData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RunQuickPricerAsync(ByVal sTicket As String, ByVal sXmlData As String)
            Me.RunQuickPricerAsync(sTicket, sXmlData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RunQuickPricerAsync(ByVal sTicket As String, ByVal sXmlData As String, ByVal userState As Object)
            If (Me.RunQuickPricerOperationCompleted Is Nothing) Then
                Me.RunQuickPricerOperationCompleted = AddressOf Me.OnRunQuickPricerOperationCompleted
            End If
            Me.InvokeAsync("RunQuickPricer", New Object() {sTicket, sXmlData}, Me.RunQuickPricerOperationCompleted, userState)
        End Sub
        
        Private Sub OnRunQuickPricerOperationCompleted(ByVal arg As Object)
            If (Not (Me.RunQuickPricerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RunQuickPricerCompleted(Me, New RunQuickPricerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="LoanSoap", [Namespace]:="http://www.lendersoffice.com/los/webservices/")>  _
    Partial Public Class Loan
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private LoadOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadPDFDocumentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IsLoanExistedOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RetrieveCustomReportOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrepareLoanForResubmissionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateWithFannieMaeFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateWithCalyxPointFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ListModifiedLoansOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ClearModifiedLoansListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ClearModifiedLoanByNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadMismo21OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveMismo21OperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadMismo23OperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveMismo23OperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadMismo23ByLoanNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPdfByLoanNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadFannieMaeFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadCalyxPointFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UploadLONXmlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RunQuickPricerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_LendersOffice_Loan_Loan
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event LoadCompleted As LoadCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadPDFDocumentCompleted As UploadPDFDocumentCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveCompleted As SaveCompletedEventHandler
        
        '''<remarks/>
        Public Event IsLoanExistedCompleted As IsLoanExistedCompletedEventHandler
        
        '''<remarks/>
        Public Event RetrieveCustomReportCompleted As RetrieveCustomReportCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateCompleted As CreateCompletedEventHandler
        
        '''<remarks/>
        Public Event PrepareLoanForResubmissionCompleted As PrepareLoanForResubmissionCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateWithFannieMaeFileCompleted As CreateWithFannieMaeFileCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateWithCalyxPointFileCompleted As CreateWithCalyxPointFileCompletedEventHandler
        
        '''<remarks/>
        Public Event ListModifiedLoansCompleted As ListModifiedLoansCompletedEventHandler
        
        '''<remarks/>
        Public Event ClearModifiedLoansListCompleted As ClearModifiedLoansListCompletedEventHandler
        
        '''<remarks/>
        Public Event ClearModifiedLoanByNameCompleted As ClearModifiedLoanByNameCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadMismo21Completed As LoadMismo21CompletedEventHandler
        
        '''<remarks/>
        Public Event SaveMismo21Completed As SaveMismo21CompletedEventHandler
        
        '''<remarks/>
        Public Event LoadMismo23Completed As LoadMismo23CompletedEventHandler
        
        '''<remarks/>
        Public Event SaveMismo23Completed As SaveMismo23CompletedEventHandler
        
        '''<remarks/>
        Public Event LoadMismo23ByLoanNameCompleted As LoadMismo23ByLoanNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPdfByLoanNameCompleted As GetPdfByLoanNameCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadFannieMaeFileCompleted As UploadFannieMaeFileCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadCalyxPointFileCompleted As UploadCalyxPointFileCompletedEventHandler
        
        '''<remarks/>
        Public Event UploadLONXmlCompleted As UploadLONXmlCompletedEventHandler
        
        '''<remarks/>
        Public Event RunQuickPricerCompleted As RunQuickPricerCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/Load", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Load(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlQuery As String, ByVal format As Integer) As String
            Dim results() As Object = Me.Invoke("Load", New Object() {sTicket, sLNm, sXmlQuery, format})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginLoad(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlQuery As String, ByVal format As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Load", New Object() {sTicket, sLNm, sXmlQuery, format}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoad(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlQuery As String, ByVal format As Integer)
            Me.LoadAsync(sTicket, sLNm, sXmlQuery, format, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlQuery As String, ByVal format As Integer, ByVal userState As Object)
            If (Me.LoadOperationCompleted Is Nothing) Then
                Me.LoadOperationCompleted = AddressOf Me.OnLoadOperationCompleted
            End If
            Me.InvokeAsync("Load", New Object() {sTicket, sLNm, sXmlQuery, format}, Me.LoadOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadCompleted(Me, New LoadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/UploadPDFDocument", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadPDFDocument(ByVal sTicket As String, ByVal sLNm As String, ByVal documentType As String, ByVal notes As String, ByVal sDataContent As String) As String
            Dim results() As Object = Me.Invoke("UploadPDFDocument", New Object() {sTicket, sLNm, documentType, notes, sDataContent})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUploadPDFDocument(ByVal sTicket As String, ByVal sLNm As String, ByVal documentType As String, ByVal notes As String, ByVal sDataContent As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadPDFDocument", New Object() {sTicket, sLNm, documentType, notes, sDataContent}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadPDFDocument(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadPDFDocumentAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal documentType As String, ByVal notes As String, ByVal sDataContent As String)
            Me.UploadPDFDocumentAsync(sTicket, sLNm, documentType, notes, sDataContent, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadPDFDocumentAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal documentType As String, ByVal notes As String, ByVal sDataContent As String, ByVal userState As Object)
            If (Me.UploadPDFDocumentOperationCompleted Is Nothing) Then
                Me.UploadPDFDocumentOperationCompleted = AddressOf Me.OnUploadPDFDocumentOperationCompleted
            End If
            Me.InvokeAsync("UploadPDFDocument", New Object() {sTicket, sLNm, documentType, notes, sDataContent}, Me.UploadPDFDocumentOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadPDFDocumentOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadPDFDocumentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadPDFDocumentCompleted(Me, New UploadPDFDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/Save", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Save(ByVal sTicket As String, ByVal sLNm As String, ByVal sDataContent As String, ByVal format As Integer) As String
            Dim results() As Object = Me.Invoke("Save", New Object() {sTicket, sLNm, sDataContent, format})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginSave(ByVal sTicket As String, ByVal sLNm As String, ByVal sDataContent As String, ByVal format As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Save", New Object() {sTicket, sLNm, sDataContent, format}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSave(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sDataContent As String, ByVal format As Integer)
            Me.SaveAsync(sTicket, sLNm, sDataContent, format, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sDataContent As String, ByVal format As Integer, ByVal userState As Object)
            If (Me.SaveOperationCompleted Is Nothing) Then
                Me.SaveOperationCompleted = AddressOf Me.OnSaveOperationCompleted
            End If
            Me.InvokeAsync("Save", New Object() {sTicket, sLNm, sDataContent, format}, Me.SaveOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveCompleted(Me, New SaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/IsLoanExisted", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IsLoanExisted(ByVal sTicket As String, ByVal sLNm As String) As Boolean
            Dim results() As Object = Me.Invoke("IsLoanExisted", New Object() {sTicket, sLNm})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginIsLoanExisted(ByVal sTicket As String, ByVal sLNm As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("IsLoanExisted", New Object() {sTicket, sLNm}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndIsLoanExisted(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IsLoanExistedAsync(ByVal sTicket As String, ByVal sLNm As String)
            Me.IsLoanExistedAsync(sTicket, sLNm, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IsLoanExistedAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal userState As Object)
            If (Me.IsLoanExistedOperationCompleted Is Nothing) Then
                Me.IsLoanExistedOperationCompleted = AddressOf Me.OnIsLoanExistedOperationCompleted
            End If
            Me.InvokeAsync("IsLoanExisted", New Object() {sTicket, sLNm}, Me.IsLoanExistedOperationCompleted, userState)
        End Sub
        
        Private Sub OnIsLoanExistedOperationCompleted(ByVal arg As Object)
            If (Not (Me.IsLoanExistedCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IsLoanExistedCompleted(Me, New IsLoanExistedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RetrieveCustomReport", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RetrieveCustomReport(ByVal sTicket As String, ByVal sQueryNm As String, ByVal includeAllWithAccess As Boolean) As String
            Dim results() As Object = Me.Invoke("RetrieveCustomReport", New Object() {sTicket, sQueryNm, includeAllWithAccess})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginRetrieveCustomReport(ByVal sTicket As String, ByVal sQueryNm As String, ByVal includeAllWithAccess As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RetrieveCustomReport", New Object() {sTicket, sQueryNm, includeAllWithAccess}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRetrieveCustomReport(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RetrieveCustomReportAsync(ByVal sTicket As String, ByVal sQueryNm As String, ByVal includeAllWithAccess As Boolean)
            Me.RetrieveCustomReportAsync(sTicket, sQueryNm, includeAllWithAccess, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RetrieveCustomReportAsync(ByVal sTicket As String, ByVal sQueryNm As String, ByVal includeAllWithAccess As Boolean, ByVal userState As Object)
            If (Me.RetrieveCustomReportOperationCompleted Is Nothing) Then
                Me.RetrieveCustomReportOperationCompleted = AddressOf Me.OnRetrieveCustomReportOperationCompleted
            End If
            Me.InvokeAsync("RetrieveCustomReport", New Object() {sTicket, sQueryNm, includeAllWithAccess}, Me.RetrieveCustomReportOperationCompleted, userState)
        End Sub
        
        Private Sub OnRetrieveCustomReportOperationCompleted(ByVal arg As Object)
            If (Not (Me.RetrieveCustomReportCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RetrieveCustomReportCompleted(Me, New RetrieveCustomReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/Create", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Create(ByVal sTicket As String, ByVal sTemplateNm As String) As String
            Dim results() As Object = Me.Invoke("Create", New Object() {sTicket, sTemplateNm})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginCreate(ByVal sTicket As String, ByVal sTemplateNm As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Create", New Object() {sTicket, sTemplateNm}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreate(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateAsync(ByVal sTicket As String, ByVal sTemplateNm As String)
            Me.CreateAsync(sTicket, sTemplateNm, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateAsync(ByVal sTicket As String, ByVal sTemplateNm As String, ByVal userState As Object)
            If (Me.CreateOperationCompleted Is Nothing) Then
                Me.CreateOperationCompleted = AddressOf Me.OnCreateOperationCompleted
            End If
            Me.InvokeAsync("Create", New Object() {sTicket, sTemplateNm}, Me.CreateOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateCompleted(Me, New CreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/PrepareLoanForResubmission", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrepareLoanForResubmission(ByVal sTicket As String, ByVal sLNm As String) As String
            Dim results() As Object = Me.Invoke("PrepareLoanForResubmission", New Object() {sTicket, sLNm})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginPrepareLoanForResubmission(ByVal sTicket As String, ByVal sLNm As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PrepareLoanForResubmission", New Object() {sTicket, sLNm}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPrepareLoanForResubmission(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrepareLoanForResubmissionAsync(ByVal sTicket As String, ByVal sLNm As String)
            Me.PrepareLoanForResubmissionAsync(sTicket, sLNm, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrepareLoanForResubmissionAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal userState As Object)
            If (Me.PrepareLoanForResubmissionOperationCompleted Is Nothing) Then
                Me.PrepareLoanForResubmissionOperationCompleted = AddressOf Me.OnPrepareLoanForResubmissionOperationCompleted
            End If
            Me.InvokeAsync("PrepareLoanForResubmission", New Object() {sTicket, sLNm}, Me.PrepareLoanForResubmissionOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrepareLoanForResubmissionOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrepareLoanForResubmissionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrepareLoanForResubmissionCompleted(Me, New PrepareLoanForResubmissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/CreateWithFannieMaeFile", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateWithFannieMaeFile(ByVal sTicket As String, ByVal content As String) As String
            Dim results() As Object = Me.Invoke("CreateWithFannieMaeFile", New Object() {sTicket, content})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateWithFannieMaeFile(ByVal sTicket As String, ByVal content As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateWithFannieMaeFile", New Object() {sTicket, content}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateWithFannieMaeFile(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateWithFannieMaeFileAsync(ByVal sTicket As String, ByVal content As String)
            Me.CreateWithFannieMaeFileAsync(sTicket, content, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateWithFannieMaeFileAsync(ByVal sTicket As String, ByVal content As String, ByVal userState As Object)
            If (Me.CreateWithFannieMaeFileOperationCompleted Is Nothing) Then
                Me.CreateWithFannieMaeFileOperationCompleted = AddressOf Me.OnCreateWithFannieMaeFileOperationCompleted
            End If
            Me.InvokeAsync("CreateWithFannieMaeFile", New Object() {sTicket, content}, Me.CreateWithFannieMaeFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateWithFannieMaeFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateWithFannieMaeFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateWithFannieMaeFileCompleted(Me, New CreateWithFannieMaeFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/CreateWithCalyxPointFile", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateWithCalyxPointFile(ByVal sTicket As String, ByVal base64content As String) As String
            Dim results() As Object = Me.Invoke("CreateWithCalyxPointFile", New Object() {sTicket, base64content})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateWithCalyxPointFile(ByVal sTicket As String, ByVal base64content As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateWithCalyxPointFile", New Object() {sTicket, base64content}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateWithCalyxPointFile(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateWithCalyxPointFileAsync(ByVal sTicket As String, ByVal base64content As String)
            Me.CreateWithCalyxPointFileAsync(sTicket, base64content, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateWithCalyxPointFileAsync(ByVal sTicket As String, ByVal base64content As String, ByVal userState As Object)
            If (Me.CreateWithCalyxPointFileOperationCompleted Is Nothing) Then
                Me.CreateWithCalyxPointFileOperationCompleted = AddressOf Me.OnCreateWithCalyxPointFileOperationCompleted
            End If
            Me.InvokeAsync("CreateWithCalyxPointFile", New Object() {sTicket, base64content}, Me.CreateWithCalyxPointFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateWithCalyxPointFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateWithCalyxPointFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateWithCalyxPointFileCompleted(Me, New CreateWithCalyxPointFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/ListModifiedLoans", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ListModifiedLoans(ByVal sTicket As String) As String
            Dim results() As Object = Me.Invoke("ListModifiedLoans", New Object() {sTicket})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginListModifiedLoans(ByVal sTicket As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ListModifiedLoans", New Object() {sTicket}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndListModifiedLoans(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ListModifiedLoansAsync(ByVal sTicket As String)
            Me.ListModifiedLoansAsync(sTicket, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ListModifiedLoansAsync(ByVal sTicket As String, ByVal userState As Object)
            If (Me.ListModifiedLoansOperationCompleted Is Nothing) Then
                Me.ListModifiedLoansOperationCompleted = AddressOf Me.OnListModifiedLoansOperationCompleted
            End If
            Me.InvokeAsync("ListModifiedLoans", New Object() {sTicket}, Me.ListModifiedLoansOperationCompleted, userState)
        End Sub
        
        Private Sub OnListModifiedLoansOperationCompleted(ByVal arg As Object)
            If (Not (Me.ListModifiedLoansCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ListModifiedLoansCompleted(Me, New ListModifiedLoansCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/ClearModifiedLoansList", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ClearModifiedLoansList(ByVal sTicket As String, ByVal lastModifiedDate As Date)
            Me.Invoke("ClearModifiedLoansList", New Object() {sTicket, lastModifiedDate})
        End Sub
        
        '''<remarks/>
        Public Function BeginClearModifiedLoansList(ByVal sTicket As String, ByVal lastModifiedDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ClearModifiedLoansList", New Object() {sTicket, lastModifiedDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndClearModifiedLoansList(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClearModifiedLoansListAsync(ByVal sTicket As String, ByVal lastModifiedDate As Date)
            Me.ClearModifiedLoansListAsync(sTicket, lastModifiedDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClearModifiedLoansListAsync(ByVal sTicket As String, ByVal lastModifiedDate As Date, ByVal userState As Object)
            If (Me.ClearModifiedLoansListOperationCompleted Is Nothing) Then
                Me.ClearModifiedLoansListOperationCompleted = AddressOf Me.OnClearModifiedLoansListOperationCompleted
            End If
            Me.InvokeAsync("ClearModifiedLoansList", New Object() {sTicket, lastModifiedDate}, Me.ClearModifiedLoansListOperationCompleted, userState)
        End Sub
        
        Private Sub OnClearModifiedLoansListOperationCompleted(ByVal arg As Object)
            If (Not (Me.ClearModifiedLoansListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ClearModifiedLoansListCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/ClearModifiedLoanByName", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ClearModifiedLoanByName(ByVal sTicket As String, ByVal loanName As String)
            Me.Invoke("ClearModifiedLoanByName", New Object() {sTicket, loanName})
        End Sub
        
        '''<remarks/>
        Public Function BeginClearModifiedLoanByName(ByVal sTicket As String, ByVal loanName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ClearModifiedLoanByName", New Object() {sTicket, loanName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndClearModifiedLoanByName(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClearModifiedLoanByNameAsync(ByVal sTicket As String, ByVal loanName As String)
            Me.ClearModifiedLoanByNameAsync(sTicket, loanName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClearModifiedLoanByNameAsync(ByVal sTicket As String, ByVal loanName As String, ByVal userState As Object)
            If (Me.ClearModifiedLoanByNameOperationCompleted Is Nothing) Then
                Me.ClearModifiedLoanByNameOperationCompleted = AddressOf Me.OnClearModifiedLoanByNameOperationCompleted
            End If
            Me.InvokeAsync("ClearModifiedLoanByName", New Object() {sTicket, loanName}, Me.ClearModifiedLoanByNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnClearModifiedLoanByNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.ClearModifiedLoanByNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ClearModifiedLoanByNameCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/LoadMismo21", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadMismo21(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlQuery As String) As String
            Dim results() As Object = Me.Invoke("LoadMismo21", New Object() {sTicket, loanId, sXmlQuery})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginLoadMismo21(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlQuery As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadMismo21", New Object() {sTicket, loanId, sXmlQuery}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadMismo21(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadMismo21Async(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlQuery As String)
            Me.LoadMismo21Async(sTicket, loanId, sXmlQuery, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadMismo21Async(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlQuery As String, ByVal userState As Object)
            If (Me.LoadMismo21OperationCompleted Is Nothing) Then
                Me.LoadMismo21OperationCompleted = AddressOf Me.OnLoadMismo21OperationCompleted
            End If
            Me.InvokeAsync("LoadMismo21", New Object() {sTicket, loanId, sXmlQuery}, Me.LoadMismo21OperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadMismo21OperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadMismo21CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadMismo21Completed(Me, New LoadMismo21CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/SaveMismo21", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveMismo21(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String) As System.Guid
            Dim results() As Object = Me.Invoke("SaveMismo21", New Object() {sTicket, loanId, sXmlData})
            Return CType(results(0),System.Guid)
        End Function
        
        '''<remarks/>
        Public Function BeginSaveMismo21(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SaveMismo21", New Object() {sTicket, loanId, sXmlData}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSaveMismo21(ByVal asyncResult As System.IAsyncResult) As System.Guid
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Guid)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveMismo21Async(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String)
            Me.SaveMismo21Async(sTicket, loanId, sXmlData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveMismo21Async(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String, ByVal userState As Object)
            If (Me.SaveMismo21OperationCompleted Is Nothing) Then
                Me.SaveMismo21OperationCompleted = AddressOf Me.OnSaveMismo21OperationCompleted
            End If
            Me.InvokeAsync("SaveMismo21", New Object() {sTicket, loanId, sXmlData}, Me.SaveMismo21OperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveMismo21OperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveMismo21CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveMismo21Completed(Me, New SaveMismo21CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/LoadMismo23", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadMismo23(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlQuery As String) As String
            Dim results() As Object = Me.Invoke("LoadMismo23", New Object() {sTicket, loanId, sXmlQuery})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginLoadMismo23(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlQuery As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadMismo23", New Object() {sTicket, loanId, sXmlQuery}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadMismo23(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadMismo23Async(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlQuery As String)
            Me.LoadMismo23Async(sTicket, loanId, sXmlQuery, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadMismo23Async(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlQuery As String, ByVal userState As Object)
            If (Me.LoadMismo23OperationCompleted Is Nothing) Then
                Me.LoadMismo23OperationCompleted = AddressOf Me.OnLoadMismo23OperationCompleted
            End If
            Me.InvokeAsync("LoadMismo23", New Object() {sTicket, loanId, sXmlQuery}, Me.LoadMismo23OperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadMismo23OperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadMismo23CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadMismo23Completed(Me, New LoadMismo23CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/SaveMismo23", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveMismo23(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String) As System.Guid
            Dim results() As Object = Me.Invoke("SaveMismo23", New Object() {sTicket, loanId, sXmlData})
            Return CType(results(0),System.Guid)
        End Function
        
        '''<remarks/>
        Public Function BeginSaveMismo23(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SaveMismo23", New Object() {sTicket, loanId, sXmlData}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSaveMismo23(ByVal asyncResult As System.IAsyncResult) As System.Guid
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Guid)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveMismo23Async(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String)
            Me.SaveMismo23Async(sTicket, loanId, sXmlData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveMismo23Async(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String, ByVal userState As Object)
            If (Me.SaveMismo23OperationCompleted Is Nothing) Then
                Me.SaveMismo23OperationCompleted = AddressOf Me.OnSaveMismo23OperationCompleted
            End If
            Me.InvokeAsync("SaveMismo23", New Object() {sTicket, loanId, sXmlData}, Me.SaveMismo23OperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveMismo23OperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveMismo23CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveMismo23Completed(Me, New SaveMismo23CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/LoadMismo23ByLoanName", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadMismo23ByLoanName(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlQuery As String) As String
            Dim results() As Object = Me.Invoke("LoadMismo23ByLoanName", New Object() {sTicket, sLNm, sXmlQuery})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginLoadMismo23ByLoanName(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlQuery As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LoadMismo23ByLoanName", New Object() {sTicket, sLNm, sXmlQuery}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoadMismo23ByLoanName(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadMismo23ByLoanNameAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlQuery As String)
            Me.LoadMismo23ByLoanNameAsync(sTicket, sLNm, sXmlQuery, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadMismo23ByLoanNameAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlQuery As String, ByVal userState As Object)
            If (Me.LoadMismo23ByLoanNameOperationCompleted Is Nothing) Then
                Me.LoadMismo23ByLoanNameOperationCompleted = AddressOf Me.OnLoadMismo23ByLoanNameOperationCompleted
            End If
            Me.InvokeAsync("LoadMismo23ByLoanName", New Object() {sTicket, sLNm, sXmlQuery}, Me.LoadMismo23ByLoanNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadMismo23ByLoanNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadMismo23ByLoanNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadMismo23ByLoanNameCompleted(Me, New LoadMismo23ByLoanNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/GetPdfByLoanName", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPdfByLoanName(ByVal sTicket As String, ByVal sLNm As String, ByVal sPdfName As String) As String
            Dim results() As Object = Me.Invoke("GetPdfByLoanName", New Object() {sTicket, sLNm, sPdfName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPdfByLoanName(ByVal sTicket As String, ByVal sLNm As String, ByVal sPdfName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPdfByLoanName", New Object() {sTicket, sLNm, sPdfName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPdfByLoanName(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPdfByLoanNameAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sPdfName As String)
            Me.GetPdfByLoanNameAsync(sTicket, sLNm, sPdfName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPdfByLoanNameAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sPdfName As String, ByVal userState As Object)
            If (Me.GetPdfByLoanNameOperationCompleted Is Nothing) Then
                Me.GetPdfByLoanNameOperationCompleted = AddressOf Me.OnGetPdfByLoanNameOperationCompleted
            End If
            Me.InvokeAsync("GetPdfByLoanName", New Object() {sTicket, sLNm, sPdfName}, Me.GetPdfByLoanNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPdfByLoanNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPdfByLoanNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPdfByLoanNameCompleted(Me, New GetPdfByLoanNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/UploadFannieMaeFile", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadFannieMaeFile(ByVal sTicket As String, ByVal content As String) As System.Guid
            Dim results() As Object = Me.Invoke("UploadFannieMaeFile", New Object() {sTicket, content})
            Return CType(results(0),System.Guid)
        End Function
        
        '''<remarks/>
        Public Function BeginUploadFannieMaeFile(ByVal sTicket As String, ByVal content As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadFannieMaeFile", New Object() {sTicket, content}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadFannieMaeFile(ByVal asyncResult As System.IAsyncResult) As System.Guid
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Guid)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadFannieMaeFileAsync(ByVal sTicket As String, ByVal content As String)
            Me.UploadFannieMaeFileAsync(sTicket, content, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadFannieMaeFileAsync(ByVal sTicket As String, ByVal content As String, ByVal userState As Object)
            If (Me.UploadFannieMaeFileOperationCompleted Is Nothing) Then
                Me.UploadFannieMaeFileOperationCompleted = AddressOf Me.OnUploadFannieMaeFileOperationCompleted
            End If
            Me.InvokeAsync("UploadFannieMaeFile", New Object() {sTicket, content}, Me.UploadFannieMaeFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadFannieMaeFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadFannieMaeFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadFannieMaeFileCompleted(Me, New UploadFannieMaeFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/UploadCalyxPointFile", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadCalyxPointFile(ByVal sTicket As String, ByVal base64content As String) As System.Guid
            Dim results() As Object = Me.Invoke("UploadCalyxPointFile", New Object() {sTicket, base64content})
            Return CType(results(0),System.Guid)
        End Function
        
        '''<remarks/>
        Public Function BeginUploadCalyxPointFile(ByVal sTicket As String, ByVal base64content As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadCalyxPointFile", New Object() {sTicket, base64content}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadCalyxPointFile(ByVal asyncResult As System.IAsyncResult) As System.Guid
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Guid)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadCalyxPointFileAsync(ByVal sTicket As String, ByVal base64content As String)
            Me.UploadCalyxPointFileAsync(sTicket, base64content, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadCalyxPointFileAsync(ByVal sTicket As String, ByVal base64content As String, ByVal userState As Object)
            If (Me.UploadCalyxPointFileOperationCompleted Is Nothing) Then
                Me.UploadCalyxPointFileOperationCompleted = AddressOf Me.OnUploadCalyxPointFileOperationCompleted
            End If
            Me.InvokeAsync("UploadCalyxPointFile", New Object() {sTicket, base64content}, Me.UploadCalyxPointFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadCalyxPointFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadCalyxPointFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadCalyxPointFileCompleted(Me, New UploadCalyxPointFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/UploadLONXml", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadLONXml(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String) As System.Guid
            Dim results() As Object = Me.Invoke("UploadLONXml", New Object() {sTicket, loanId, sXmlData})
            Return CType(results(0),System.Guid)
        End Function
        
        '''<remarks/>
        Public Function BeginUploadLONXml(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadLONXml", New Object() {sTicket, loanId, sXmlData}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadLONXml(ByVal asyncResult As System.IAsyncResult) As System.Guid
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Guid)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UploadLONXmlAsync(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String)
            Me.UploadLONXmlAsync(sTicket, loanId, sXmlData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UploadLONXmlAsync(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String, ByVal userState As Object)
            If (Me.UploadLONXmlOperationCompleted Is Nothing) Then
                Me.UploadLONXmlOperationCompleted = AddressOf Me.OnUploadLONXmlOperationCompleted
            End If
            Me.InvokeAsync("UploadLONXml", New Object() {sTicket, loanId, sXmlData}, Me.UploadLONXmlOperationCompleted, userState)
        End Sub
        
        Private Sub OnUploadLONXmlOperationCompleted(ByVal arg As Object)
            If (Not (Me.UploadLONXmlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UploadLONXmlCompleted(Me, New UploadLONXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RunQuickPricer", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RunQuickPricer(ByVal sTicket As String, ByVal sXmlData As String) As String
            Dim results() As Object = Me.Invoke("RunQuickPricer", New Object() {sTicket, sXmlData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginRunQuickPricer(ByVal sTicket As String, ByVal sXmlData As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RunQuickPricer", New Object() {sTicket, sXmlData}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRunQuickPricer(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RunQuickPricerAsync(ByVal sTicket As String, ByVal sXmlData As String)
            Me.RunQuickPricerAsync(sTicket, sXmlData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RunQuickPricerAsync(ByVal sTicket As String, ByVal sXmlData As String, ByVal userState As Object)
            If (Me.RunQuickPricerOperationCompleted Is Nothing) Then
                Me.RunQuickPricerOperationCompleted = AddressOf Me.OnRunQuickPricerOperationCompleted
            End If
            Me.InvokeAsync("RunQuickPricer", New Object() {sTicket, sXmlData}, Me.RunQuickPricerOperationCompleted, userState)
        End Sub
        
        Private Sub OnRunQuickPricerOperationCompleted(ByVal arg As Object)
            If (Not (Me.RunQuickPricerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RunQuickPricerCompleted(Me, New RunQuickPricerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub LoadCompletedEventHandler(ByVal sender As Object, ByVal e As LoadCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub UploadPDFDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As UploadPDFDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadPDFDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub SaveCompletedEventHandler(ByVal sender As Object, ByVal e As SaveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub IsLoanExistedCompletedEventHandler(ByVal sender As Object, ByVal e As IsLoanExistedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsLoanExistedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub RetrieveCustomReportCompletedEventHandler(ByVal sender As Object, ByVal e As RetrieveCustomReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RetrieveCustomReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub CreateCompletedEventHandler(ByVal sender As Object, ByVal e As CreateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub PrepareLoanForResubmissionCompletedEventHandler(ByVal sender As Object, ByVal e As PrepareLoanForResubmissionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrepareLoanForResubmissionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub CreateWithFannieMaeFileCompletedEventHandler(ByVal sender As Object, ByVal e As CreateWithFannieMaeFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateWithFannieMaeFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub CreateWithCalyxPointFileCompletedEventHandler(ByVal sender As Object, ByVal e As CreateWithCalyxPointFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateWithCalyxPointFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub ListModifiedLoansCompletedEventHandler(ByVal sender As Object, ByVal e As ListModifiedLoansCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ListModifiedLoansCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub ClearModifiedLoansListCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub ClearModifiedLoanByNameCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub LoadMismo21CompletedEventHandler(ByVal sender As Object, ByVal e As LoadMismo21CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadMismo21CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub SaveMismo21CompletedEventHandler(ByVal sender As Object, ByVal e As SaveMismo21CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveMismo21CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Guid
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Guid)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub LoadMismo23CompletedEventHandler(ByVal sender As Object, ByVal e As LoadMismo23CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadMismo23CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub SaveMismo23CompletedEventHandler(ByVal sender As Object, ByVal e As SaveMismo23CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveMismo23CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Guid
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Guid)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub LoadMismo23ByLoanNameCompletedEventHandler(ByVal sender As Object, ByVal e As LoadMismo23ByLoanNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadMismo23ByLoanNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetPdfByLoanNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetPdfByLoanNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPdfByLoanNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub UploadFannieMaeFileCompletedEventHandler(ByVal sender As Object, ByVal e As UploadFannieMaeFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadFannieMaeFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Guid
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Guid)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub UploadCalyxPointFileCompletedEventHandler(ByVal sender As Object, ByVal e As UploadCalyxPointFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadCalyxPointFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Guid
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Guid)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub UploadLONXmlCompletedEventHandler(ByVal sender As Object, ByVal e As UploadLONXmlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadLONXmlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Guid
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Guid)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub RunQuickPricerCompletedEventHandler(ByVal sender As Object, ByVal e As RunQuickPricerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RunQuickPricerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
