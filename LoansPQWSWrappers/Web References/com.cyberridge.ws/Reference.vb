'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3625
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by wsdl, Version=2.0.50727.3038.
'
Namespace com.cyberridge.ws
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ServiceSoap", [Namespace]:="http://nortridge.com/")>  _
    Partial Public Class Service
        Inherits Microsoft.Web.Services3.WebServicesClientProtocol
        
        Private DBConnectUsingSAOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DBConnectUsingWindowsAuthenticationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSInitializeAndImportXMLWindowsAuthenticationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSInitializeAndImportXMLDBAuthenticationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSPrimaHealthTestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSAuthenticateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSGlobalAuthenticationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSGetLoanListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSGetLoanDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSGetContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSStatementImageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSLoanPendingTransactionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSLogOutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSVerifyContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSCreateCredentialsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSPasswordRecoveryByEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSPasswordRecoveryHintsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSPasswordRecoveryAnswersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSChangePasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSForceChangePasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSContactUDFOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSLoanDetailUDFOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSLoanPaymentsDueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSLoanPaymentHistoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSStatementsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSCalculateAmortizedPaymentAmountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSCalculateAmortizedPaymentAmountWithBalloonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NLSMethodOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportXMLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TestImportXMLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PostStatementOperationCompleted As System.Threading.SendOrPostCallback
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "https://ws.cyberridge.com/AvidAcceptancewebservice/Service.asmx"
        End Sub
        
        '''<remarks/>
        Public Event DBConnectUsingSACompleted As DBConnectUsingSACompletedEventHandler
        
        '''<remarks/>
        Public Event DBConnectUsingWindowsAuthenticationCompleted As DBConnectUsingWindowsAuthenticationCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSInitializeAndImportXMLWindowsAuthenticationCompleted As NLSInitializeAndImportXMLWindowsAuthenticationCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSInitializeAndImportXMLDBAuthenticationCompleted As NLSInitializeAndImportXMLDBAuthenticationCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSPrimaHealthTestCompleted As NLSPrimaHealthTestCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSAuthenticateCompleted As NLSAuthenticateCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSGlobalAuthenticationCompleted As NLSGlobalAuthenticationCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSGetLoanListCompleted As NLSGetLoanListCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSGetLoanDetailCompleted As NLSGetLoanDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSGetContactCompleted As NLSGetContactCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSStatementImageCompleted As NLSStatementImageCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSLoanPendingTransactionsCompleted As NLSLoanPendingTransactionsCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSLogOutCompleted As NLSLogOutCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSVerifyContactCompleted As NLSVerifyContactCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSCreateCredentialsCompleted As NLSCreateCredentialsCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSPasswordRecoveryByEmailCompleted As NLSPasswordRecoveryByEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSPasswordRecoveryHintsCompleted As NLSPasswordRecoveryHintsCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSPasswordRecoveryAnswersCompleted As NLSPasswordRecoveryAnswersCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSChangePasswordCompleted As NLSChangePasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSForceChangePasswordCompleted As NLSForceChangePasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSContactUDFCompleted As NLSContactUDFCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSLoanDetailUDFCompleted As NLSLoanDetailUDFCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSLoanPaymentsDueCompleted As NLSLoanPaymentsDueCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSLoanPaymentHistoryCompleted As NLSLoanPaymentHistoryCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSStatementsCompleted As NLSStatementsCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSCalculateAmortizedPaymentAmountCompleted As NLSCalculateAmortizedPaymentAmountCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSCalculateAmortizedPaymentAmountWithBalloonCompleted As NLSCalculateAmortizedPaymentAmountWithBalloonCompletedEventHandler
        
        '''<remarks/>
        Public Event NLSMethodCompleted As NLSMethodCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportXMLCompleted As ImportXMLCompletedEventHandler
        
        '''<remarks/>
        Public Event TestImportXMLCompleted As TestImportXMLCompletedEventHandler
        
        '''<remarks/>
        Public Event PostStatementCompleted As PostStatementCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/DBConnectUsingSA", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DBConnectUsingSA() As String
            Dim results() As Object = Me.Invoke("DBConnectUsingSA", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDBConnectUsingSA(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DBConnectUsingSA", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDBConnectUsingSA(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DBConnectUsingSAAsync()
            Me.DBConnectUsingSAAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DBConnectUsingSAAsync(ByVal userState As Object)
            If (Me.DBConnectUsingSAOperationCompleted Is Nothing) Then
                Me.DBConnectUsingSAOperationCompleted = AddressOf Me.OnDBConnectUsingSAOperationCompleted
            End If
            Me.InvokeAsync("DBConnectUsingSA", New Object(-1) {}, Me.DBConnectUsingSAOperationCompleted, userState)
        End Sub
        
        Private Sub OnDBConnectUsingSAOperationCompleted(ByVal arg As Object)
            If (Not (Me.DBConnectUsingSACompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DBConnectUsingSACompleted(Me, New DBConnectUsingSACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/DBConnectUsingWindowsAuthentication", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DBConnectUsingWindowsAuthentication() As String
            Dim results() As Object = Me.Invoke("DBConnectUsingWindowsAuthentication", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDBConnectUsingWindowsAuthentication(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DBConnectUsingWindowsAuthentication", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDBConnectUsingWindowsAuthentication(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DBConnectUsingWindowsAuthenticationAsync()
            Me.DBConnectUsingWindowsAuthenticationAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DBConnectUsingWindowsAuthenticationAsync(ByVal userState As Object)
            If (Me.DBConnectUsingWindowsAuthenticationOperationCompleted Is Nothing) Then
                Me.DBConnectUsingWindowsAuthenticationOperationCompleted = AddressOf Me.OnDBConnectUsingWindowsAuthenticationOperationCompleted
            End If
            Me.InvokeAsync("DBConnectUsingWindowsAuthentication", New Object(-1) {}, Me.DBConnectUsingWindowsAuthenticationOperationCompleted, userState)
        End Sub
        
        Private Sub OnDBConnectUsingWindowsAuthenticationOperationCompleted(ByVal arg As Object)
            If (Not (Me.DBConnectUsingWindowsAuthenticationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DBConnectUsingWindowsAuthenticationCompleted(Me, New DBConnectUsingWindowsAuthenticationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSInitializeAndImportXMLWindowsAuthentication", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSInitializeAndImportXMLWindowsAuthentication(ByVal commit_to_db As Boolean, ByVal db_server As String, ByVal db_name As String, ByVal db_type As String, ByVal import_string As String) As String
            Dim results() As Object = Me.Invoke("NLSInitializeAndImportXMLWindowsAuthentication", New Object() {commit_to_db, db_server, db_name, db_type, import_string})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSInitializeAndImportXMLWindowsAuthentication(ByVal commit_to_db As Boolean, ByVal db_server As String, ByVal db_name As String, ByVal db_type As String, ByVal import_string As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSInitializeAndImportXMLWindowsAuthentication", New Object() {commit_to_db, db_server, db_name, db_type, import_string}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSInitializeAndImportXMLWindowsAuthentication(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSInitializeAndImportXMLWindowsAuthenticationAsync(ByVal commit_to_db As Boolean, ByVal db_server As String, ByVal db_name As String, ByVal db_type As String, ByVal import_string As String)
            Me.NLSInitializeAndImportXMLWindowsAuthenticationAsync(commit_to_db, db_server, db_name, db_type, import_string, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSInitializeAndImportXMLWindowsAuthenticationAsync(ByVal commit_to_db As Boolean, ByVal db_server As String, ByVal db_name As String, ByVal db_type As String, ByVal import_string As String, ByVal userState As Object)
            If (Me.NLSInitializeAndImportXMLWindowsAuthenticationOperationCompleted Is Nothing) Then
                Me.NLSInitializeAndImportXMLWindowsAuthenticationOperationCompleted = AddressOf Me.OnNLSInitializeAndImportXMLWindowsAuthenticationOperationCompleted
            End If
            Me.InvokeAsync("NLSInitializeAndImportXMLWindowsAuthentication", New Object() {commit_to_db, db_server, db_name, db_type, import_string}, Me.NLSInitializeAndImportXMLWindowsAuthenticationOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSInitializeAndImportXMLWindowsAuthenticationOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSInitializeAndImportXMLWindowsAuthenticationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSInitializeAndImportXMLWindowsAuthenticationCompleted(Me, New NLSInitializeAndImportXMLWindowsAuthenticationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSInitializeAndImportXMLDBAuthentication", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSInitializeAndImportXMLDBAuthentication(ByVal commit_to_db As Boolean, ByVal db_server As String, ByVal db_name As String, ByVal db_type As String, ByVal db_username As String, ByVal db_password As String, ByVal nls_username As String, ByVal nls_password As String, ByVal import_string As String) As String
            Dim results() As Object = Me.Invoke("NLSInitializeAndImportXMLDBAuthentication", New Object() {commit_to_db, db_server, db_name, db_type, db_username, db_password, nls_username, nls_password, import_string})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSInitializeAndImportXMLDBAuthentication(ByVal commit_to_db As Boolean, ByVal db_server As String, ByVal db_name As String, ByVal db_type As String, ByVal db_username As String, ByVal db_password As String, ByVal nls_username As String, ByVal nls_password As String, ByVal import_string As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSInitializeAndImportXMLDBAuthentication", New Object() {commit_to_db, db_server, db_name, db_type, db_username, db_password, nls_username, nls_password, import_string}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSInitializeAndImportXMLDBAuthentication(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSInitializeAndImportXMLDBAuthenticationAsync(ByVal commit_to_db As Boolean, ByVal db_server As String, ByVal db_name As String, ByVal db_type As String, ByVal db_username As String, ByVal db_password As String, ByVal nls_username As String, ByVal nls_password As String, ByVal import_string As String)
            Me.NLSInitializeAndImportXMLDBAuthenticationAsync(commit_to_db, db_server, db_name, db_type, db_username, db_password, nls_username, nls_password, import_string, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSInitializeAndImportXMLDBAuthenticationAsync(ByVal commit_to_db As Boolean, ByVal db_server As String, ByVal db_name As String, ByVal db_type As String, ByVal db_username As String, ByVal db_password As String, ByVal nls_username As String, ByVal nls_password As String, ByVal import_string As String, ByVal userState As Object)
            If (Me.NLSInitializeAndImportXMLDBAuthenticationOperationCompleted Is Nothing) Then
                Me.NLSInitializeAndImportXMLDBAuthenticationOperationCompleted = AddressOf Me.OnNLSInitializeAndImportXMLDBAuthenticationOperationCompleted
            End If
            Me.InvokeAsync("NLSInitializeAndImportXMLDBAuthentication", New Object() {commit_to_db, db_server, db_name, db_type, db_username, db_password, nls_username, nls_password, import_string}, Me.NLSInitializeAndImportXMLDBAuthenticationOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSInitializeAndImportXMLDBAuthenticationOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSInitializeAndImportXMLDBAuthenticationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSInitializeAndImportXMLDBAuthenticationCompleted(Me, New NLSInitializeAndImportXMLDBAuthenticationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSPrimaHealthTest", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSPrimaHealthTest(ByVal token As String, ByVal ContactNumber As String) As String
            Dim results() As Object = Me.Invoke("NLSPrimaHealthTest", New Object() {token, ContactNumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSPrimaHealthTest(ByVal token As String, ByVal ContactNumber As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSPrimaHealthTest", New Object() {token, ContactNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSPrimaHealthTest(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSPrimaHealthTestAsync(ByVal token As String, ByVal ContactNumber As String)
            Me.NLSPrimaHealthTestAsync(token, ContactNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSPrimaHealthTestAsync(ByVal token As String, ByVal ContactNumber As String, ByVal userState As Object)
            If (Me.NLSPrimaHealthTestOperationCompleted Is Nothing) Then
                Me.NLSPrimaHealthTestOperationCompleted = AddressOf Me.OnNLSPrimaHealthTestOperationCompleted
            End If
            Me.InvokeAsync("NLSPrimaHealthTest", New Object() {token, ContactNumber}, Me.NLSPrimaHealthTestOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSPrimaHealthTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSPrimaHealthTestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSPrimaHealthTestCompleted(Me, New NLSPrimaHealthTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSAuthenticate", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSAuthenticate(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String, ByVal username As String, ByVal password As String, ByVal ipaddress As String) As String
            Dim results() As Object = Me.Invoke("NLSAuthenticate", New Object() {db_type, server_name, database_name, username, password, ipaddress})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSAuthenticate(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String, ByVal username As String, ByVal password As String, ByVal ipaddress As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSAuthenticate", New Object() {db_type, server_name, database_name, username, password, ipaddress}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSAuthenticate(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSAuthenticateAsync(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String, ByVal username As String, ByVal password As String, ByVal ipaddress As String)
            Me.NLSAuthenticateAsync(db_type, server_name, database_name, username, password, ipaddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSAuthenticateAsync(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String, ByVal username As String, ByVal password As String, ByVal ipaddress As String, ByVal userState As Object)
            If (Me.NLSAuthenticateOperationCompleted Is Nothing) Then
                Me.NLSAuthenticateOperationCompleted = AddressOf Me.OnNLSAuthenticateOperationCompleted
            End If
            Me.InvokeAsync("NLSAuthenticate", New Object() {db_type, server_name, database_name, username, password, ipaddress}, Me.NLSAuthenticateOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSAuthenticateOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSAuthenticateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSAuthenticateCompleted(Me, New NLSAuthenticateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSGlobalAuthentication", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSGlobalAuthentication(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String) As String
            Dim results() As Object = Me.Invoke("NLSGlobalAuthentication", New Object() {db_type, server_name, database_name})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSGlobalAuthentication(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSGlobalAuthentication", New Object() {db_type, server_name, database_name}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSGlobalAuthentication(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSGlobalAuthenticationAsync(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String)
            Me.NLSGlobalAuthenticationAsync(db_type, server_name, database_name, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSGlobalAuthenticationAsync(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String, ByVal userState As Object)
            If (Me.NLSGlobalAuthenticationOperationCompleted Is Nothing) Then
                Me.NLSGlobalAuthenticationOperationCompleted = AddressOf Me.OnNLSGlobalAuthenticationOperationCompleted
            End If
            Me.InvokeAsync("NLSGlobalAuthentication", New Object() {db_type, server_name, database_name}, Me.NLSGlobalAuthenticationOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSGlobalAuthenticationOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSGlobalAuthenticationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSGlobalAuthenticationCompleted(Me, New NLSGlobalAuthenticationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSGetLoanList", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSGetLoanList(ByVal token As String, ByVal ContactNumber As String, ByVal IncludeRelatedLoans As Boolean) As String
            Dim results() As Object = Me.Invoke("NLSGetLoanList", New Object() {token, ContactNumber, IncludeRelatedLoans})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSGetLoanList(ByVal token As String, ByVal ContactNumber As String, ByVal IncludeRelatedLoans As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSGetLoanList", New Object() {token, ContactNumber, IncludeRelatedLoans}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSGetLoanList(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSGetLoanListAsync(ByVal token As String, ByVal ContactNumber As String, ByVal IncludeRelatedLoans As Boolean)
            Me.NLSGetLoanListAsync(token, ContactNumber, IncludeRelatedLoans, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSGetLoanListAsync(ByVal token As String, ByVal ContactNumber As String, ByVal IncludeRelatedLoans As Boolean, ByVal userState As Object)
            If (Me.NLSGetLoanListOperationCompleted Is Nothing) Then
                Me.NLSGetLoanListOperationCompleted = AddressOf Me.OnNLSGetLoanListOperationCompleted
            End If
            Me.InvokeAsync("NLSGetLoanList", New Object() {token, ContactNumber, IncludeRelatedLoans}, Me.NLSGetLoanListOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSGetLoanListOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSGetLoanListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSGetLoanListCompleted(Me, New NLSGetLoanListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSGetLoanDetail", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSGetLoanDetail(ByVal token As String, ByVal LoanNumber As String) As String
            Dim results() As Object = Me.Invoke("NLSGetLoanDetail", New Object() {token, LoanNumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSGetLoanDetail(ByVal token As String, ByVal LoanNumber As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSGetLoanDetail", New Object() {token, LoanNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSGetLoanDetail(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSGetLoanDetailAsync(ByVal token As String, ByVal LoanNumber As String)
            Me.NLSGetLoanDetailAsync(token, LoanNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSGetLoanDetailAsync(ByVal token As String, ByVal LoanNumber As String, ByVal userState As Object)
            If (Me.NLSGetLoanDetailOperationCompleted Is Nothing) Then
                Me.NLSGetLoanDetailOperationCompleted = AddressOf Me.OnNLSGetLoanDetailOperationCompleted
            End If
            Me.InvokeAsync("NLSGetLoanDetail", New Object() {token, LoanNumber}, Me.NLSGetLoanDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSGetLoanDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSGetLoanDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSGetLoanDetailCompleted(Me, New NLSGetLoanDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSGetContact", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSGetContact(ByVal token As String, ByVal ContactNumber As String) As String
            Dim results() As Object = Me.Invoke("NLSGetContact", New Object() {token, ContactNumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSGetContact(ByVal token As String, ByVal ContactNumber As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSGetContact", New Object() {token, ContactNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSGetContact(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSGetContactAsync(ByVal token As String, ByVal ContactNumber As String)
            Me.NLSGetContactAsync(token, ContactNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSGetContactAsync(ByVal token As String, ByVal ContactNumber As String, ByVal userState As Object)
            If (Me.NLSGetContactOperationCompleted Is Nothing) Then
                Me.NLSGetContactOperationCompleted = AddressOf Me.OnNLSGetContactOperationCompleted
            End If
            Me.InvokeAsync("NLSGetContact", New Object() {token, ContactNumber}, Me.NLSGetContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSGetContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSGetContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSGetContactCompleted(Me, New NLSGetContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSStatementImage", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSStatementImage(ByVal token As String, ByVal LoanNumber As String, ByVal DocumentID As Integer) As String
            Dim results() As Object = Me.Invoke("NLSStatementImage", New Object() {token, LoanNumber, DocumentID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSStatementImage(ByVal token As String, ByVal LoanNumber As String, ByVal DocumentID As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSStatementImage", New Object() {token, LoanNumber, DocumentID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSStatementImage(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSStatementImageAsync(ByVal token As String, ByVal LoanNumber As String, ByVal DocumentID As Integer)
            Me.NLSStatementImageAsync(token, LoanNumber, DocumentID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSStatementImageAsync(ByVal token As String, ByVal LoanNumber As String, ByVal DocumentID As Integer, ByVal userState As Object)
            If (Me.NLSStatementImageOperationCompleted Is Nothing) Then
                Me.NLSStatementImageOperationCompleted = AddressOf Me.OnNLSStatementImageOperationCompleted
            End If
            Me.InvokeAsync("NLSStatementImage", New Object() {token, LoanNumber, DocumentID}, Me.NLSStatementImageOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSStatementImageOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSStatementImageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSStatementImageCompleted(Me, New NLSStatementImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSLoanPendingTransactions", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSLoanPendingTransactions(ByVal token As String, ByVal LoanNumber As String) As String
            Dim results() As Object = Me.Invoke("NLSLoanPendingTransactions", New Object() {token, LoanNumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSLoanPendingTransactions(ByVal token As String, ByVal LoanNumber As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSLoanPendingTransactions", New Object() {token, LoanNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSLoanPendingTransactions(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSLoanPendingTransactionsAsync(ByVal token As String, ByVal LoanNumber As String)
            Me.NLSLoanPendingTransactionsAsync(token, LoanNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSLoanPendingTransactionsAsync(ByVal token As String, ByVal LoanNumber As String, ByVal userState As Object)
            If (Me.NLSLoanPendingTransactionsOperationCompleted Is Nothing) Then
                Me.NLSLoanPendingTransactionsOperationCompleted = AddressOf Me.OnNLSLoanPendingTransactionsOperationCompleted
            End If
            Me.InvokeAsync("NLSLoanPendingTransactions", New Object() {token, LoanNumber}, Me.NLSLoanPendingTransactionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSLoanPendingTransactionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSLoanPendingTransactionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSLoanPendingTransactionsCompleted(Me, New NLSLoanPendingTransactionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSLogOut", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSLogOut(ByVal token As String) As String
            Dim results() As Object = Me.Invoke("NLSLogOut", New Object() {token})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSLogOut(ByVal token As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSLogOut", New Object() {token}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSLogOut(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSLogOutAsync(ByVal token As String)
            Me.NLSLogOutAsync(token, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSLogOutAsync(ByVal token As String, ByVal userState As Object)
            If (Me.NLSLogOutOperationCompleted Is Nothing) Then
                Me.NLSLogOutOperationCompleted = AddressOf Me.OnNLSLogOutOperationCompleted
            End If
            Me.InvokeAsync("NLSLogOut", New Object() {token}, Me.NLSLogOutOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSLogOutOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSLogOutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSLogOutCompleted(Me, New NLSLogOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSVerifyContact", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSVerifyContact(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String, ByVal FirstName As String, ByVal LastName As String, ByVal SSNumber As String, ByVal Address As String, ByVal City As String, ByVal State As String, ByVal Zip As String, ByVal Phone As String, ByVal LoanNumber As String, ByVal EmailAddress As String) As String
            Dim results() As Object = Me.Invoke("NLSVerifyContact", New Object() {db_type, server_name, database_name, FirstName, LastName, SSNumber, Address, City, State, Zip, Phone, LoanNumber, EmailAddress})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSVerifyContact(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String, ByVal FirstName As String, ByVal LastName As String, ByVal SSNumber As String, ByVal Address As String, ByVal City As String, ByVal State As String, ByVal Zip As String, ByVal Phone As String, ByVal LoanNumber As String, ByVal EmailAddress As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSVerifyContact", New Object() {db_type, server_name, database_name, FirstName, LastName, SSNumber, Address, City, State, Zip, Phone, LoanNumber, EmailAddress}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSVerifyContact(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSVerifyContactAsync(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String, ByVal FirstName As String, ByVal LastName As String, ByVal SSNumber As String, ByVal Address As String, ByVal City As String, ByVal State As String, ByVal Zip As String, ByVal Phone As String, ByVal LoanNumber As String, ByVal EmailAddress As String)
            Me.NLSVerifyContactAsync(db_type, server_name, database_name, FirstName, LastName, SSNumber, Address, City, State, Zip, Phone, LoanNumber, EmailAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSVerifyContactAsync(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String, ByVal FirstName As String, ByVal LastName As String, ByVal SSNumber As String, ByVal Address As String, ByVal City As String, ByVal State As String, ByVal Zip As String, ByVal Phone As String, ByVal LoanNumber As String, ByVal EmailAddress As String, ByVal userState As Object)
            If (Me.NLSVerifyContactOperationCompleted Is Nothing) Then
                Me.NLSVerifyContactOperationCompleted = AddressOf Me.OnNLSVerifyContactOperationCompleted
            End If
            Me.InvokeAsync("NLSVerifyContact", New Object() {db_type, server_name, database_name, FirstName, LastName, SSNumber, Address, City, State, Zip, Phone, LoanNumber, EmailAddress}, Me.NLSVerifyContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSVerifyContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSVerifyContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSVerifyContactCompleted(Me, New NLSVerifyContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSCreateCredentials", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSCreateCredentials(ByVal token As String, ByVal ContactUserName As String, ByVal ContactPassword As String, ByVal PasswordHint1 As String, ByVal PasswordAnswer1 As String, ByVal PasswordHint2 As String, ByVal PasswordAnswer2 As String) As String
            Dim results() As Object = Me.Invoke("NLSCreateCredentials", New Object() {token, ContactUserName, ContactPassword, PasswordHint1, PasswordAnswer1, PasswordHint2, PasswordAnswer2})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSCreateCredentials(ByVal token As String, ByVal ContactUserName As String, ByVal ContactPassword As String, ByVal PasswordHint1 As String, ByVal PasswordAnswer1 As String, ByVal PasswordHint2 As String, ByVal PasswordAnswer2 As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSCreateCredentials", New Object() {token, ContactUserName, ContactPassword, PasswordHint1, PasswordAnswer1, PasswordHint2, PasswordAnswer2}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSCreateCredentials(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSCreateCredentialsAsync(ByVal token As String, ByVal ContactUserName As String, ByVal ContactPassword As String, ByVal PasswordHint1 As String, ByVal PasswordAnswer1 As String, ByVal PasswordHint2 As String, ByVal PasswordAnswer2 As String)
            Me.NLSCreateCredentialsAsync(token, ContactUserName, ContactPassword, PasswordHint1, PasswordAnswer1, PasswordHint2, PasswordAnswer2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSCreateCredentialsAsync(ByVal token As String, ByVal ContactUserName As String, ByVal ContactPassword As String, ByVal PasswordHint1 As String, ByVal PasswordAnswer1 As String, ByVal PasswordHint2 As String, ByVal PasswordAnswer2 As String, ByVal userState As Object)
            If (Me.NLSCreateCredentialsOperationCompleted Is Nothing) Then
                Me.NLSCreateCredentialsOperationCompleted = AddressOf Me.OnNLSCreateCredentialsOperationCompleted
            End If
            Me.InvokeAsync("NLSCreateCredentials", New Object() {token, ContactUserName, ContactPassword, PasswordHint1, PasswordAnswer1, PasswordHint2, PasswordAnswer2}, Me.NLSCreateCredentialsOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSCreateCredentialsOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSCreateCredentialsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSCreateCredentialsCompleted(Me, New NLSCreateCredentialsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSPasswordRecoveryByEmail", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSPasswordRecoveryByEmail(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String, ByVal ContactUserName As String, ByVal IPAddress As String) As String
            Dim results() As Object = Me.Invoke("NLSPasswordRecoveryByEmail", New Object() {db_type, server_name, database_name, ContactUserName, IPAddress})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSPasswordRecoveryByEmail(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String, ByVal ContactUserName As String, ByVal IPAddress As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSPasswordRecoveryByEmail", New Object() {db_type, server_name, database_name, ContactUserName, IPAddress}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSPasswordRecoveryByEmail(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSPasswordRecoveryByEmailAsync(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String, ByVal ContactUserName As String, ByVal IPAddress As String)
            Me.NLSPasswordRecoveryByEmailAsync(db_type, server_name, database_name, ContactUserName, IPAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSPasswordRecoveryByEmailAsync(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String, ByVal ContactUserName As String, ByVal IPAddress As String, ByVal userState As Object)
            If (Me.NLSPasswordRecoveryByEmailOperationCompleted Is Nothing) Then
                Me.NLSPasswordRecoveryByEmailOperationCompleted = AddressOf Me.OnNLSPasswordRecoveryByEmailOperationCompleted
            End If
            Me.InvokeAsync("NLSPasswordRecoveryByEmail", New Object() {db_type, server_name, database_name, ContactUserName, IPAddress}, Me.NLSPasswordRecoveryByEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSPasswordRecoveryByEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSPasswordRecoveryByEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSPasswordRecoveryByEmailCompleted(Me, New NLSPasswordRecoveryByEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSPasswordRecoveryHints", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSPasswordRecoveryHints(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String, ByVal ContactUserName As String) As String
            Dim results() As Object = Me.Invoke("NLSPasswordRecoveryHints", New Object() {db_type, server_name, database_name, ContactUserName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSPasswordRecoveryHints(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String, ByVal ContactUserName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSPasswordRecoveryHints", New Object() {db_type, server_name, database_name, ContactUserName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSPasswordRecoveryHints(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSPasswordRecoveryHintsAsync(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String, ByVal ContactUserName As String)
            Me.NLSPasswordRecoveryHintsAsync(db_type, server_name, database_name, ContactUserName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSPasswordRecoveryHintsAsync(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String, ByVal ContactUserName As String, ByVal userState As Object)
            If (Me.NLSPasswordRecoveryHintsOperationCompleted Is Nothing) Then
                Me.NLSPasswordRecoveryHintsOperationCompleted = AddressOf Me.OnNLSPasswordRecoveryHintsOperationCompleted
            End If
            Me.InvokeAsync("NLSPasswordRecoveryHints", New Object() {db_type, server_name, database_name, ContactUserName}, Me.NLSPasswordRecoveryHintsOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSPasswordRecoveryHintsOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSPasswordRecoveryHintsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSPasswordRecoveryHintsCompleted(Me, New NLSPasswordRecoveryHintsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSPasswordRecoveryAnswers", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSPasswordRecoveryAnswers(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String, ByVal ContactUserName As String, ByVal HintAnswer1 As String, ByVal HintAnswer2 As String) As String
            Dim results() As Object = Me.Invoke("NLSPasswordRecoveryAnswers", New Object() {db_type, server_name, database_name, ContactUserName, HintAnswer1, HintAnswer2})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSPasswordRecoveryAnswers(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String, ByVal ContactUserName As String, ByVal HintAnswer1 As String, ByVal HintAnswer2 As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSPasswordRecoveryAnswers", New Object() {db_type, server_name, database_name, ContactUserName, HintAnswer1, HintAnswer2}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSPasswordRecoveryAnswers(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSPasswordRecoveryAnswersAsync(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String, ByVal ContactUserName As String, ByVal HintAnswer1 As String, ByVal HintAnswer2 As String)
            Me.NLSPasswordRecoveryAnswersAsync(db_type, server_name, database_name, ContactUserName, HintAnswer1, HintAnswer2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSPasswordRecoveryAnswersAsync(ByVal db_type As String, ByVal server_name As String, ByVal database_name As String, ByVal ContactUserName As String, ByVal HintAnswer1 As String, ByVal HintAnswer2 As String, ByVal userState As Object)
            If (Me.NLSPasswordRecoveryAnswersOperationCompleted Is Nothing) Then
                Me.NLSPasswordRecoveryAnswersOperationCompleted = AddressOf Me.OnNLSPasswordRecoveryAnswersOperationCompleted
            End If
            Me.InvokeAsync("NLSPasswordRecoveryAnswers", New Object() {db_type, server_name, database_name, ContactUserName, HintAnswer1, HintAnswer2}, Me.NLSPasswordRecoveryAnswersOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSPasswordRecoveryAnswersOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSPasswordRecoveryAnswersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSPasswordRecoveryAnswersCompleted(Me, New NLSPasswordRecoveryAnswersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSChangePassword", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSChangePassword(ByVal token As String, ByVal OldPassword As String, ByVal NewPassword As String) As String
            Dim results() As Object = Me.Invoke("NLSChangePassword", New Object() {token, OldPassword, NewPassword})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSChangePassword(ByVal token As String, ByVal OldPassword As String, ByVal NewPassword As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSChangePassword", New Object() {token, OldPassword, NewPassword}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSChangePassword(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSChangePasswordAsync(ByVal token As String, ByVal OldPassword As String, ByVal NewPassword As String)
            Me.NLSChangePasswordAsync(token, OldPassword, NewPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSChangePasswordAsync(ByVal token As String, ByVal OldPassword As String, ByVal NewPassword As String, ByVal userState As Object)
            If (Me.NLSChangePasswordOperationCompleted Is Nothing) Then
                Me.NLSChangePasswordOperationCompleted = AddressOf Me.OnNLSChangePasswordOperationCompleted
            End If
            Me.InvokeAsync("NLSChangePassword", New Object() {token, OldPassword, NewPassword}, Me.NLSChangePasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSChangePasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSChangePasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSChangePasswordCompleted(Me, New NLSChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSForceChangePassword", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSForceChangePassword(ByVal token As String, ByVal NewPassword As String) As String
            Dim results() As Object = Me.Invoke("NLSForceChangePassword", New Object() {token, NewPassword})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSForceChangePassword(ByVal token As String, ByVal NewPassword As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSForceChangePassword", New Object() {token, NewPassword}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSForceChangePassword(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSForceChangePasswordAsync(ByVal token As String, ByVal NewPassword As String)
            Me.NLSForceChangePasswordAsync(token, NewPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSForceChangePasswordAsync(ByVal token As String, ByVal NewPassword As String, ByVal userState As Object)
            If (Me.NLSForceChangePasswordOperationCompleted Is Nothing) Then
                Me.NLSForceChangePasswordOperationCompleted = AddressOf Me.OnNLSForceChangePasswordOperationCompleted
            End If
            Me.InvokeAsync("NLSForceChangePassword", New Object() {token, NewPassword}, Me.NLSForceChangePasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSForceChangePasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSForceChangePasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSForceChangePasswordCompleted(Me, New NLSForceChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSContactUDF", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSContactUDF(ByVal token As String, ByVal ContactNumber As String, ByVal FieldsToReturn As String) As String
            Dim results() As Object = Me.Invoke("NLSContactUDF", New Object() {token, ContactNumber, FieldsToReturn})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSContactUDF(ByVal token As String, ByVal ContactNumber As String, ByVal FieldsToReturn As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSContactUDF", New Object() {token, ContactNumber, FieldsToReturn}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSContactUDF(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSContactUDFAsync(ByVal token As String, ByVal ContactNumber As String, ByVal FieldsToReturn As String)
            Me.NLSContactUDFAsync(token, ContactNumber, FieldsToReturn, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSContactUDFAsync(ByVal token As String, ByVal ContactNumber As String, ByVal FieldsToReturn As String, ByVal userState As Object)
            If (Me.NLSContactUDFOperationCompleted Is Nothing) Then
                Me.NLSContactUDFOperationCompleted = AddressOf Me.OnNLSContactUDFOperationCompleted
            End If
            Me.InvokeAsync("NLSContactUDF", New Object() {token, ContactNumber, FieldsToReturn}, Me.NLSContactUDFOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSContactUDFOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSContactUDFCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSContactUDFCompleted(Me, New NLSContactUDFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSLoanDetailUDF", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSLoanDetailUDF(ByVal token As String, ByVal LoanNumber As String, ByVal FieldsToReturn As String) As String
            Dim results() As Object = Me.Invoke("NLSLoanDetailUDF", New Object() {token, LoanNumber, FieldsToReturn})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSLoanDetailUDF(ByVal token As String, ByVal LoanNumber As String, ByVal FieldsToReturn As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSLoanDetailUDF", New Object() {token, LoanNumber, FieldsToReturn}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSLoanDetailUDF(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSLoanDetailUDFAsync(ByVal token As String, ByVal LoanNumber As String, ByVal FieldsToReturn As String)
            Me.NLSLoanDetailUDFAsync(token, LoanNumber, FieldsToReturn, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSLoanDetailUDFAsync(ByVal token As String, ByVal LoanNumber As String, ByVal FieldsToReturn As String, ByVal userState As Object)
            If (Me.NLSLoanDetailUDFOperationCompleted Is Nothing) Then
                Me.NLSLoanDetailUDFOperationCompleted = AddressOf Me.OnNLSLoanDetailUDFOperationCompleted
            End If
            Me.InvokeAsync("NLSLoanDetailUDF", New Object() {token, LoanNumber, FieldsToReturn}, Me.NLSLoanDetailUDFOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSLoanDetailUDFOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSLoanDetailUDFCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSLoanDetailUDFCompleted(Me, New NLSLoanDetailUDFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSLoanPaymentsDue", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSLoanPaymentsDue(ByVal token As String, ByVal LoanNumber As String, ByVal BeginningDate As String, ByVal EndingDate As String) As String
            Dim results() As Object = Me.Invoke("NLSLoanPaymentsDue", New Object() {token, LoanNumber, BeginningDate, EndingDate})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSLoanPaymentsDue(ByVal token As String, ByVal LoanNumber As String, ByVal BeginningDate As String, ByVal EndingDate As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSLoanPaymentsDue", New Object() {token, LoanNumber, BeginningDate, EndingDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSLoanPaymentsDue(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSLoanPaymentsDueAsync(ByVal token As String, ByVal LoanNumber As String, ByVal BeginningDate As String, ByVal EndingDate As String)
            Me.NLSLoanPaymentsDueAsync(token, LoanNumber, BeginningDate, EndingDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSLoanPaymentsDueAsync(ByVal token As String, ByVal LoanNumber As String, ByVal BeginningDate As String, ByVal EndingDate As String, ByVal userState As Object)
            If (Me.NLSLoanPaymentsDueOperationCompleted Is Nothing) Then
                Me.NLSLoanPaymentsDueOperationCompleted = AddressOf Me.OnNLSLoanPaymentsDueOperationCompleted
            End If
            Me.InvokeAsync("NLSLoanPaymentsDue", New Object() {token, LoanNumber, BeginningDate, EndingDate}, Me.NLSLoanPaymentsDueOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSLoanPaymentsDueOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSLoanPaymentsDueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSLoanPaymentsDueCompleted(Me, New NLSLoanPaymentsDueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSLoanPaymentHistory", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSLoanPaymentHistory(ByVal token As String, ByVal LoanNumber As String, ByVal BeginningDate As String, ByVal EndingDate As String) As String
            Dim results() As Object = Me.Invoke("NLSLoanPaymentHistory", New Object() {token, LoanNumber, BeginningDate, EndingDate})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSLoanPaymentHistory(ByVal token As String, ByVal LoanNumber As String, ByVal BeginningDate As String, ByVal EndingDate As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSLoanPaymentHistory", New Object() {token, LoanNumber, BeginningDate, EndingDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSLoanPaymentHistory(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSLoanPaymentHistoryAsync(ByVal token As String, ByVal LoanNumber As String, ByVal BeginningDate As String, ByVal EndingDate As String)
            Me.NLSLoanPaymentHistoryAsync(token, LoanNumber, BeginningDate, EndingDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSLoanPaymentHistoryAsync(ByVal token As String, ByVal LoanNumber As String, ByVal BeginningDate As String, ByVal EndingDate As String, ByVal userState As Object)
            If (Me.NLSLoanPaymentHistoryOperationCompleted Is Nothing) Then
                Me.NLSLoanPaymentHistoryOperationCompleted = AddressOf Me.OnNLSLoanPaymentHistoryOperationCompleted
            End If
            Me.InvokeAsync("NLSLoanPaymentHistory", New Object() {token, LoanNumber, BeginningDate, EndingDate}, Me.NLSLoanPaymentHistoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSLoanPaymentHistoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSLoanPaymentHistoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSLoanPaymentHistoryCompleted(Me, New NLSLoanPaymentHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSStatements", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSStatements(ByVal token As String, ByVal LoanNumber As String, ByVal BeginningDate As String, ByVal EndingDate As String) As String
            Dim results() As Object = Me.Invoke("NLSStatements", New Object() {token, LoanNumber, BeginningDate, EndingDate})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSStatements(ByVal token As String, ByVal LoanNumber As String, ByVal BeginningDate As String, ByVal EndingDate As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSStatements", New Object() {token, LoanNumber, BeginningDate, EndingDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSStatements(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSStatementsAsync(ByVal token As String, ByVal LoanNumber As String, ByVal BeginningDate As String, ByVal EndingDate As String)
            Me.NLSStatementsAsync(token, LoanNumber, BeginningDate, EndingDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSStatementsAsync(ByVal token As String, ByVal LoanNumber As String, ByVal BeginningDate As String, ByVal EndingDate As String, ByVal userState As Object)
            If (Me.NLSStatementsOperationCompleted Is Nothing) Then
                Me.NLSStatementsOperationCompleted = AddressOf Me.OnNLSStatementsOperationCompleted
            End If
            Me.InvokeAsync("NLSStatements", New Object() {token, LoanNumber, BeginningDate, EndingDate}, Me.NLSStatementsOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSStatementsOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSStatementsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSStatementsCompleted(Me, New NLSStatementsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSCalculateAmortizedPaymentAmount", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSCalculateAmortizedPaymentAmount(ByVal LoanAmount As Double, ByVal InterestRate As Double, ByVal NumberOfPayments As Integer, ByVal PaymentsPerYear As Integer, ByVal BeginningPeriodAmortizationFlag As Boolean) As String
            Dim results() As Object = Me.Invoke("NLSCalculateAmortizedPaymentAmount", New Object() {LoanAmount, InterestRate, NumberOfPayments, PaymentsPerYear, BeginningPeriodAmortizationFlag})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSCalculateAmortizedPaymentAmount(ByVal LoanAmount As Double, ByVal InterestRate As Double, ByVal NumberOfPayments As Integer, ByVal PaymentsPerYear As Integer, ByVal BeginningPeriodAmortizationFlag As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSCalculateAmortizedPaymentAmount", New Object() {LoanAmount, InterestRate, NumberOfPayments, PaymentsPerYear, BeginningPeriodAmortizationFlag}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSCalculateAmortizedPaymentAmount(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSCalculateAmortizedPaymentAmountAsync(ByVal LoanAmount As Double, ByVal InterestRate As Double, ByVal NumberOfPayments As Integer, ByVal PaymentsPerYear As Integer, ByVal BeginningPeriodAmortizationFlag As Boolean)
            Me.NLSCalculateAmortizedPaymentAmountAsync(LoanAmount, InterestRate, NumberOfPayments, PaymentsPerYear, BeginningPeriodAmortizationFlag, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSCalculateAmortizedPaymentAmountAsync(ByVal LoanAmount As Double, ByVal InterestRate As Double, ByVal NumberOfPayments As Integer, ByVal PaymentsPerYear As Integer, ByVal BeginningPeriodAmortizationFlag As Boolean, ByVal userState As Object)
            If (Me.NLSCalculateAmortizedPaymentAmountOperationCompleted Is Nothing) Then
                Me.NLSCalculateAmortizedPaymentAmountOperationCompleted = AddressOf Me.OnNLSCalculateAmortizedPaymentAmountOperationCompleted
            End If
            Me.InvokeAsync("NLSCalculateAmortizedPaymentAmount", New Object() {LoanAmount, InterestRate, NumberOfPayments, PaymentsPerYear, BeginningPeriodAmortizationFlag}, Me.NLSCalculateAmortizedPaymentAmountOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSCalculateAmortizedPaymentAmountOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSCalculateAmortizedPaymentAmountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSCalculateAmortizedPaymentAmountCompleted(Me, New NLSCalculateAmortizedPaymentAmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSCalculateAmortizedPaymentAmountWithBalloon", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSCalculateAmortizedPaymentAmountWithBalloon(ByVal LoanAmount As Double, ByVal InterestRate As Double, ByVal NumberOfPayments As Integer, ByVal NumberOfPaymentsDue As Integer, ByVal PaymentsPerYear As Integer, ByVal BeginningPeriodAmortizationFlag As Boolean, ByRef working_balloon_payment As Double) As String
            Dim results() As Object = Me.Invoke("NLSCalculateAmortizedPaymentAmountWithBalloon", New Object() {LoanAmount, InterestRate, NumberOfPayments, NumberOfPaymentsDue, PaymentsPerYear, BeginningPeriodAmortizationFlag})
            working_balloon_payment = CType(results(1),Double)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSCalculateAmortizedPaymentAmountWithBalloon(ByVal LoanAmount As Double, ByVal InterestRate As Double, ByVal NumberOfPayments As Integer, ByVal NumberOfPaymentsDue As Integer, ByVal PaymentsPerYear As Integer, ByVal BeginningPeriodAmortizationFlag As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSCalculateAmortizedPaymentAmountWithBalloon", New Object() {LoanAmount, InterestRate, NumberOfPayments, NumberOfPaymentsDue, PaymentsPerYear, BeginningPeriodAmortizationFlag}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSCalculateAmortizedPaymentAmountWithBalloon(ByVal asyncResult As System.IAsyncResult, ByRef working_balloon_payment As Double) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            working_balloon_payment = CType(results(1),Double)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSCalculateAmortizedPaymentAmountWithBalloonAsync(ByVal LoanAmount As Double, ByVal InterestRate As Double, ByVal NumberOfPayments As Integer, ByVal NumberOfPaymentsDue As Integer, ByVal PaymentsPerYear As Integer, ByVal BeginningPeriodAmortizationFlag As Boolean)
            Me.NLSCalculateAmortizedPaymentAmountWithBalloonAsync(LoanAmount, InterestRate, NumberOfPayments, NumberOfPaymentsDue, PaymentsPerYear, BeginningPeriodAmortizationFlag, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSCalculateAmortizedPaymentAmountWithBalloonAsync(ByVal LoanAmount As Double, ByVal InterestRate As Double, ByVal NumberOfPayments As Integer, ByVal NumberOfPaymentsDue As Integer, ByVal PaymentsPerYear As Integer, ByVal BeginningPeriodAmortizationFlag As Boolean, ByVal userState As Object)
            If (Me.NLSCalculateAmortizedPaymentAmountWithBalloonOperationCompleted Is Nothing) Then
                Me.NLSCalculateAmortizedPaymentAmountWithBalloonOperationCompleted = AddressOf Me.OnNLSCalculateAmortizedPaymentAmountWithBalloonOperationCompleted
            End If
            Me.InvokeAsync("NLSCalculateAmortizedPaymentAmountWithBalloon", New Object() {LoanAmount, InterestRate, NumberOfPayments, NumberOfPaymentsDue, PaymentsPerYear, BeginningPeriodAmortizationFlag}, Me.NLSCalculateAmortizedPaymentAmountWithBalloonOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSCalculateAmortizedPaymentAmountWithBalloonOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSCalculateAmortizedPaymentAmountWithBalloonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSCalculateAmortizedPaymentAmountWithBalloonCompleted(Me, New NLSCalculateAmortizedPaymentAmountWithBalloonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/NLSMethod", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function NLSMethod(ByVal input_xml As String, ByRef output_xml As String) As Integer
            Dim results() As Object = Me.Invoke("NLSMethod", New Object() {input_xml})
            output_xml = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginNLSMethod(ByVal input_xml As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("NLSMethod", New Object() {input_xml}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNLSMethod(ByVal asyncResult As System.IAsyncResult, ByRef output_xml As String) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            output_xml = CType(results(1),String)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NLSMethodAsync(ByVal input_xml As String)
            Me.NLSMethodAsync(input_xml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NLSMethodAsync(ByVal input_xml As String, ByVal userState As Object)
            If (Me.NLSMethodOperationCompleted Is Nothing) Then
                Me.NLSMethodOperationCompleted = AddressOf Me.OnNLSMethodOperationCompleted
            End If
            Me.InvokeAsync("NLSMethod", New Object() {input_xml}, Me.NLSMethodOperationCompleted, userState)
        End Sub
        
        Private Sub OnNLSMethodOperationCompleted(ByVal arg As Object)
            If (Not (Me.NLSMethodCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NLSMethodCompleted(Me, New NLSMethodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/ImportXML", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportXML(ByVal ServerName As String, ByVal DatabaseName As String, ByVal ImportString As String, ByRef ErrorMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("ImportXML", New Object() {ServerName, DatabaseName, ImportString})
            ErrorMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginImportXML(ByVal ServerName As String, ByVal DatabaseName As String, ByVal ImportString As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ImportXML", New Object() {ServerName, DatabaseName, ImportString}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndImportXML(ByVal asyncResult As System.IAsyncResult, ByRef ErrorMessage As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            ErrorMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportXMLAsync(ByVal ServerName As String, ByVal DatabaseName As String, ByVal ImportString As String)
            Me.ImportXMLAsync(ServerName, DatabaseName, ImportString, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportXMLAsync(ByVal ServerName As String, ByVal DatabaseName As String, ByVal ImportString As String, ByVal userState As Object)
            If (Me.ImportXMLOperationCompleted Is Nothing) Then
                Me.ImportXMLOperationCompleted = AddressOf Me.OnImportXMLOperationCompleted
            End If
            Me.InvokeAsync("ImportXML", New Object() {ServerName, DatabaseName, ImportString}, Me.ImportXMLOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportXMLOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportXMLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportXMLCompleted(Me, New ImportXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/TestImportXML", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TestImportXML(ByVal ServerName As String, ByVal DatabaseName As String, ByVal ImportString As String, ByRef ErrorMessage As String) As Boolean
            Dim results() As Object = Me.Invoke("TestImportXML", New Object() {ServerName, DatabaseName, ImportString})
            ErrorMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginTestImportXML(ByVal ServerName As String, ByVal DatabaseName As String, ByVal ImportString As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TestImportXML", New Object() {ServerName, DatabaseName, ImportString}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndTestImportXML(ByVal asyncResult As System.IAsyncResult, ByRef ErrorMessage As String) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            ErrorMessage = CType(results(1),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TestImportXMLAsync(ByVal ServerName As String, ByVal DatabaseName As String, ByVal ImportString As String)
            Me.TestImportXMLAsync(ServerName, DatabaseName, ImportString, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TestImportXMLAsync(ByVal ServerName As String, ByVal DatabaseName As String, ByVal ImportString As String, ByVal userState As Object)
            If (Me.TestImportXMLOperationCompleted Is Nothing) Then
                Me.TestImportXMLOperationCompleted = AddressOf Me.OnTestImportXMLOperationCompleted
            End If
            Me.InvokeAsync("TestImportXML", New Object() {ServerName, DatabaseName, ImportString}, Me.TestImportXMLOperationCompleted, userState)
        End Sub
        
        Private Sub OnTestImportXMLOperationCompleted(ByVal arg As Object)
            If (Not (Me.TestImportXMLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TestImportXMLCompleted(Me, New TestImportXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nortridge.com/PostStatement", RequestNamespace:="http://nortridge.com/", ResponseNamespace:="http://nortridge.com/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PostStatement(ByVal statementXml As String) As String
            Dim results() As Object = Me.Invoke("PostStatement", New Object() {statementXml})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginPostStatement(ByVal statementXml As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PostStatement", New Object() {statementXml}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPostStatement(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PostStatementAsync(ByVal statementXml As String)
            Me.PostStatementAsync(statementXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PostStatementAsync(ByVal statementXml As String, ByVal userState As Object)
            If (Me.PostStatementOperationCompleted Is Nothing) Then
                Me.PostStatementOperationCompleted = AddressOf Me.OnPostStatementOperationCompleted
            End If
            Me.InvokeAsync("PostStatement", New Object() {statementXml}, Me.PostStatementOperationCompleted, userState)
        End Sub
        
        Private Sub OnPostStatementOperationCompleted(ByVal arg As Object)
            If (Not (Me.PostStatementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PostStatementCompleted(Me, New PostStatementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub DBConnectUsingSACompletedEventHandler(ByVal sender As Object, ByVal e As DBConnectUsingSACompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DBConnectUsingSACompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub DBConnectUsingWindowsAuthenticationCompletedEventHandler(ByVal sender As Object, ByVal e As DBConnectUsingWindowsAuthenticationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DBConnectUsingWindowsAuthenticationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSInitializeAndImportXMLWindowsAuthenticationCompletedEventHandler(ByVal sender As Object, ByVal e As NLSInitializeAndImportXMLWindowsAuthenticationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSInitializeAndImportXMLWindowsAuthenticationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSInitializeAndImportXMLDBAuthenticationCompletedEventHandler(ByVal sender As Object, ByVal e As NLSInitializeAndImportXMLDBAuthenticationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSInitializeAndImportXMLDBAuthenticationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSPrimaHealthTestCompletedEventHandler(ByVal sender As Object, ByVal e As NLSPrimaHealthTestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSPrimaHealthTestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSAuthenticateCompletedEventHandler(ByVal sender As Object, ByVal e As NLSAuthenticateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSAuthenticateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSGlobalAuthenticationCompletedEventHandler(ByVal sender As Object, ByVal e As NLSGlobalAuthenticationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSGlobalAuthenticationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSGetLoanListCompletedEventHandler(ByVal sender As Object, ByVal e As NLSGetLoanListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSGetLoanListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSGetLoanDetailCompletedEventHandler(ByVal sender As Object, ByVal e As NLSGetLoanDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSGetLoanDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSGetContactCompletedEventHandler(ByVal sender As Object, ByVal e As NLSGetContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSGetContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSStatementImageCompletedEventHandler(ByVal sender As Object, ByVal e As NLSStatementImageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSStatementImageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSLoanPendingTransactionsCompletedEventHandler(ByVal sender As Object, ByVal e As NLSLoanPendingTransactionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSLoanPendingTransactionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSLogOutCompletedEventHandler(ByVal sender As Object, ByVal e As NLSLogOutCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSLogOutCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSVerifyContactCompletedEventHandler(ByVal sender As Object, ByVal e As NLSVerifyContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSVerifyContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSCreateCredentialsCompletedEventHandler(ByVal sender As Object, ByVal e As NLSCreateCredentialsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSCreateCredentialsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSPasswordRecoveryByEmailCompletedEventHandler(ByVal sender As Object, ByVal e As NLSPasswordRecoveryByEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSPasswordRecoveryByEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSPasswordRecoveryHintsCompletedEventHandler(ByVal sender As Object, ByVal e As NLSPasswordRecoveryHintsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSPasswordRecoveryHintsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSPasswordRecoveryAnswersCompletedEventHandler(ByVal sender As Object, ByVal e As NLSPasswordRecoveryAnswersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSPasswordRecoveryAnswersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSChangePasswordCompletedEventHandler(ByVal sender As Object, ByVal e As NLSChangePasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSChangePasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSForceChangePasswordCompletedEventHandler(ByVal sender As Object, ByVal e As NLSForceChangePasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSForceChangePasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSContactUDFCompletedEventHandler(ByVal sender As Object, ByVal e As NLSContactUDFCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSContactUDFCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSLoanDetailUDFCompletedEventHandler(ByVal sender As Object, ByVal e As NLSLoanDetailUDFCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSLoanDetailUDFCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSLoanPaymentsDueCompletedEventHandler(ByVal sender As Object, ByVal e As NLSLoanPaymentsDueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSLoanPaymentsDueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSLoanPaymentHistoryCompletedEventHandler(ByVal sender As Object, ByVal e As NLSLoanPaymentHistoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSLoanPaymentHistoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSStatementsCompletedEventHandler(ByVal sender As Object, ByVal e As NLSStatementsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSStatementsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSCalculateAmortizedPaymentAmountCompletedEventHandler(ByVal sender As Object, ByVal e As NLSCalculateAmortizedPaymentAmountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSCalculateAmortizedPaymentAmountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSCalculateAmortizedPaymentAmountWithBalloonCompletedEventHandler(ByVal sender As Object, ByVal e As NLSCalculateAmortizedPaymentAmountWithBalloonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSCalculateAmortizedPaymentAmountWithBalloonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property working_balloon_payment() As Double
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Double)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub NLSMethodCompletedEventHandler(ByVal sender As Object, ByVal e As NLSMethodCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NLSMethodCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property output_xml() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub ImportXMLCompletedEventHandler(ByVal sender As Object, ByVal e As ImportXMLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportXMLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrorMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub TestImportXMLCompletedEventHandler(ByVal sender As Object, ByVal e As TestImportXMLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TestImportXMLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ErrorMessage() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")>  _
    Public Delegate Sub PostStatementCompletedEventHandler(ByVal sender As Object, ByVal e As PostStatementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PostStatementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
