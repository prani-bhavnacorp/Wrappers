'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18063
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18063.
'
Namespace Phoenix
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="PhoenixXMSoap", [Namespace]:="http://lbss.com/PhoenixXM/")>  _
    Partial Public Class PhoenixXM
		Inherits Microsoft.Web.Services3.WebServicesClientProtocol
        
        Private GetSchemaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDBActionSchemaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private xmDebugHeaderValueField As XmDebugHeader
        
        Private ProcessXMLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessExOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetHashOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReloadConfigOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAdapterStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StartAdapterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StopAdapterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_Phoenix_PhoenixXM
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Property XmDebugHeaderValue() As XmDebugHeader
            Get
                Return Me.xmDebugHeaderValueField
            End Get
            Set
                Me.xmDebugHeaderValueField = value
            End Set
        End Property
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetSchemaCompleted As GetSchemaCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDBActionSchemaCompleted As GetDBActionSchemaCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessXMLCompleted As ProcessXMLCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessExCompleted As ProcessExCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStatusCompleted As GetStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetHashCompleted As GetHashCompletedEventHandler
        
        '''<remarks/>
        Public Event ReloadConfigCompleted As ReloadConfigCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAdapterStatusCompleted As GetAdapterStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event StartAdapterCompleted As StartAdapterCompletedEventHandler
        
        '''<remarks/>
        Public Event StopAdapterCompleted As StopAdapterCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lbss.com/PhoenixXM/GetSchema", RequestNamespace:="http://lbss.com/PhoenixXM/", ResponseNamespace:="http://lbss.com/PhoenixXM/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSchema() As String
            Dim results() As Object = Me.Invoke("GetSchema", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetSchema(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetSchema", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetSchema(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSchemaAsync()
            Me.GetSchemaAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSchemaAsync(ByVal userState As Object)
            If (Me.GetSchemaOperationCompleted Is Nothing) Then
                Me.GetSchemaOperationCompleted = AddressOf Me.OnGetSchemaOperationCompleted
            End If
            Me.InvokeAsync("GetSchema", New Object(-1) {}, Me.GetSchemaOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSchemaOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSchemaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSchemaCompleted(Me, New GetSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lbss.com/PhoenixXM/GetDBActionSchema", RequestNamespace:="http://lbss.com/PhoenixXM/", ResponseNamespace:="http://lbss.com/PhoenixXM/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDBActionSchema(ByVal pTableName As String) As String
            Dim results() As Object = Me.Invoke("GetDBActionSchema", New Object() {pTableName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetDBActionSchema(ByVal pTableName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetDBActionSchema", New Object() {pTableName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetDBActionSchema(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDBActionSchemaAsync(ByVal pTableName As String)
            Me.GetDBActionSchemaAsync(pTableName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDBActionSchemaAsync(ByVal pTableName As String, ByVal userState As Object)
            If (Me.GetDBActionSchemaOperationCompleted Is Nothing) Then
                Me.GetDBActionSchemaOperationCompleted = AddressOf Me.OnGetDBActionSchemaOperationCompleted
            End If
            Me.InvokeAsync("GetDBActionSchema", New Object() {pTableName}, Me.GetDBActionSchemaOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDBActionSchemaOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDBActionSchemaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDBActionSchemaCompleted(Me, New GetDBActionSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("XmDebugHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lbss.com/PhoenixXM/ProcessXML", RequestNamespace:="http://lbss.com/PhoenixXM/", ResponseNamespace:="http://lbss.com/PhoenixXM/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessXML(ByVal pInputXML As String) As String
            Dim results() As Object = Me.Invoke("ProcessXML", New Object() {pInputXML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginProcessXML(ByVal pInputXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ProcessXML", New Object() {pInputXML}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndProcessXML(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessXMLAsync(ByVal pInputXML As String)
            Me.ProcessXMLAsync(pInputXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessXMLAsync(ByVal pInputXML As String, ByVal userState As Object)
            If (Me.ProcessXMLOperationCompleted Is Nothing) Then
                Me.ProcessXMLOperationCompleted = AddressOf Me.OnProcessXMLOperationCompleted
            End If
            Me.InvokeAsync("ProcessXML", New Object() {pInputXML}, Me.ProcessXMLOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessXMLOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessXMLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessXMLCompleted(Me, New ProcessXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("XmDebugHeaderValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lbss.com/PhoenixXM/ProcessEx", RequestNamespace:="http://lbss.com/PhoenixXM/", ResponseNamespace:="http://lbss.com/PhoenixXM/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessEx(ByVal pConnString As String, ByVal pInputXML As String) As String
            Dim results() As Object = Me.Invoke("ProcessEx", New Object() {pConnString, pInputXML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginProcessEx(ByVal pConnString As String, ByVal pInputXML As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ProcessEx", New Object() {pConnString, pInputXML}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndProcessEx(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessExAsync(ByVal pConnString As String, ByVal pInputXML As String)
            Me.ProcessExAsync(pConnString, pInputXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessExAsync(ByVal pConnString As String, ByVal pInputXML As String, ByVal userState As Object)
            If (Me.ProcessExOperationCompleted Is Nothing) Then
                Me.ProcessExOperationCompleted = AddressOf Me.OnProcessExOperationCompleted
            End If
            Me.InvokeAsync("ProcessEx", New Object() {pConnString, pInputXML}, Me.ProcessExOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessExOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessExCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessExCompleted(Me, New ProcessExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lbss.com/PhoenixXM/GetStatus", RequestNamespace:="http://lbss.com/PhoenixXM/", ResponseNamespace:="http://lbss.com/PhoenixXM/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStatus(ByVal relGroupName As String, ByVal dbDefName As String, ByVal otherInfo As String) As String
            Dim results() As Object = Me.Invoke("GetStatus", New Object() {relGroupName, dbDefName, otherInfo})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetStatus(ByVal relGroupName As String, ByVal dbDefName As String, ByVal otherInfo As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetStatus", New Object() {relGroupName, dbDefName, otherInfo}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetStatus(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStatusAsync(ByVal relGroupName As String, ByVal dbDefName As String, ByVal otherInfo As String)
            Me.GetStatusAsync(relGroupName, dbDefName, otherInfo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStatusAsync(ByVal relGroupName As String, ByVal dbDefName As String, ByVal otherInfo As String, ByVal userState As Object)
            If (Me.GetStatusOperationCompleted Is Nothing) Then
                Me.GetStatusOperationCompleted = AddressOf Me.OnGetStatusOperationCompleted
            End If
            Me.InvokeAsync("GetStatus", New Object() {relGroupName, dbDefName, otherInfo}, Me.GetStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStatusCompleted(Me, New GetStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lbss.com/PhoenixXM/GetHash", RequestNamespace:="http://lbss.com/PhoenixXM/", ResponseNamespace:="http://lbss.com/PhoenixXM/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetHash(ByVal requestHash As String, ByVal requestMachine As String) As String
            Dim results() As Object = Me.Invoke("GetHash", New Object() {requestHash, requestMachine})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetHash(ByVal requestHash As String, ByVal requestMachine As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetHash", New Object() {requestHash, requestMachine}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetHash(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetHashAsync(ByVal requestHash As String, ByVal requestMachine As String)
            Me.GetHashAsync(requestHash, requestMachine, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetHashAsync(ByVal requestHash As String, ByVal requestMachine As String, ByVal userState As Object)
            If (Me.GetHashOperationCompleted Is Nothing) Then
                Me.GetHashOperationCompleted = AddressOf Me.OnGetHashOperationCompleted
            End If
            Me.InvokeAsync("GetHash", New Object() {requestHash, requestMachine}, Me.GetHashOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetHashOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetHashCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetHashCompleted(Me, New GetHashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lbss.com/PhoenixXM/ReloadConfig", RequestNamespace:="http://lbss.com/PhoenixXM/", ResponseNamespace:="http://lbss.com/PhoenixXM/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ReloadConfig(ByVal appHash As String)
            Me.Invoke("ReloadConfig", New Object() {appHash})
        End Sub
        
        '''<remarks/>
        Public Function BeginReloadConfig(ByVal appHash As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ReloadConfig", New Object() {appHash}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndReloadConfig(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReloadConfigAsync(ByVal appHash As String)
            Me.ReloadConfigAsync(appHash, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReloadConfigAsync(ByVal appHash As String, ByVal userState As Object)
            If (Me.ReloadConfigOperationCompleted Is Nothing) Then
                Me.ReloadConfigOperationCompleted = AddressOf Me.OnReloadConfigOperationCompleted
            End If
            Me.InvokeAsync("ReloadConfig", New Object() {appHash}, Me.ReloadConfigOperationCompleted, userState)
        End Sub
        
        Private Sub OnReloadConfigOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReloadConfigCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReloadConfigCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lbss.com/PhoenixXM/GetAdapterStatus", RequestNamespace:="http://lbss.com/PhoenixXM/", ResponseNamespace:="http://lbss.com/PhoenixXM/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAdapterStatus() As String
            Dim results() As Object = Me.Invoke("GetAdapterStatus", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetAdapterStatus(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetAdapterStatus", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetAdapterStatus(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAdapterStatusAsync()
            Me.GetAdapterStatusAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAdapterStatusAsync(ByVal userState As Object)
            If (Me.GetAdapterStatusOperationCompleted Is Nothing) Then
                Me.GetAdapterStatusOperationCompleted = AddressOf Me.OnGetAdapterStatusOperationCompleted
            End If
            Me.InvokeAsync("GetAdapterStatus", New Object(-1) {}, Me.GetAdapterStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAdapterStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAdapterStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAdapterStatusCompleted(Me, New GetAdapterStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lbss.com/PhoenixXM/StartAdapter", RequestNamespace:="http://lbss.com/PhoenixXM/", ResponseNamespace:="http://lbss.com/PhoenixXM/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub StartAdapter(ByVal appHash As String, ByVal adapterName As String)
            Me.Invoke("StartAdapter", New Object() {appHash, adapterName})
        End Sub
        
        '''<remarks/>
        Public Function BeginStartAdapter(ByVal appHash As String, ByVal adapterName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("StartAdapter", New Object() {appHash, adapterName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndStartAdapter(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StartAdapterAsync(ByVal appHash As String, ByVal adapterName As String)
            Me.StartAdapterAsync(appHash, adapterName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StartAdapterAsync(ByVal appHash As String, ByVal adapterName As String, ByVal userState As Object)
            If (Me.StartAdapterOperationCompleted Is Nothing) Then
                Me.StartAdapterOperationCompleted = AddressOf Me.OnStartAdapterOperationCompleted
            End If
            Me.InvokeAsync("StartAdapter", New Object() {appHash, adapterName}, Me.StartAdapterOperationCompleted, userState)
        End Sub
        
        Private Sub OnStartAdapterOperationCompleted(ByVal arg As Object)
            If (Not (Me.StartAdapterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StartAdapterCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://lbss.com/PhoenixXM/StopAdapter", RequestNamespace:="http://lbss.com/PhoenixXM/", ResponseNamespace:="http://lbss.com/PhoenixXM/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub StopAdapter(ByVal appHash As String, ByVal adapterName As String, ByVal threadId As Integer)
            Me.Invoke("StopAdapter", New Object() {appHash, adapterName, threadId})
        End Sub
        
        '''<remarks/>
        Public Function BeginStopAdapter(ByVal appHash As String, ByVal adapterName As String, ByVal threadId As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("StopAdapter", New Object() {appHash, adapterName, threadId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Sub EndStopAdapter(ByVal asyncResult As System.IAsyncResult)
            Me.EndInvoke(asyncResult)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StopAdapterAsync(ByVal appHash As String, ByVal adapterName As String, ByVal threadId As Integer)
            Me.StopAdapterAsync(appHash, adapterName, threadId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StopAdapterAsync(ByVal appHash As String, ByVal adapterName As String, ByVal threadId As Integer, ByVal userState As Object)
            If (Me.StopAdapterOperationCompleted Is Nothing) Then
                Me.StopAdapterOperationCompleted = AddressOf Me.OnStopAdapterOperationCompleted
            End If
            Me.InvokeAsync("StopAdapter", New Object() {appHash, adapterName, threadId}, Me.StopAdapterOperationCompleted, userState)
        End Sub
        
        Private Sub OnStopAdapterOperationCompleted(ByVal arg As Object)
            If (Not (Me.StopAdapterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StopAdapterCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://lbss.com/PhoenixXM/"),  _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="http://lbss.com/PhoenixXM/", IsNullable:=false)>  _
    Partial Public Class XmDebugHeader
        Inherits System.Web.Services.Protocols.SoapHeader
        
        Private noCommitModeField As Boolean
        
        Private warningLevelField As LogLevel
        
        Private sqlLevelField As LogLevel
        
        Private isLogEnabledField As Boolean
        
        Private debugLevelField As LogLevel
        
        Private infoLevelField As LogLevel
        
        Private logInResponseField As Boolean
        
        Private anyAttrField() As System.Xml.XmlAttribute
        
        '''<remarks/>
        Public Property NoCommitMode() As Boolean
            Get
                Return Me.noCommitModeField
            End Get
            Set
                Me.noCommitModeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property WarningLevel() As LogLevel
            Get
                Return Me.warningLevelField
            End Get
            Set
                Me.warningLevelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SqlLevel() As LogLevel
            Get
                Return Me.sqlLevelField
            End Get
            Set
                Me.sqlLevelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IsLogEnabled() As Boolean
            Get
                Return Me.isLogEnabledField
            End Get
            Set
                Me.isLogEnabledField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DebugLevel() As LogLevel
            Get
                Return Me.debugLevelField
            End Get
            Set
                Me.debugLevelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property InfoLevel() As LogLevel
            Get
                Return Me.infoLevelField
            End Get
            Set
                Me.infoLevelField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LogInResponse() As Boolean
            Get
                Return Me.logInResponseField
            End Get
            Set
                Me.logInResponseField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyAttributeAttribute()>  _
        Public Property AnyAttr() As System.Xml.XmlAttribute()
            Get
                Return Me.anyAttrField
            End Get
            Set
                Me.anyAttrField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18060"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://lbss.com/PhoenixXM/")>  _
    Public Enum LogLevel
        
        '''<remarks/>
        None
        
        '''<remarks/>
        Normal
        
        '''<remarks/>
        Detailed
        
        '''<remarks/>
        MoreDetailed
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetSchemaCompletedEventHandler(ByVal sender As Object, ByVal e As GetSchemaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSchemaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetDBActionSchemaCompletedEventHandler(ByVal sender As Object, ByVal e As GetDBActionSchemaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDBActionSchemaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub ProcessXMLCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessXMLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessXMLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub ProcessExCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessExCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessExCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetHashCompletedEventHandler(ByVal sender As Object, ByVal e As GetHashCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetHashCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub ReloadConfigCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub GetAdapterStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetAdapterStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAdapterStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub StartAdapterCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub StopAdapterCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
End Namespace
