'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3082
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3082.
'
Namespace FirstAmerican
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ElsWebOrderSoap", [Namespace]:="http://soap.elsonline.net")>  _
    Partial Public Class ElsWebOrderWse
        Inherits Microsoft.Web.Services3.WebServicesClientProtocol
        
        Private RequestResearchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FactCertGetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FactCertSearchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FactCertCreateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SubmitRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PlaceOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ThirdPartyPlaceOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MismoRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private APIRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrderQueueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrderQueueNewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSigningOrderQueueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrderProductOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrderProductTestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrderNotesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrderNotesTestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddOrderNoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindOrdersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ListProductsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private QueryStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProductActionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_FirstAmerican_ElsWebOrder
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event RequestResearchCompleted As RequestResearchCompletedEventHandler
        
        '''<remarks/>
        Public Event FactCertGetCompleted As FactCertGetCompletedEventHandler
        
        '''<remarks/>
        Public Event FactCertSearchCompleted As FactCertSearchCompletedEventHandler
        
        '''<remarks/>
        Public Event FactCertCreateCompleted As FactCertCreateCompletedEventHandler
        
        '''<remarks/>
        Public Event SubmitRequestCompleted As SubmitRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event PlaceOrderCompleted As PlaceOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event ThirdPartyPlaceOrderCompleted As ThirdPartyPlaceOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event MismoRequestCompleted As MismoRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event APIRequestCompleted As APIRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrderQueueCompleted As GetOrderQueueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrderQueueNewCompleted As GetOrderQueueNewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSigningOrderQueueCompleted As GetSigningOrderQueueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrderCompleted As GetOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrderProductCompleted As GetOrderProductCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrderProductTestCompleted As GetOrderProductTestCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrderNotesCompleted As GetOrderNotesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrderNotesTestCompleted As GetOrderNotesTestCompletedEventHandler
        
        '''<remarks/>
        Public Event AddOrderNoteCompleted As AddOrderNoteCompletedEventHandler
        
        '''<remarks/>
        Public Event FindOrdersCompleted As FindOrdersCompletedEventHandler
        
        '''<remarks/>
        Public Event ListProductsCompleted As ListProductsCompletedEventHandler
        
        '''<remarks/>
        Public Event QueryStatusCompleted As QueryStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event ProductActionCompleted As ProductActionCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/RequestResearch", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RequestResearch(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String) As String
            Dim results() As Object = Me.Invoke("RequestResearch", New Object() {UserName, Password, XMLdata})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RequestResearchAsync(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String)
            Me.RequestResearchAsync(UserName, Password, XMLdata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RequestResearchAsync(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String, ByVal userState As Object)
            If (Me.RequestResearchOperationCompleted Is Nothing) Then
                Me.RequestResearchOperationCompleted = AddressOf Me.OnRequestResearchOperationCompleted
            End If
            Me.InvokeAsync("RequestResearch", New Object() {UserName, Password, XMLdata}, Me.RequestResearchOperationCompleted, userState)
        End Sub
        
        Private Sub OnRequestResearchOperationCompleted(ByVal arg As Object)
            If (Not (Me.RequestResearchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RequestResearchCompleted(Me, New RequestResearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/FactCertGet", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FactCertGet(ByVal UserName As String, ByVal Password As String, ByVal OrderNo As String, ByVal PDF As Boolean, ByVal forceNewTransCert As Boolean) As String
            Dim results() As Object = Me.Invoke("FactCertGet", New Object() {UserName, Password, OrderNo, PDF, forceNewTransCert})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FactCertGetAsync(ByVal UserName As String, ByVal Password As String, ByVal OrderNo As String, ByVal PDF As Boolean, ByVal forceNewTransCert As Boolean)
            Me.FactCertGetAsync(UserName, Password, OrderNo, PDF, forceNewTransCert, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FactCertGetAsync(ByVal UserName As String, ByVal Password As String, ByVal OrderNo As String, ByVal PDF As Boolean, ByVal forceNewTransCert As Boolean, ByVal userState As Object)
            If (Me.FactCertGetOperationCompleted Is Nothing) Then
                Me.FactCertGetOperationCompleted = AddressOf Me.OnFactCertGetOperationCompleted
            End If
            Me.InvokeAsync("FactCertGet", New Object() {UserName, Password, OrderNo, PDF, forceNewTransCert}, Me.FactCertGetOperationCompleted, userState)
        End Sub
        
        Private Sub OnFactCertGetOperationCompleted(ByVal arg As Object)
            If (Not (Me.FactCertGetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FactCertGetCompleted(Me, New FactCertGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/FactCertSearch", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FactCertSearch(ByVal UserName As String, ByVal Password As String, ByVal StartDate As String, ByVal EndDate As String, ByVal UseRecDate As Boolean, ByVal PDF As Boolean, ByVal ReportBitWiseValue As Integer, ByVal OutputDirectory As String, ByVal FileNameFormat As String) As String
            Dim results() As Object = Me.Invoke("FactCertSearch", New Object() {UserName, Password, StartDate, EndDate, UseRecDate, PDF, ReportBitWiseValue, OutputDirectory, FileNameFormat})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FactCertSearchAsync(ByVal UserName As String, ByVal Password As String, ByVal StartDate As String, ByVal EndDate As String, ByVal UseRecDate As Boolean, ByVal PDF As Boolean, ByVal ReportBitWiseValue As Integer, ByVal OutputDirectory As String, ByVal FileNameFormat As String)
            Me.FactCertSearchAsync(UserName, Password, StartDate, EndDate, UseRecDate, PDF, ReportBitWiseValue, OutputDirectory, FileNameFormat, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FactCertSearchAsync(ByVal UserName As String, ByVal Password As String, ByVal StartDate As String, ByVal EndDate As String, ByVal UseRecDate As Boolean, ByVal PDF As Boolean, ByVal ReportBitWiseValue As Integer, ByVal OutputDirectory As String, ByVal FileNameFormat As String, ByVal userState As Object)
            If (Me.FactCertSearchOperationCompleted Is Nothing) Then
                Me.FactCertSearchOperationCompleted = AddressOf Me.OnFactCertSearchOperationCompleted
            End If
            Me.InvokeAsync("FactCertSearch", New Object() {UserName, Password, StartDate, EndDate, UseRecDate, PDF, ReportBitWiseValue, OutputDirectory, FileNameFormat}, Me.FactCertSearchOperationCompleted, userState)
        End Sub
        
        Private Sub OnFactCertSearchOperationCompleted(ByVal arg As Object)
            If (Not (Me.FactCertSearchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FactCertSearchCompleted(Me, New FactCertSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/FactCertCreate", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FactCertCreate( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal OrderNo As String,  _
                    ByVal ConfNo As String,  _
                    ByVal RefOne As String,  _
                    ByVal RefTwo As String,  _
                    ByVal MortgageAmount As String,  _
                    ByVal Mortgagor As String,  _
                    ByVal RecordedDate As String,  _
                    ByVal InstrumentNumber As String,  _
                    ByVal Lender As String,  _
                    ByVal DateEntered As String,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal PolicyNo As String,  _
                    ByVal ExecutionDate As String,  _
                    ByVal Vesting1 As String,  _
                    ByVal Vesting2 As String,  _
                    ByVal Vesting3 As String,  _
                    ByVal OutputDir As String,  _
                    ByVal OutputFileName As String,  _
                    ByVal IsFact As Boolean) As String
            Dim results() As Object = Me.Invoke("FactCertCreate", New Object() {UserName, Password, OrderNo, ConfNo, RefOne, RefTwo, MortgageAmount, Mortgagor, RecordedDate, InstrumentNumber, Lender, DateEntered, Address, City, State, Zip, PolicyNo, ExecutionDate, Vesting1, Vesting2, Vesting3, OutputDir, OutputFileName, IsFact})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FactCertCreateAsync( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal OrderNo As String,  _
                    ByVal ConfNo As String,  _
                    ByVal RefOne As String,  _
                    ByVal RefTwo As String,  _
                    ByVal MortgageAmount As String,  _
                    ByVal Mortgagor As String,  _
                    ByVal RecordedDate As String,  _
                    ByVal InstrumentNumber As String,  _
                    ByVal Lender As String,  _
                    ByVal DateEntered As String,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal PolicyNo As String,  _
                    ByVal ExecutionDate As String,  _
                    ByVal Vesting1 As String,  _
                    ByVal Vesting2 As String,  _
                    ByVal Vesting3 As String,  _
                    ByVal OutputDir As String,  _
                    ByVal OutputFileName As String,  _
                    ByVal IsFact As Boolean)
            Me.FactCertCreateAsync(UserName, Password, OrderNo, ConfNo, RefOne, RefTwo, MortgageAmount, Mortgagor, RecordedDate, InstrumentNumber, Lender, DateEntered, Address, City, State, Zip, PolicyNo, ExecutionDate, Vesting1, Vesting2, Vesting3, OutputDir, OutputFileName, IsFact, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FactCertCreateAsync( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal OrderNo As String,  _
                    ByVal ConfNo As String,  _
                    ByVal RefOne As String,  _
                    ByVal RefTwo As String,  _
                    ByVal MortgageAmount As String,  _
                    ByVal Mortgagor As String,  _
                    ByVal RecordedDate As String,  _
                    ByVal InstrumentNumber As String,  _
                    ByVal Lender As String,  _
                    ByVal DateEntered As String,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal PolicyNo As String,  _
                    ByVal ExecutionDate As String,  _
                    ByVal Vesting1 As String,  _
                    ByVal Vesting2 As String,  _
                    ByVal Vesting3 As String,  _
                    ByVal OutputDir As String,  _
                    ByVal OutputFileName As String,  _
                    ByVal IsFact As Boolean,  _
                    ByVal userState As Object)
            If (Me.FactCertCreateOperationCompleted Is Nothing) Then
                Me.FactCertCreateOperationCompleted = AddressOf Me.OnFactCertCreateOperationCompleted
            End If
            Me.InvokeAsync("FactCertCreate", New Object() {UserName, Password, OrderNo, ConfNo, RefOne, RefTwo, MortgageAmount, Mortgagor, RecordedDate, InstrumentNumber, Lender, DateEntered, Address, City, State, Zip, PolicyNo, ExecutionDate, Vesting1, Vesting2, Vesting3, OutputDir, OutputFileName, IsFact}, Me.FactCertCreateOperationCompleted, userState)
        End Sub
        
        Private Sub OnFactCertCreateOperationCompleted(ByVal arg As Object)
            If (Not (Me.FactCertCreateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FactCertCreateCompleted(Me, New FactCertCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/SubmitRequest", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SubmitRequest(ByVal username As String, ByVal password As String, ByVal xmlData As String) As String
            Dim results() As Object = Me.Invoke("SubmitRequest", New Object() {username, password, xmlData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SubmitRequestAsync(ByVal username As String, ByVal password As String, ByVal xmlData As String)
            Me.SubmitRequestAsync(username, password, xmlData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SubmitRequestAsync(ByVal username As String, ByVal password As String, ByVal xmlData As String, ByVal userState As Object)
            If (Me.SubmitRequestOperationCompleted Is Nothing) Then
                Me.SubmitRequestOperationCompleted = AddressOf Me.OnSubmitRequestOperationCompleted
            End If
            Me.InvokeAsync("SubmitRequest", New Object() {username, password, xmlData}, Me.SubmitRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnSubmitRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.SubmitRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SubmitRequestCompleted(Me, New SubmitRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/PlaceOrder", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PlaceOrder(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String) As String
            Dim results() As Object = Me.Invoke("PlaceOrder", New Object() {UserName, Password, XMLdata})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PlaceOrderAsync(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String)
            Me.PlaceOrderAsync(UserName, Password, XMLdata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PlaceOrderAsync(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String, ByVal userState As Object)
            If (Me.PlaceOrderOperationCompleted Is Nothing) Then
                Me.PlaceOrderOperationCompleted = AddressOf Me.OnPlaceOrderOperationCompleted
            End If
            Me.InvokeAsync("PlaceOrder", New Object() {UserName, Password, XMLdata}, Me.PlaceOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnPlaceOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.PlaceOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PlaceOrderCompleted(Me, New PlaceOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/ThirdPartyPlaceOrder", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ThirdPartyPlaceOrder(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String) As String
            Dim results() As Object = Me.Invoke("ThirdPartyPlaceOrder", New Object() {UserName, Password, XMLdata})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ThirdPartyPlaceOrderAsync(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String)
            Me.ThirdPartyPlaceOrderAsync(UserName, Password, XMLdata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ThirdPartyPlaceOrderAsync(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String, ByVal userState As Object)
            If (Me.ThirdPartyPlaceOrderOperationCompleted Is Nothing) Then
                Me.ThirdPartyPlaceOrderOperationCompleted = AddressOf Me.OnThirdPartyPlaceOrderOperationCompleted
            End If
            Me.InvokeAsync("ThirdPartyPlaceOrder", New Object() {UserName, Password, XMLdata}, Me.ThirdPartyPlaceOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnThirdPartyPlaceOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.ThirdPartyPlaceOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ThirdPartyPlaceOrderCompleted(Me, New ThirdPartyPlaceOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/MismoRequest", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MismoRequest(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String) As String
            Dim results() As Object = Me.Invoke("MismoRequest", New Object() {UserName, Password, XMLdata})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MismoRequestAsync(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String)
            Me.MismoRequestAsync(UserName, Password, XMLdata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MismoRequestAsync(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String, ByVal userState As Object)
            If (Me.MismoRequestOperationCompleted Is Nothing) Then
                Me.MismoRequestOperationCompleted = AddressOf Me.OnMismoRequestOperationCompleted
            End If
            Me.InvokeAsync("MismoRequest", New Object() {UserName, Password, XMLdata}, Me.MismoRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnMismoRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.MismoRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MismoRequestCompleted(Me, New MismoRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/APIRequest", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function APIRequest(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String) As String
            Dim results() As Object = Me.Invoke("APIRequest", New Object() {UserName, Password, XMLdata})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub APIRequestAsync(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String)
            Me.APIRequestAsync(UserName, Password, XMLdata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub APIRequestAsync(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String, ByVal userState As Object)
            If (Me.APIRequestOperationCompleted Is Nothing) Then
                Me.APIRequestOperationCompleted = AddressOf Me.OnAPIRequestOperationCompleted
            End If
            Me.InvokeAsync("APIRequest", New Object() {UserName, Password, XMLdata}, Me.APIRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnAPIRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.APIRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent APIRequestCompleted(Me, New APIRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/GetOrderQueue", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrderQueue(ByVal UserName As String, ByVal Password As String) As String
            Dim results() As Object = Me.Invoke("GetOrderQueue", New Object() {UserName, Password})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrderQueueAsync(ByVal UserName As String, ByVal Password As String)
            Me.GetOrderQueueAsync(UserName, Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrderQueueAsync(ByVal UserName As String, ByVal Password As String, ByVal userState As Object)
            If (Me.GetOrderQueueOperationCompleted Is Nothing) Then
                Me.GetOrderQueueOperationCompleted = AddressOf Me.OnGetOrderQueueOperationCompleted
            End If
            Me.InvokeAsync("GetOrderQueue", New Object() {UserName, Password}, Me.GetOrderQueueOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrderQueueOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrderQueueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrderQueueCompleted(Me, New GetOrderQueueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/GetOrderQueueNew", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrderQueueNew(ByVal UserName As String, ByVal Password As String) As String
            Dim results() As Object = Me.Invoke("GetOrderQueueNew", New Object() {UserName, Password})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrderQueueNewAsync(ByVal UserName As String, ByVal Password As String)
            Me.GetOrderQueueNewAsync(UserName, Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrderQueueNewAsync(ByVal UserName As String, ByVal Password As String, ByVal userState As Object)
            If (Me.GetOrderQueueNewOperationCompleted Is Nothing) Then
                Me.GetOrderQueueNewOperationCompleted = AddressOf Me.OnGetOrderQueueNewOperationCompleted
            End If
            Me.InvokeAsync("GetOrderQueueNew", New Object() {UserName, Password}, Me.GetOrderQueueNewOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrderQueueNewOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrderQueueNewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrderQueueNewCompleted(Me, New GetOrderQueueNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/GetSigningOrderQueue", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSigningOrderQueue(ByVal UserName As String, ByVal Password As String) As String
            Dim results() As Object = Me.Invoke("GetSigningOrderQueue", New Object() {UserName, Password})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSigningOrderQueueAsync(ByVal UserName As String, ByVal Password As String)
            Me.GetSigningOrderQueueAsync(UserName, Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSigningOrderQueueAsync(ByVal UserName As String, ByVal Password As String, ByVal userState As Object)
            If (Me.GetSigningOrderQueueOperationCompleted Is Nothing) Then
                Me.GetSigningOrderQueueOperationCompleted = AddressOf Me.OnGetSigningOrderQueueOperationCompleted
            End If
            Me.InvokeAsync("GetSigningOrderQueue", New Object() {UserName, Password}, Me.GetSigningOrderQueueOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSigningOrderQueueOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSigningOrderQueueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSigningOrderQueueCompleted(Me, New GetSigningOrderQueueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/GetOrder", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrder(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer) As String
            Dim results() As Object = Me.Invoke("GetOrder", New Object() {UserName, Password, ConfirmationNumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrderAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer)
            Me.GetOrderAsync(UserName, Password, ConfirmationNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrderAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal userState As Object)
            If (Me.GetOrderOperationCompleted Is Nothing) Then
                Me.GetOrderOperationCompleted = AddressOf Me.OnGetOrderOperationCompleted
            End If
            Me.InvokeAsync("GetOrder", New Object() {UserName, Password, ConfirmationNumber}, Me.GetOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrderCompleted(Me, New GetOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/GetOrderProduct", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrderProduct(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal ServiceCode As String, ByVal SequenceNumber As Integer) As String
            Dim results() As Object = Me.Invoke("GetOrderProduct", New Object() {UserName, Password, ConfirmationNumber, ServiceCode, SequenceNumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrderProductAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal ServiceCode As String, ByVal SequenceNumber As Integer)
            Me.GetOrderProductAsync(UserName, Password, ConfirmationNumber, ServiceCode, SequenceNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrderProductAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal ServiceCode As String, ByVal SequenceNumber As Integer, ByVal userState As Object)
            If (Me.GetOrderProductOperationCompleted Is Nothing) Then
                Me.GetOrderProductOperationCompleted = AddressOf Me.OnGetOrderProductOperationCompleted
            End If
            Me.InvokeAsync("GetOrderProduct", New Object() {UserName, Password, ConfirmationNumber, ServiceCode, SequenceNumber}, Me.GetOrderProductOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrderProductOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrderProductCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrderProductCompleted(Me, New GetOrderProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/GetOrderProductTest", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrderProductTest(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal ServiceCode As String, ByVal SequenceNumber As Integer, ByVal TestOptions As String) As String
            Dim results() As Object = Me.Invoke("GetOrderProductTest", New Object() {UserName, Password, ConfirmationNumber, ServiceCode, SequenceNumber, TestOptions})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrderProductTestAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal ServiceCode As String, ByVal SequenceNumber As Integer, ByVal TestOptions As String)
            Me.GetOrderProductTestAsync(UserName, Password, ConfirmationNumber, ServiceCode, SequenceNumber, TestOptions, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrderProductTestAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal ServiceCode As String, ByVal SequenceNumber As Integer, ByVal TestOptions As String, ByVal userState As Object)
            If (Me.GetOrderProductTestOperationCompleted Is Nothing) Then
                Me.GetOrderProductTestOperationCompleted = AddressOf Me.OnGetOrderProductTestOperationCompleted
            End If
            Me.InvokeAsync("GetOrderProductTest", New Object() {UserName, Password, ConfirmationNumber, ServiceCode, SequenceNumber, TestOptions}, Me.GetOrderProductTestOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrderProductTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrderProductTestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrderProductTestCompleted(Me, New GetOrderProductTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/GetOrderNotes", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrderNotes(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer) As String
            Dim results() As Object = Me.Invoke("GetOrderNotes", New Object() {UserName, Password, ConfirmationNumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrderNotesAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer)
            Me.GetOrderNotesAsync(UserName, Password, ConfirmationNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrderNotesAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal userState As Object)
            If (Me.GetOrderNotesOperationCompleted Is Nothing) Then
                Me.GetOrderNotesOperationCompleted = AddressOf Me.OnGetOrderNotesOperationCompleted
            End If
            Me.InvokeAsync("GetOrderNotes", New Object() {UserName, Password, ConfirmationNumber}, Me.GetOrderNotesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrderNotesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrderNotesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrderNotesCompleted(Me, New GetOrderNotesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/GetOrderNotesTest", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrderNotesTest(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal inFlags As String) As String
            Dim results() As Object = Me.Invoke("GetOrderNotesTest", New Object() {UserName, Password, ConfirmationNumber, inFlags})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrderNotesTestAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal inFlags As String)
            Me.GetOrderNotesTestAsync(UserName, Password, ConfirmationNumber, inFlags, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrderNotesTestAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal inFlags As String, ByVal userState As Object)
            If (Me.GetOrderNotesTestOperationCompleted Is Nothing) Then
                Me.GetOrderNotesTestOperationCompleted = AddressOf Me.OnGetOrderNotesTestOperationCompleted
            End If
            Me.InvokeAsync("GetOrderNotesTest", New Object() {UserName, Password, ConfirmationNumber, inFlags}, Me.GetOrderNotesTestOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrderNotesTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrderNotesTestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrderNotesTestCompleted(Me, New GetOrderNotesTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/AddOrderNote", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddOrderNote(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal Note As String, ByVal NoteType As String) As String
            Dim results() As Object = Me.Invoke("AddOrderNote", New Object() {UserName, Password, ConfirmationNumber, Note, NoteType})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddOrderNoteAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal Note As String, ByVal NoteType As String)
            Me.AddOrderNoteAsync(UserName, Password, ConfirmationNumber, Note, NoteType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddOrderNoteAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal Note As String, ByVal NoteType As String, ByVal userState As Object)
            If (Me.AddOrderNoteOperationCompleted Is Nothing) Then
                Me.AddOrderNoteOperationCompleted = AddressOf Me.OnAddOrderNoteOperationCompleted
            End If
            Me.InvokeAsync("AddOrderNote", New Object() {UserName, Password, ConfirmationNumber, Note, NoteType}, Me.AddOrderNoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddOrderNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddOrderNoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddOrderNoteCompleted(Me, New AddOrderNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/FindOrders", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindOrders(ByVal UserName As String, ByVal Password As String, ByVal ReferenceNumber As String, ByVal Address As String, ByVal LastName As String) As String
            Dim results() As Object = Me.Invoke("FindOrders", New Object() {UserName, Password, ReferenceNumber, Address, LastName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindOrdersAsync(ByVal UserName As String, ByVal Password As String, ByVal ReferenceNumber As String, ByVal Address As String, ByVal LastName As String)
            Me.FindOrdersAsync(UserName, Password, ReferenceNumber, Address, LastName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindOrdersAsync(ByVal UserName As String, ByVal Password As String, ByVal ReferenceNumber As String, ByVal Address As String, ByVal LastName As String, ByVal userState As Object)
            If (Me.FindOrdersOperationCompleted Is Nothing) Then
                Me.FindOrdersOperationCompleted = AddressOf Me.OnFindOrdersOperationCompleted
            End If
            Me.InvokeAsync("FindOrders", New Object() {UserName, Password, ReferenceNumber, Address, LastName}, Me.FindOrdersOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindOrdersOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindOrdersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindOrdersCompleted(Me, New FindOrdersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/ListProducts", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ListProducts(ByVal UserName As String, ByVal Password As String) As String
            Dim results() As Object = Me.Invoke("ListProducts", New Object() {UserName, Password})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ListProductsAsync(ByVal UserName As String, ByVal Password As String)
            Me.ListProductsAsync(UserName, Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ListProductsAsync(ByVal UserName As String, ByVal Password As String, ByVal userState As Object)
            If (Me.ListProductsOperationCompleted Is Nothing) Then
                Me.ListProductsOperationCompleted = AddressOf Me.OnListProductsOperationCompleted
            End If
            Me.InvokeAsync("ListProducts", New Object() {UserName, Password}, Me.ListProductsOperationCompleted, userState)
        End Sub
        
        Private Sub OnListProductsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ListProductsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ListProductsCompleted(Me, New ListProductsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/QueryStatus", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function QueryStatus(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer) As String
            Dim results() As Object = Me.Invoke("QueryStatus", New Object() {UserName, Password, ConfirmationNumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub QueryStatusAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer)
            Me.QueryStatusAsync(UserName, Password, ConfirmationNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub QueryStatusAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal userState As Object)
            If (Me.QueryStatusOperationCompleted Is Nothing) Then
                Me.QueryStatusOperationCompleted = AddressOf Me.OnQueryStatusOperationCompleted
            End If
            Me.InvokeAsync("QueryStatus", New Object() {UserName, Password, ConfirmationNumber}, Me.QueryStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnQueryStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.QueryStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent QueryStatusCompleted(Me, New QueryStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/ProductAction", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProductAction(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal ServiceCode As String, ByVal SequenceNumber As Integer, ByVal Action As String) As String
            Dim results() As Object = Me.Invoke("ProductAction", New Object() {UserName, Password, ConfirmationNumber, ServiceCode, SequenceNumber, Action})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProductActionAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal ServiceCode As String, ByVal SequenceNumber As Integer, ByVal Action As String)
            Me.ProductActionAsync(UserName, Password, ConfirmationNumber, ServiceCode, SequenceNumber, Action, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProductActionAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal ServiceCode As String, ByVal SequenceNumber As Integer, ByVal Action As String, ByVal userState As Object)
            If (Me.ProductActionOperationCompleted Is Nothing) Then
                Me.ProductActionOperationCompleted = AddressOf Me.OnProductActionOperationCompleted
            End If
            Me.InvokeAsync("ProductAction", New Object() {UserName, Password, ConfirmationNumber, ServiceCode, SequenceNumber, Action}, Me.ProductActionOperationCompleted, userState)
        End Sub
        
        Private Sub OnProductActionOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProductActionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProductActionCompleted(Me, New ProductActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ElsWebOrderSoap", [Namespace]:="http://soap.elsonline.net")>  _
    Partial Public Class ElsWebOrder
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private RequestResearchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FactCertGetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FactCertSearchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FactCertCreateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SubmitRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PlaceOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ThirdPartyPlaceOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MismoRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private APIRequestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrderQueueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrderQueueNewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSigningOrderQueueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrderOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrderProductOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrderProductTestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrderNotesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOrderNotesTestOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddOrderNoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindOrdersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ListProductsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private QueryStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProductActionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_FirstAmerican_ElsWebOrder
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event RequestResearchCompleted As RequestResearchCompletedEventHandler
        
        '''<remarks/>
        Public Event FactCertGetCompleted As FactCertGetCompletedEventHandler
        
        '''<remarks/>
        Public Event FactCertSearchCompleted As FactCertSearchCompletedEventHandler
        
        '''<remarks/>
        Public Event FactCertCreateCompleted As FactCertCreateCompletedEventHandler
        
        '''<remarks/>
        Public Event SubmitRequestCompleted As SubmitRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event PlaceOrderCompleted As PlaceOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event ThirdPartyPlaceOrderCompleted As ThirdPartyPlaceOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event MismoRequestCompleted As MismoRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event APIRequestCompleted As APIRequestCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrderQueueCompleted As GetOrderQueueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrderQueueNewCompleted As GetOrderQueueNewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSigningOrderQueueCompleted As GetSigningOrderQueueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrderCompleted As GetOrderCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrderProductCompleted As GetOrderProductCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrderProductTestCompleted As GetOrderProductTestCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrderNotesCompleted As GetOrderNotesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOrderNotesTestCompleted As GetOrderNotesTestCompletedEventHandler
        
        '''<remarks/>
        Public Event AddOrderNoteCompleted As AddOrderNoteCompletedEventHandler
        
        '''<remarks/>
        Public Event FindOrdersCompleted As FindOrdersCompletedEventHandler
        
        '''<remarks/>
        Public Event ListProductsCompleted As ListProductsCompletedEventHandler
        
        '''<remarks/>
        Public Event QueryStatusCompleted As QueryStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event ProductActionCompleted As ProductActionCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/RequestResearch", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RequestResearch(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String) As String
            Dim results() As Object = Me.Invoke("RequestResearch", New Object() {UserName, Password, XMLdata})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginRequestResearch(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RequestResearch", New Object() {UserName, Password, XMLdata}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRequestResearch(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RequestResearchAsync(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String)
            Me.RequestResearchAsync(UserName, Password, XMLdata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RequestResearchAsync(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String, ByVal userState As Object)
            If (Me.RequestResearchOperationCompleted Is Nothing) Then
                Me.RequestResearchOperationCompleted = AddressOf Me.OnRequestResearchOperationCompleted
            End If
            Me.InvokeAsync("RequestResearch", New Object() {UserName, Password, XMLdata}, Me.RequestResearchOperationCompleted, userState)
        End Sub
        
        Private Sub OnRequestResearchOperationCompleted(ByVal arg As Object)
            If (Not (Me.RequestResearchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RequestResearchCompleted(Me, New RequestResearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/FactCertGet", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FactCertGet(ByVal UserName As String, ByVal Password As String, ByVal OrderNo As String, ByVal PDF As Boolean, ByVal forceNewTransCert As Boolean) As String
            Dim results() As Object = Me.Invoke("FactCertGet", New Object() {UserName, Password, OrderNo, PDF, forceNewTransCert})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginFactCertGet(ByVal UserName As String, ByVal Password As String, ByVal OrderNo As String, ByVal PDF As Boolean, ByVal forceNewTransCert As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FactCertGet", New Object() {UserName, Password, OrderNo, PDF, forceNewTransCert}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFactCertGet(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FactCertGetAsync(ByVal UserName As String, ByVal Password As String, ByVal OrderNo As String, ByVal PDF As Boolean, ByVal forceNewTransCert As Boolean)
            Me.FactCertGetAsync(UserName, Password, OrderNo, PDF, forceNewTransCert, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FactCertGetAsync(ByVal UserName As String, ByVal Password As String, ByVal OrderNo As String, ByVal PDF As Boolean, ByVal forceNewTransCert As Boolean, ByVal userState As Object)
            If (Me.FactCertGetOperationCompleted Is Nothing) Then
                Me.FactCertGetOperationCompleted = AddressOf Me.OnFactCertGetOperationCompleted
            End If
            Me.InvokeAsync("FactCertGet", New Object() {UserName, Password, OrderNo, PDF, forceNewTransCert}, Me.FactCertGetOperationCompleted, userState)
        End Sub
        
        Private Sub OnFactCertGetOperationCompleted(ByVal arg As Object)
            If (Not (Me.FactCertGetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FactCertGetCompleted(Me, New FactCertGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/FactCertSearch", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FactCertSearch(ByVal UserName As String, ByVal Password As String, ByVal StartDate As String, ByVal EndDate As String, ByVal UseRecDate As Boolean, ByVal PDF As Boolean, ByVal ReportBitWiseValue As Integer, ByVal OutputDirectory As String, ByVal FileNameFormat As String) As String
            Dim results() As Object = Me.Invoke("FactCertSearch", New Object() {UserName, Password, StartDate, EndDate, UseRecDate, PDF, ReportBitWiseValue, OutputDirectory, FileNameFormat})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginFactCertSearch(ByVal UserName As String, ByVal Password As String, ByVal StartDate As String, ByVal EndDate As String, ByVal UseRecDate As Boolean, ByVal PDF As Boolean, ByVal ReportBitWiseValue As Integer, ByVal OutputDirectory As String, ByVal FileNameFormat As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FactCertSearch", New Object() {UserName, Password, StartDate, EndDate, UseRecDate, PDF, ReportBitWiseValue, OutputDirectory, FileNameFormat}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFactCertSearch(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FactCertSearchAsync(ByVal UserName As String, ByVal Password As String, ByVal StartDate As String, ByVal EndDate As String, ByVal UseRecDate As Boolean, ByVal PDF As Boolean, ByVal ReportBitWiseValue As Integer, ByVal OutputDirectory As String, ByVal FileNameFormat As String)
            Me.FactCertSearchAsync(UserName, Password, StartDate, EndDate, UseRecDate, PDF, ReportBitWiseValue, OutputDirectory, FileNameFormat, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FactCertSearchAsync(ByVal UserName As String, ByVal Password As String, ByVal StartDate As String, ByVal EndDate As String, ByVal UseRecDate As Boolean, ByVal PDF As Boolean, ByVal ReportBitWiseValue As Integer, ByVal OutputDirectory As String, ByVal FileNameFormat As String, ByVal userState As Object)
            If (Me.FactCertSearchOperationCompleted Is Nothing) Then
                Me.FactCertSearchOperationCompleted = AddressOf Me.OnFactCertSearchOperationCompleted
            End If
            Me.InvokeAsync("FactCertSearch", New Object() {UserName, Password, StartDate, EndDate, UseRecDate, PDF, ReportBitWiseValue, OutputDirectory, FileNameFormat}, Me.FactCertSearchOperationCompleted, userState)
        End Sub
        
        Private Sub OnFactCertSearchOperationCompleted(ByVal arg As Object)
            If (Not (Me.FactCertSearchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FactCertSearchCompleted(Me, New FactCertSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/FactCertCreate", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FactCertCreate( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal OrderNo As String,  _
                    ByVal ConfNo As String,  _
                    ByVal RefOne As String,  _
                    ByVal RefTwo As String,  _
                    ByVal MortgageAmount As String,  _
                    ByVal Mortgagor As String,  _
                    ByVal RecordedDate As String,  _
                    ByVal InstrumentNumber As String,  _
                    ByVal Lender As String,  _
                    ByVal DateEntered As String,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal PolicyNo As String,  _
                    ByVal ExecutionDate As String,  _
                    ByVal Vesting1 As String,  _
                    ByVal Vesting2 As String,  _
                    ByVal Vesting3 As String,  _
                    ByVal OutputDir As String,  _
                    ByVal OutputFileName As String,  _
                    ByVal IsFact As Boolean) As String
            Dim results() As Object = Me.Invoke("FactCertCreate", New Object() {UserName, Password, OrderNo, ConfNo, RefOne, RefTwo, MortgageAmount, Mortgagor, RecordedDate, InstrumentNumber, Lender, DateEntered, Address, City, State, Zip, PolicyNo, ExecutionDate, Vesting1, Vesting2, Vesting3, OutputDir, OutputFileName, IsFact})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginFactCertCreate( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal OrderNo As String,  _
                    ByVal ConfNo As String,  _
                    ByVal RefOne As String,  _
                    ByVal RefTwo As String,  _
                    ByVal MortgageAmount As String,  _
                    ByVal Mortgagor As String,  _
                    ByVal RecordedDate As String,  _
                    ByVal InstrumentNumber As String,  _
                    ByVal Lender As String,  _
                    ByVal DateEntered As String,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal PolicyNo As String,  _
                    ByVal ExecutionDate As String,  _
                    ByVal Vesting1 As String,  _
                    ByVal Vesting2 As String,  _
                    ByVal Vesting3 As String,  _
                    ByVal OutputDir As String,  _
                    ByVal OutputFileName As String,  _
                    ByVal IsFact As Boolean,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FactCertCreate", New Object() {UserName, Password, OrderNo, ConfNo, RefOne, RefTwo, MortgageAmount, Mortgagor, RecordedDate, InstrumentNumber, Lender, DateEntered, Address, City, State, Zip, PolicyNo, ExecutionDate, Vesting1, Vesting2, Vesting3, OutputDir, OutputFileName, IsFact}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFactCertCreate(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FactCertCreateAsync( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal OrderNo As String,  _
                    ByVal ConfNo As String,  _
                    ByVal RefOne As String,  _
                    ByVal RefTwo As String,  _
                    ByVal MortgageAmount As String,  _
                    ByVal Mortgagor As String,  _
                    ByVal RecordedDate As String,  _
                    ByVal InstrumentNumber As String,  _
                    ByVal Lender As String,  _
                    ByVal DateEntered As String,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal PolicyNo As String,  _
                    ByVal ExecutionDate As String,  _
                    ByVal Vesting1 As String,  _
                    ByVal Vesting2 As String,  _
                    ByVal Vesting3 As String,  _
                    ByVal OutputDir As String,  _
                    ByVal OutputFileName As String,  _
                    ByVal IsFact As Boolean)
            Me.FactCertCreateAsync(UserName, Password, OrderNo, ConfNo, RefOne, RefTwo, MortgageAmount, Mortgagor, RecordedDate, InstrumentNumber, Lender, DateEntered, Address, City, State, Zip, PolicyNo, ExecutionDate, Vesting1, Vesting2, Vesting3, OutputDir, OutputFileName, IsFact, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FactCertCreateAsync( _
                    ByVal UserName As String,  _
                    ByVal Password As String,  _
                    ByVal OrderNo As String,  _
                    ByVal ConfNo As String,  _
                    ByVal RefOne As String,  _
                    ByVal RefTwo As String,  _
                    ByVal MortgageAmount As String,  _
                    ByVal Mortgagor As String,  _
                    ByVal RecordedDate As String,  _
                    ByVal InstrumentNumber As String,  _
                    ByVal Lender As String,  _
                    ByVal DateEntered As String,  _
                    ByVal Address As String,  _
                    ByVal City As String,  _
                    ByVal State As String,  _
                    ByVal Zip As String,  _
                    ByVal PolicyNo As String,  _
                    ByVal ExecutionDate As String,  _
                    ByVal Vesting1 As String,  _
                    ByVal Vesting2 As String,  _
                    ByVal Vesting3 As String,  _
                    ByVal OutputDir As String,  _
                    ByVal OutputFileName As String,  _
                    ByVal IsFact As Boolean,  _
                    ByVal userState As Object)
            If (Me.FactCertCreateOperationCompleted Is Nothing) Then
                Me.FactCertCreateOperationCompleted = AddressOf Me.OnFactCertCreateOperationCompleted
            End If
            Me.InvokeAsync("FactCertCreate", New Object() {UserName, Password, OrderNo, ConfNo, RefOne, RefTwo, MortgageAmount, Mortgagor, RecordedDate, InstrumentNumber, Lender, DateEntered, Address, City, State, Zip, PolicyNo, ExecutionDate, Vesting1, Vesting2, Vesting3, OutputDir, OutputFileName, IsFact}, Me.FactCertCreateOperationCompleted, userState)
        End Sub
        
        Private Sub OnFactCertCreateOperationCompleted(ByVal arg As Object)
            If (Not (Me.FactCertCreateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FactCertCreateCompleted(Me, New FactCertCreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/SubmitRequest", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SubmitRequest(ByVal username As String, ByVal password As String, ByVal xmlData As String) As String
            Dim results() As Object = Me.Invoke("SubmitRequest", New Object() {username, password, xmlData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginSubmitRequest(ByVal username As String, ByVal password As String, ByVal xmlData As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SubmitRequest", New Object() {username, password, xmlData}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSubmitRequest(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SubmitRequestAsync(ByVal username As String, ByVal password As String, ByVal xmlData As String)
            Me.SubmitRequestAsync(username, password, xmlData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SubmitRequestAsync(ByVal username As String, ByVal password As String, ByVal xmlData As String, ByVal userState As Object)
            If (Me.SubmitRequestOperationCompleted Is Nothing) Then
                Me.SubmitRequestOperationCompleted = AddressOf Me.OnSubmitRequestOperationCompleted
            End If
            Me.InvokeAsync("SubmitRequest", New Object() {username, password, xmlData}, Me.SubmitRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnSubmitRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.SubmitRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SubmitRequestCompleted(Me, New SubmitRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/PlaceOrder", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PlaceOrder(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String) As String
            Dim results() As Object = Me.Invoke("PlaceOrder", New Object() {UserName, Password, XMLdata})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginPlaceOrder(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PlaceOrder", New Object() {UserName, Password, XMLdata}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPlaceOrder(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PlaceOrderAsync(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String)
            Me.PlaceOrderAsync(UserName, Password, XMLdata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PlaceOrderAsync(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String, ByVal userState As Object)
            If (Me.PlaceOrderOperationCompleted Is Nothing) Then
                Me.PlaceOrderOperationCompleted = AddressOf Me.OnPlaceOrderOperationCompleted
            End If
            Me.InvokeAsync("PlaceOrder", New Object() {UserName, Password, XMLdata}, Me.PlaceOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnPlaceOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.PlaceOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PlaceOrderCompleted(Me, New PlaceOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/ThirdPartyPlaceOrder", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ThirdPartyPlaceOrder(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String) As String
            Dim results() As Object = Me.Invoke("ThirdPartyPlaceOrder", New Object() {UserName, Password, XMLdata})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginThirdPartyPlaceOrder(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ThirdPartyPlaceOrder", New Object() {UserName, Password, XMLdata}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndThirdPartyPlaceOrder(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ThirdPartyPlaceOrderAsync(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String)
            Me.ThirdPartyPlaceOrderAsync(UserName, Password, XMLdata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ThirdPartyPlaceOrderAsync(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String, ByVal userState As Object)
            If (Me.ThirdPartyPlaceOrderOperationCompleted Is Nothing) Then
                Me.ThirdPartyPlaceOrderOperationCompleted = AddressOf Me.OnThirdPartyPlaceOrderOperationCompleted
            End If
            Me.InvokeAsync("ThirdPartyPlaceOrder", New Object() {UserName, Password, XMLdata}, Me.ThirdPartyPlaceOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnThirdPartyPlaceOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.ThirdPartyPlaceOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ThirdPartyPlaceOrderCompleted(Me, New ThirdPartyPlaceOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/MismoRequest", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MismoRequest(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String) As String
            Dim results() As Object = Me.Invoke("MismoRequest", New Object() {UserName, Password, XMLdata})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginMismoRequest(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("MismoRequest", New Object() {UserName, Password, XMLdata}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndMismoRequest(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MismoRequestAsync(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String)
            Me.MismoRequestAsync(UserName, Password, XMLdata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MismoRequestAsync(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String, ByVal userState As Object)
            If (Me.MismoRequestOperationCompleted Is Nothing) Then
                Me.MismoRequestOperationCompleted = AddressOf Me.OnMismoRequestOperationCompleted
            End If
            Me.InvokeAsync("MismoRequest", New Object() {UserName, Password, XMLdata}, Me.MismoRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnMismoRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.MismoRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MismoRequestCompleted(Me, New MismoRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/APIRequest", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function APIRequest(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String) As String
            Dim results() As Object = Me.Invoke("APIRequest", New Object() {UserName, Password, XMLdata})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginAPIRequest(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("APIRequest", New Object() {UserName, Password, XMLdata}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAPIRequest(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub APIRequestAsync(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String)
            Me.APIRequestAsync(UserName, Password, XMLdata, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub APIRequestAsync(ByVal UserName As String, ByVal Password As String, ByVal XMLdata As String, ByVal userState As Object)
            If (Me.APIRequestOperationCompleted Is Nothing) Then
                Me.APIRequestOperationCompleted = AddressOf Me.OnAPIRequestOperationCompleted
            End If
            Me.InvokeAsync("APIRequest", New Object() {UserName, Password, XMLdata}, Me.APIRequestOperationCompleted, userState)
        End Sub
        
        Private Sub OnAPIRequestOperationCompleted(ByVal arg As Object)
            If (Not (Me.APIRequestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent APIRequestCompleted(Me, New APIRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/GetOrderQueue", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrderQueue(ByVal UserName As String, ByVal Password As String) As String
            Dim results() As Object = Me.Invoke("GetOrderQueue", New Object() {UserName, Password})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetOrderQueue(ByVal UserName As String, ByVal Password As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetOrderQueue", New Object() {UserName, Password}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetOrderQueue(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrderQueueAsync(ByVal UserName As String, ByVal Password As String)
            Me.GetOrderQueueAsync(UserName, Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrderQueueAsync(ByVal UserName As String, ByVal Password As String, ByVal userState As Object)
            If (Me.GetOrderQueueOperationCompleted Is Nothing) Then
                Me.GetOrderQueueOperationCompleted = AddressOf Me.OnGetOrderQueueOperationCompleted
            End If
            Me.InvokeAsync("GetOrderQueue", New Object() {UserName, Password}, Me.GetOrderQueueOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrderQueueOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrderQueueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrderQueueCompleted(Me, New GetOrderQueueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/GetOrderQueueNew", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrderQueueNew(ByVal UserName As String, ByVal Password As String) As String
            Dim results() As Object = Me.Invoke("GetOrderQueueNew", New Object() {UserName, Password})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetOrderQueueNew(ByVal UserName As String, ByVal Password As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetOrderQueueNew", New Object() {UserName, Password}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetOrderQueueNew(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrderQueueNewAsync(ByVal UserName As String, ByVal Password As String)
            Me.GetOrderQueueNewAsync(UserName, Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrderQueueNewAsync(ByVal UserName As String, ByVal Password As String, ByVal userState As Object)
            If (Me.GetOrderQueueNewOperationCompleted Is Nothing) Then
                Me.GetOrderQueueNewOperationCompleted = AddressOf Me.OnGetOrderQueueNewOperationCompleted
            End If
            Me.InvokeAsync("GetOrderQueueNew", New Object() {UserName, Password}, Me.GetOrderQueueNewOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrderQueueNewOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrderQueueNewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrderQueueNewCompleted(Me, New GetOrderQueueNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/GetSigningOrderQueue", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSigningOrderQueue(ByVal UserName As String, ByVal Password As String) As String
            Dim results() As Object = Me.Invoke("GetSigningOrderQueue", New Object() {UserName, Password})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetSigningOrderQueue(ByVal UserName As String, ByVal Password As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetSigningOrderQueue", New Object() {UserName, Password}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetSigningOrderQueue(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSigningOrderQueueAsync(ByVal UserName As String, ByVal Password As String)
            Me.GetSigningOrderQueueAsync(UserName, Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSigningOrderQueueAsync(ByVal UserName As String, ByVal Password As String, ByVal userState As Object)
            If (Me.GetSigningOrderQueueOperationCompleted Is Nothing) Then
                Me.GetSigningOrderQueueOperationCompleted = AddressOf Me.OnGetSigningOrderQueueOperationCompleted
            End If
            Me.InvokeAsync("GetSigningOrderQueue", New Object() {UserName, Password}, Me.GetSigningOrderQueueOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSigningOrderQueueOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSigningOrderQueueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSigningOrderQueueCompleted(Me, New GetSigningOrderQueueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/GetOrder", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrder(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer) As String
            Dim results() As Object = Me.Invoke("GetOrder", New Object() {UserName, Password, ConfirmationNumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetOrder(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetOrder", New Object() {UserName, Password, ConfirmationNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetOrder(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrderAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer)
            Me.GetOrderAsync(UserName, Password, ConfirmationNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrderAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal userState As Object)
            If (Me.GetOrderOperationCompleted Is Nothing) Then
                Me.GetOrderOperationCompleted = AddressOf Me.OnGetOrderOperationCompleted
            End If
            Me.InvokeAsync("GetOrder", New Object() {UserName, Password, ConfirmationNumber}, Me.GetOrderOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrderOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrderCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrderCompleted(Me, New GetOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/GetOrderProduct", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrderProduct(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal ServiceCode As String, ByVal SequenceNumber As Integer) As String
            Dim results() As Object = Me.Invoke("GetOrderProduct", New Object() {UserName, Password, ConfirmationNumber, ServiceCode, SequenceNumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetOrderProduct(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal ServiceCode As String, ByVal SequenceNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetOrderProduct", New Object() {UserName, Password, ConfirmationNumber, ServiceCode, SequenceNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetOrderProduct(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrderProductAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal ServiceCode As String, ByVal SequenceNumber As Integer)
            Me.GetOrderProductAsync(UserName, Password, ConfirmationNumber, ServiceCode, SequenceNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrderProductAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal ServiceCode As String, ByVal SequenceNumber As Integer, ByVal userState As Object)
            If (Me.GetOrderProductOperationCompleted Is Nothing) Then
                Me.GetOrderProductOperationCompleted = AddressOf Me.OnGetOrderProductOperationCompleted
            End If
            Me.InvokeAsync("GetOrderProduct", New Object() {UserName, Password, ConfirmationNumber, ServiceCode, SequenceNumber}, Me.GetOrderProductOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrderProductOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrderProductCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrderProductCompleted(Me, New GetOrderProductCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/GetOrderProductTest", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrderProductTest(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal ServiceCode As String, ByVal SequenceNumber As Integer, ByVal TestOptions As String) As String
            Dim results() As Object = Me.Invoke("GetOrderProductTest", New Object() {UserName, Password, ConfirmationNumber, ServiceCode, SequenceNumber, TestOptions})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetOrderProductTest(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal ServiceCode As String, ByVal SequenceNumber As Integer, ByVal TestOptions As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetOrderProductTest", New Object() {UserName, Password, ConfirmationNumber, ServiceCode, SequenceNumber, TestOptions}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetOrderProductTest(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrderProductTestAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal ServiceCode As String, ByVal SequenceNumber As Integer, ByVal TestOptions As String)
            Me.GetOrderProductTestAsync(UserName, Password, ConfirmationNumber, ServiceCode, SequenceNumber, TestOptions, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrderProductTestAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal ServiceCode As String, ByVal SequenceNumber As Integer, ByVal TestOptions As String, ByVal userState As Object)
            If (Me.GetOrderProductTestOperationCompleted Is Nothing) Then
                Me.GetOrderProductTestOperationCompleted = AddressOf Me.OnGetOrderProductTestOperationCompleted
            End If
            Me.InvokeAsync("GetOrderProductTest", New Object() {UserName, Password, ConfirmationNumber, ServiceCode, SequenceNumber, TestOptions}, Me.GetOrderProductTestOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrderProductTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrderProductTestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrderProductTestCompleted(Me, New GetOrderProductTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/GetOrderNotes", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrderNotes(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer) As String
            Dim results() As Object = Me.Invoke("GetOrderNotes", New Object() {UserName, Password, ConfirmationNumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetOrderNotes(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetOrderNotes", New Object() {UserName, Password, ConfirmationNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetOrderNotes(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrderNotesAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer)
            Me.GetOrderNotesAsync(UserName, Password, ConfirmationNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrderNotesAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal userState As Object)
            If (Me.GetOrderNotesOperationCompleted Is Nothing) Then
                Me.GetOrderNotesOperationCompleted = AddressOf Me.OnGetOrderNotesOperationCompleted
            End If
            Me.InvokeAsync("GetOrderNotes", New Object() {UserName, Password, ConfirmationNumber}, Me.GetOrderNotesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrderNotesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrderNotesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrderNotesCompleted(Me, New GetOrderNotesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/GetOrderNotesTest", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOrderNotesTest(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal inFlags As String) As String
            Dim results() As Object = Me.Invoke("GetOrderNotesTest", New Object() {UserName, Password, ConfirmationNumber, inFlags})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetOrderNotesTest(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal inFlags As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetOrderNotesTest", New Object() {UserName, Password, ConfirmationNumber, inFlags}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetOrderNotesTest(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOrderNotesTestAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal inFlags As String)
            Me.GetOrderNotesTestAsync(UserName, Password, ConfirmationNumber, inFlags, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOrderNotesTestAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal inFlags As String, ByVal userState As Object)
            If (Me.GetOrderNotesTestOperationCompleted Is Nothing) Then
                Me.GetOrderNotesTestOperationCompleted = AddressOf Me.OnGetOrderNotesTestOperationCompleted
            End If
            Me.InvokeAsync("GetOrderNotesTest", New Object() {UserName, Password, ConfirmationNumber, inFlags}, Me.GetOrderNotesTestOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOrderNotesTestOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOrderNotesTestCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOrderNotesTestCompleted(Me, New GetOrderNotesTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/AddOrderNote", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddOrderNote(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal Note As String, ByVal NoteType As String) As String
            Dim results() As Object = Me.Invoke("AddOrderNote", New Object() {UserName, Password, ConfirmationNumber, Note, NoteType})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginAddOrderNote(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal Note As String, ByVal NoteType As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AddOrderNote", New Object() {UserName, Password, ConfirmationNumber, Note, NoteType}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAddOrderNote(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddOrderNoteAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal Note As String, ByVal NoteType As String)
            Me.AddOrderNoteAsync(UserName, Password, ConfirmationNumber, Note, NoteType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddOrderNoteAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal Note As String, ByVal NoteType As String, ByVal userState As Object)
            If (Me.AddOrderNoteOperationCompleted Is Nothing) Then
                Me.AddOrderNoteOperationCompleted = AddressOf Me.OnAddOrderNoteOperationCompleted
            End If
            Me.InvokeAsync("AddOrderNote", New Object() {UserName, Password, ConfirmationNumber, Note, NoteType}, Me.AddOrderNoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddOrderNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddOrderNoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddOrderNoteCompleted(Me, New AddOrderNoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/FindOrders", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindOrders(ByVal UserName As String, ByVal Password As String, ByVal ReferenceNumber As String, ByVal Address As String, ByVal LastName As String) As String
            Dim results() As Object = Me.Invoke("FindOrders", New Object() {UserName, Password, ReferenceNumber, Address, LastName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginFindOrders(ByVal UserName As String, ByVal Password As String, ByVal ReferenceNumber As String, ByVal Address As String, ByVal LastName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FindOrders", New Object() {UserName, Password, ReferenceNumber, Address, LastName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFindOrders(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindOrdersAsync(ByVal UserName As String, ByVal Password As String, ByVal ReferenceNumber As String, ByVal Address As String, ByVal LastName As String)
            Me.FindOrdersAsync(UserName, Password, ReferenceNumber, Address, LastName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindOrdersAsync(ByVal UserName As String, ByVal Password As String, ByVal ReferenceNumber As String, ByVal Address As String, ByVal LastName As String, ByVal userState As Object)
            If (Me.FindOrdersOperationCompleted Is Nothing) Then
                Me.FindOrdersOperationCompleted = AddressOf Me.OnFindOrdersOperationCompleted
            End If
            Me.InvokeAsync("FindOrders", New Object() {UserName, Password, ReferenceNumber, Address, LastName}, Me.FindOrdersOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindOrdersOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindOrdersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindOrdersCompleted(Me, New FindOrdersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/ListProducts", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ListProducts(ByVal UserName As String, ByVal Password As String) As String
            Dim results() As Object = Me.Invoke("ListProducts", New Object() {UserName, Password})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginListProducts(ByVal UserName As String, ByVal Password As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ListProducts", New Object() {UserName, Password}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndListProducts(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ListProductsAsync(ByVal UserName As String, ByVal Password As String)
            Me.ListProductsAsync(UserName, Password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ListProductsAsync(ByVal UserName As String, ByVal Password As String, ByVal userState As Object)
            If (Me.ListProductsOperationCompleted Is Nothing) Then
                Me.ListProductsOperationCompleted = AddressOf Me.OnListProductsOperationCompleted
            End If
            Me.InvokeAsync("ListProducts", New Object() {UserName, Password}, Me.ListProductsOperationCompleted, userState)
        End Sub
        
        Private Sub OnListProductsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ListProductsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ListProductsCompleted(Me, New ListProductsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/QueryStatus", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function QueryStatus(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer) As String
            Dim results() As Object = Me.Invoke("QueryStatus", New Object() {UserName, Password, ConfirmationNumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginQueryStatus(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("QueryStatus", New Object() {UserName, Password, ConfirmationNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndQueryStatus(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub QueryStatusAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer)
            Me.QueryStatusAsync(UserName, Password, ConfirmationNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub QueryStatusAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal userState As Object)
            If (Me.QueryStatusOperationCompleted Is Nothing) Then
                Me.QueryStatusOperationCompleted = AddressOf Me.OnQueryStatusOperationCompleted
            End If
            Me.InvokeAsync("QueryStatus", New Object() {UserName, Password, ConfirmationNumber}, Me.QueryStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnQueryStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.QueryStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent QueryStatusCompleted(Me, New QueryStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.elsonline.net/ProductAction", RequestNamespace:="http://soap.elsonline.net", ResponseNamespace:="http://soap.elsonline.net", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProductAction(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal ServiceCode As String, ByVal SequenceNumber As Integer, ByVal Action As String) As String
            Dim results() As Object = Me.Invoke("ProductAction", New Object() {UserName, Password, ConfirmationNumber, ServiceCode, SequenceNumber, Action})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginProductAction(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal ServiceCode As String, ByVal SequenceNumber As Integer, ByVal Action As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ProductAction", New Object() {UserName, Password, ConfirmationNumber, ServiceCode, SequenceNumber, Action}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndProductAction(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProductActionAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal ServiceCode As String, ByVal SequenceNumber As Integer, ByVal Action As String)
            Me.ProductActionAsync(UserName, Password, ConfirmationNumber, ServiceCode, SequenceNumber, Action, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProductActionAsync(ByVal UserName As String, ByVal Password As String, ByVal ConfirmationNumber As Integer, ByVal ServiceCode As String, ByVal SequenceNumber As Integer, ByVal Action As String, ByVal userState As Object)
            If (Me.ProductActionOperationCompleted Is Nothing) Then
                Me.ProductActionOperationCompleted = AddressOf Me.OnProductActionOperationCompleted
            End If
            Me.InvokeAsync("ProductAction", New Object() {UserName, Password, ConfirmationNumber, ServiceCode, SequenceNumber, Action}, Me.ProductActionOperationCompleted, userState)
        End Sub
        
        Private Sub OnProductActionOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProductActionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProductActionCompleted(Me, New ProductActionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub RequestResearchCompletedEventHandler(ByVal sender As Object, ByVal e As RequestResearchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RequestResearchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub FactCertGetCompletedEventHandler(ByVal sender As Object, ByVal e As FactCertGetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FactCertGetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub FactCertSearchCompletedEventHandler(ByVal sender As Object, ByVal e As FactCertSearchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FactCertSearchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub FactCertCreateCompletedEventHandler(ByVal sender As Object, ByVal e As FactCertCreateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FactCertCreateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub SubmitRequestCompletedEventHandler(ByVal sender As Object, ByVal e As SubmitRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubmitRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub PlaceOrderCompletedEventHandler(ByVal sender As Object, ByVal e As PlaceOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PlaceOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub ThirdPartyPlaceOrderCompletedEventHandler(ByVal sender As Object, ByVal e As ThirdPartyPlaceOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ThirdPartyPlaceOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub MismoRequestCompletedEventHandler(ByVal sender As Object, ByVal e As MismoRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MismoRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub APIRequestCompletedEventHandler(ByVal sender As Object, ByVal e As APIRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class APIRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetOrderQueueCompletedEventHandler(ByVal sender As Object, ByVal e As GetOrderQueueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOrderQueueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetOrderQueueNewCompletedEventHandler(ByVal sender As Object, ByVal e As GetOrderQueueNewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOrderQueueNewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetSigningOrderQueueCompletedEventHandler(ByVal sender As Object, ByVal e As GetSigningOrderQueueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSigningOrderQueueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetOrderCompletedEventHandler(ByVal sender As Object, ByVal e As GetOrderCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOrderCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetOrderProductCompletedEventHandler(ByVal sender As Object, ByVal e As GetOrderProductCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOrderProductCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetOrderProductTestCompletedEventHandler(ByVal sender As Object, ByVal e As GetOrderProductTestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOrderProductTestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetOrderNotesCompletedEventHandler(ByVal sender As Object, ByVal e As GetOrderNotesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOrderNotesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetOrderNotesTestCompletedEventHandler(ByVal sender As Object, ByVal e As GetOrderNotesTestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOrderNotesTestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AddOrderNoteCompletedEventHandler(ByVal sender As Object, ByVal e As AddOrderNoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddOrderNoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub FindOrdersCompletedEventHandler(ByVal sender As Object, ByVal e As FindOrdersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindOrdersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub ListProductsCompletedEventHandler(ByVal sender As Object, ByVal e As ListProductsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ListProductsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub QueryStatusCompletedEventHandler(ByVal sender As Object, ByVal e As QueryStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class QueryStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub ProductActionCompletedEventHandler(ByVal sender As Object, ByVal e As ProductActionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProductActionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
