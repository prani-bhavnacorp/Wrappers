'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.832
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.832.
'
Namespace ISTWatchWebService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ISTWatchServicesSoap", [Namespace]:="http://www.name-searching.com/CaddressASP")>  _
    Partial Public Class ISTWatchServicesWse
        Inherits Microsoft.Web.Services3.WebServicesClientProtocol
        
        Private getAccountAccessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAccountInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private callTSearchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private callTSearch2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private callTASearchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private callTASearch2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private callTSearchStdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private callSTSearchStdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getBuildDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_ISTWatchWebService_ISTWatchServices
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event getAccountAccessCompleted As getAccountAccessCompletedEventHandler
        
        '''<remarks/>
        Public Event getAccountInfoCompleted As getAccountInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event callTSearchCompleted As callTSearchCompletedEventHandler
        
        '''<remarks/>
        Public Event callTSearch2Completed As callTSearch2CompletedEventHandler
        
        '''<remarks/>
        Public Event callTASearchCompleted As callTASearchCompletedEventHandler
        
        '''<remarks/>
        Public Event callTASearch2Completed As callTASearch2CompletedEventHandler
        
        '''<remarks/>
        Public Event callTSearchStdCompleted As callTSearchStdCompletedEventHandler
        
        '''<remarks/>
        Public Event callSTSearchStdCompleted As callSTSearchStdCompletedEventHandler
        
        '''<remarks/>
        Public Event getBuildDateCompleted As getBuildDateCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.name-searching.com/CaddressASP/getAccountAccess", RequestNamespace:="http://www.name-searching.com/CaddressASP", ResponseNamespace:="http://www.name-searching.com/CaddressASP", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAccountAccess(ByVal username As String, ByVal password As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getAccountAccess", New Object() {username, password})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAccountAccessAsync(ByVal username As String, ByVal password As String)
            Me.getAccountAccessAsync(username, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAccountAccessAsync(ByVal username As String, ByVal password As String, ByVal userState As Object)
            If (Me.getAccountAccessOperationCompleted Is Nothing) Then
                Me.getAccountAccessOperationCompleted = AddressOf Me.OngetAccountAccessOperationCompleted
            End If
            Me.InvokeAsync("getAccountAccess", New Object() {username, password}, Me.getAccountAccessOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAccountAccessOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAccountAccessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAccountAccessCompleted(Me, New getAccountAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.name-searching.com/CaddressASP/getAccountInfo", RequestNamespace:="http://www.name-searching.com/CaddressASP", ResponseNamespace:="http://www.name-searching.com/CaddressASP", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAccountInfo(ByVal username As String, ByVal password As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getAccountInfo", New Object() {username, password})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAccountInfoAsync(ByVal username As String, ByVal password As String)
            Me.getAccountInfoAsync(username, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAccountInfoAsync(ByVal username As String, ByVal password As String, ByVal userState As Object)
            If (Me.getAccountInfoOperationCompleted Is Nothing) Then
                Me.getAccountInfoOperationCompleted = AddressOf Me.OngetAccountInfoOperationCompleted
            End If
            Me.InvokeAsync("getAccountInfo", New Object() {username, password}, Me.getAccountInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAccountInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAccountInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAccountInfoCompleted(Me, New getAccountInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.name-searching.com/CaddressASP/callTSearch", RequestNamespace:="http://www.name-searching.com/CaddressASP", ResponseNamespace:="http://www.name-searching.com/CaddressASP", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function callTSearch(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("callTSearch", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub callTSearchAsync(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String)
            Me.callTSearchAsync(username, password, name, street, city, country, score_threshold, maximum_results, search_lists, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub callTSearchAsync(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal userState As Object)
            If (Me.callTSearchOperationCompleted Is Nothing) Then
                Me.callTSearchOperationCompleted = AddressOf Me.OncallTSearchOperationCompleted
            End If
            Me.InvokeAsync("callTSearch", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists}, Me.callTSearchOperationCompleted, userState)
        End Sub
        
        Private Sub OncallTSearchOperationCompleted(ByVal arg As Object)
            If (Not (Me.callTSearchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent callTSearchCompleted(Me, New callTSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.name-searching.com/CaddressASP/callTSearch2", RequestNamespace:="http://www.name-searching.com/CaddressASP", ResponseNamespace:="http://www.name-searching.com/CaddressASP", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function callTSearch2(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("callTSearch2", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub callTSearch2Async(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String)
            Me.callTSearch2Async(username, password, name, street, city, country, score_threshold, maximum_results, search_lists, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub callTSearch2Async(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal userState As Object)
            If (Me.callTSearch2OperationCompleted Is Nothing) Then
                Me.callTSearch2OperationCompleted = AddressOf Me.OncallTSearch2OperationCompleted
            End If
            Me.InvokeAsync("callTSearch2", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists}, Me.callTSearch2OperationCompleted, userState)
        End Sub
        
        Private Sub OncallTSearch2OperationCompleted(ByVal arg As Object)
            If (Not (Me.callTSearch2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent callTSearch2Completed(Me, New callTSearch2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.name-searching.com/CaddressASP/callTASearch", RequestNamespace:="http://www.name-searching.com/CaddressASP", ResponseNamespace:="http://www.name-searching.com/CaddressASP", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function callTASearch(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("callTASearch", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub callTASearchAsync(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String)
            Me.callTASearchAsync(username, password, name, street, city, country, score_threshold, maximum_results, search_lists, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub callTASearchAsync(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal userState As Object)
            If (Me.callTASearchOperationCompleted Is Nothing) Then
                Me.callTASearchOperationCompleted = AddressOf Me.OncallTASearchOperationCompleted
            End If
            Me.InvokeAsync("callTASearch", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists}, Me.callTASearchOperationCompleted, userState)
        End Sub
        
        Private Sub OncallTASearchOperationCompleted(ByVal arg As Object)
            If (Not (Me.callTASearchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent callTASearchCompleted(Me, New callTASearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.name-searching.com/CaddressASP/callTASearch2", RequestNamespace:="http://www.name-searching.com/CaddressASP", ResponseNamespace:="http://www.name-searching.com/CaddressASP", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function callTASearch2(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("callTASearch2", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub callTASearch2Async(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String)
            Me.callTASearch2Async(username, password, name, street, city, country, score_threshold, maximum_results, search_lists, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub callTASearch2Async(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal userState As Object)
            If (Me.callTASearch2OperationCompleted Is Nothing) Then
                Me.callTASearch2OperationCompleted = AddressOf Me.OncallTASearch2OperationCompleted
            End If
            Me.InvokeAsync("callTASearch2", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists}, Me.callTASearch2OperationCompleted, userState)
        End Sub
        
        Private Sub OncallTASearch2OperationCompleted(ByVal arg As Object)
            If (Not (Me.callTASearch2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent callTASearch2Completed(Me, New callTASearch2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.name-searching.com/CaddressASP/callTSearchStd", RequestNamespace:="http://www.name-searching.com/CaddressASP", ResponseNamespace:="http://www.name-searching.com/CaddressASP", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function callTSearchStd(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal search_rulebase As Boolean, ByVal exclude_vessel As Boolean, ByVal include_alias As Boolean, ByVal extended_search As Boolean, ByVal search_range As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("callTSearchStd", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists, search_rulebase, exclude_vessel, include_alias, extended_search, search_range})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub callTSearchStdAsync(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal search_rulebase As Boolean, ByVal exclude_vessel As Boolean, ByVal include_alias As Boolean, ByVal extended_search As Boolean, ByVal search_range As Integer)
            Me.callTSearchStdAsync(username, password, name, street, city, country, score_threshold, maximum_results, search_lists, search_rulebase, exclude_vessel, include_alias, extended_search, search_range, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub callTSearchStdAsync(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal search_rulebase As Boolean, ByVal exclude_vessel As Boolean, ByVal include_alias As Boolean, ByVal extended_search As Boolean, ByVal search_range As Integer, ByVal userState As Object)
            If (Me.callTSearchStdOperationCompleted Is Nothing) Then
                Me.callTSearchStdOperationCompleted = AddressOf Me.OncallTSearchStdOperationCompleted
            End If
            Me.InvokeAsync("callTSearchStd", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists, search_rulebase, exclude_vessel, include_alias, extended_search, search_range}, Me.callTSearchStdOperationCompleted, userState)
        End Sub
        
        Private Sub OncallTSearchStdOperationCompleted(ByVal arg As Object)
            If (Not (Me.callTSearchStdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent callTSearchStdCompleted(Me, New callTSearchStdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.name-searching.com/CaddressASP/callSTSearchStd", RequestNamespace:="http://www.name-searching.com/CaddressASP", ResponseNamespace:="http://www.name-searching.com/CaddressASP", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function callSTSearchStd(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal search_rulebase As Boolean, ByVal exclude_vessel As Boolean, ByVal include_alias As Boolean, ByVal extended_search As Boolean, ByVal search_range As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("callSTSearchStd", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists, search_rulebase, exclude_vessel, include_alias, extended_search, search_range})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub callSTSearchStdAsync(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal search_rulebase As Boolean, ByVal exclude_vessel As Boolean, ByVal include_alias As Boolean, ByVal extended_search As Boolean, ByVal search_range As Integer)
            Me.callSTSearchStdAsync(username, password, name, street, city, country, score_threshold, maximum_results, search_lists, search_rulebase, exclude_vessel, include_alias, extended_search, search_range, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub callSTSearchStdAsync(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal search_rulebase As Boolean, ByVal exclude_vessel As Boolean, ByVal include_alias As Boolean, ByVal extended_search As Boolean, ByVal search_range As Integer, ByVal userState As Object)
            If (Me.callSTSearchStdOperationCompleted Is Nothing) Then
                Me.callSTSearchStdOperationCompleted = AddressOf Me.OncallSTSearchStdOperationCompleted
            End If
            Me.InvokeAsync("callSTSearchStd", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists, search_rulebase, exclude_vessel, include_alias, extended_search, search_range}, Me.callSTSearchStdOperationCompleted, userState)
        End Sub
        
        Private Sub OncallSTSearchStdOperationCompleted(ByVal arg As Object)
            If (Not (Me.callSTSearchStdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent callSTSearchStdCompleted(Me, New callSTSearchStdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.name-searching.com/CaddressASP/getBuildDate", RequestNamespace:="http://www.name-searching.com/CaddressASP", ResponseNamespace:="http://www.name-searching.com/CaddressASP", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getBuildDate() As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getBuildDate", New Object(-1) {})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getBuildDateAsync()
            Me.getBuildDateAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getBuildDateAsync(ByVal userState As Object)
            If (Me.getBuildDateOperationCompleted Is Nothing) Then
                Me.getBuildDateOperationCompleted = AddressOf Me.OngetBuildDateOperationCompleted
            End If
            Me.InvokeAsync("getBuildDate", New Object(-1) {}, Me.getBuildDateOperationCompleted, userState)
        End Sub
        
        Private Sub OngetBuildDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.getBuildDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getBuildDateCompleted(Me, New getBuildDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ISTWatchServicesSoap", [Namespace]:="http://www.name-searching.com/CaddressASP")>  _
    Partial Public Class ISTWatchServices
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private getAccountAccessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getAccountInfoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private callTSearchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private callTSearch2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private callTASearchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private callTASearch2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private callTSearchStdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private callSTSearchStdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getBuildDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_ISTWatchWebService_ISTWatchServices
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event getAccountAccessCompleted As getAccountAccessCompletedEventHandler
        
        '''<remarks/>
        Public Event getAccountInfoCompleted As getAccountInfoCompletedEventHandler
        
        '''<remarks/>
        Public Event callTSearchCompleted As callTSearchCompletedEventHandler
        
        '''<remarks/>
        Public Event callTSearch2Completed As callTSearch2CompletedEventHandler
        
        '''<remarks/>
        Public Event callTASearchCompleted As callTASearchCompletedEventHandler
        
        '''<remarks/>
        Public Event callTASearch2Completed As callTASearch2CompletedEventHandler
        
        '''<remarks/>
        Public Event callTSearchStdCompleted As callTSearchStdCompletedEventHandler
        
        '''<remarks/>
        Public Event callSTSearchStdCompleted As callSTSearchStdCompletedEventHandler
        
        '''<remarks/>
        Public Event getBuildDateCompleted As getBuildDateCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.name-searching.com/CaddressASP/getAccountAccess", RequestNamespace:="http://www.name-searching.com/CaddressASP", ResponseNamespace:="http://www.name-searching.com/CaddressASP", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAccountAccess(ByVal username As String, ByVal password As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getAccountAccess", New Object() {username, password})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BegingetAccountAccess(ByVal username As String, ByVal password As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getAccountAccess", New Object() {username, password}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetAccountAccess(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAccountAccessAsync(ByVal username As String, ByVal password As String)
            Me.getAccountAccessAsync(username, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAccountAccessAsync(ByVal username As String, ByVal password As String, ByVal userState As Object)
            If (Me.getAccountAccessOperationCompleted Is Nothing) Then
                Me.getAccountAccessOperationCompleted = AddressOf Me.OngetAccountAccessOperationCompleted
            End If
            Me.InvokeAsync("getAccountAccess", New Object() {username, password}, Me.getAccountAccessOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAccountAccessOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAccountAccessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAccountAccessCompleted(Me, New getAccountAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.name-searching.com/CaddressASP/getAccountInfo", RequestNamespace:="http://www.name-searching.com/CaddressASP", ResponseNamespace:="http://www.name-searching.com/CaddressASP", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getAccountInfo(ByVal username As String, ByVal password As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getAccountInfo", New Object() {username, password})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BegingetAccountInfo(ByVal username As String, ByVal password As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getAccountInfo", New Object() {username, password}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetAccountInfo(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getAccountInfoAsync(ByVal username As String, ByVal password As String)
            Me.getAccountInfoAsync(username, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getAccountInfoAsync(ByVal username As String, ByVal password As String, ByVal userState As Object)
            If (Me.getAccountInfoOperationCompleted Is Nothing) Then
                Me.getAccountInfoOperationCompleted = AddressOf Me.OngetAccountInfoOperationCompleted
            End If
            Me.InvokeAsync("getAccountInfo", New Object() {username, password}, Me.getAccountInfoOperationCompleted, userState)
        End Sub
        
        Private Sub OngetAccountInfoOperationCompleted(ByVal arg As Object)
            If (Not (Me.getAccountInfoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getAccountInfoCompleted(Me, New getAccountInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.name-searching.com/CaddressASP/callTSearch", RequestNamespace:="http://www.name-searching.com/CaddressASP", ResponseNamespace:="http://www.name-searching.com/CaddressASP", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function callTSearch(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("callTSearch", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BegincallTSearch(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("callTSearch", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndcallTSearch(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub callTSearchAsync(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String)
            Me.callTSearchAsync(username, password, name, street, city, country, score_threshold, maximum_results, search_lists, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub callTSearchAsync(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal userState As Object)
            If (Me.callTSearchOperationCompleted Is Nothing) Then
                Me.callTSearchOperationCompleted = AddressOf Me.OncallTSearchOperationCompleted
            End If
            Me.InvokeAsync("callTSearch", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists}, Me.callTSearchOperationCompleted, userState)
        End Sub
        
        Private Sub OncallTSearchOperationCompleted(ByVal arg As Object)
            If (Not (Me.callTSearchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent callTSearchCompleted(Me, New callTSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.name-searching.com/CaddressASP/callTSearch2", RequestNamespace:="http://www.name-searching.com/CaddressASP", ResponseNamespace:="http://www.name-searching.com/CaddressASP", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function callTSearch2(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("callTSearch2", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BegincallTSearch2(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("callTSearch2", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndcallTSearch2(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub callTSearch2Async(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String)
            Me.callTSearch2Async(username, password, name, street, city, country, score_threshold, maximum_results, search_lists, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub callTSearch2Async(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal userState As Object)
            If (Me.callTSearch2OperationCompleted Is Nothing) Then
                Me.callTSearch2OperationCompleted = AddressOf Me.OncallTSearch2OperationCompleted
            End If
            Me.InvokeAsync("callTSearch2", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists}, Me.callTSearch2OperationCompleted, userState)
        End Sub
        
        Private Sub OncallTSearch2OperationCompleted(ByVal arg As Object)
            If (Not (Me.callTSearch2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent callTSearch2Completed(Me, New callTSearch2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.name-searching.com/CaddressASP/callTASearch", RequestNamespace:="http://www.name-searching.com/CaddressASP", ResponseNamespace:="http://www.name-searching.com/CaddressASP", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function callTASearch(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("callTASearch", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BegincallTASearch(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("callTASearch", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndcallTASearch(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub callTASearchAsync(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String)
            Me.callTASearchAsync(username, password, name, street, city, country, score_threshold, maximum_results, search_lists, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub callTASearchAsync(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal userState As Object)
            If (Me.callTASearchOperationCompleted Is Nothing) Then
                Me.callTASearchOperationCompleted = AddressOf Me.OncallTASearchOperationCompleted
            End If
            Me.InvokeAsync("callTASearch", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists}, Me.callTASearchOperationCompleted, userState)
        End Sub
        
        Private Sub OncallTASearchOperationCompleted(ByVal arg As Object)
            If (Not (Me.callTASearchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent callTASearchCompleted(Me, New callTASearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.name-searching.com/CaddressASP/callTASearch2", RequestNamespace:="http://www.name-searching.com/CaddressASP", ResponseNamespace:="http://www.name-searching.com/CaddressASP", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function callTASearch2(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("callTASearch2", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BegincallTASearch2(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("callTASearch2", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndcallTASearch2(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub callTASearch2Async(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String)
            Me.callTASearch2Async(username, password, name, street, city, country, score_threshold, maximum_results, search_lists, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub callTASearch2Async(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal userState As Object)
            If (Me.callTASearch2OperationCompleted Is Nothing) Then
                Me.callTASearch2OperationCompleted = AddressOf Me.OncallTASearch2OperationCompleted
            End If
            Me.InvokeAsync("callTASearch2", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists}, Me.callTASearch2OperationCompleted, userState)
        End Sub
        
        Private Sub OncallTASearch2OperationCompleted(ByVal arg As Object)
            If (Not (Me.callTASearch2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent callTASearch2Completed(Me, New callTASearch2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.name-searching.com/CaddressASP/callTSearchStd", RequestNamespace:="http://www.name-searching.com/CaddressASP", ResponseNamespace:="http://www.name-searching.com/CaddressASP", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function callTSearchStd(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal search_rulebase As Boolean, ByVal exclude_vessel As Boolean, ByVal include_alias As Boolean, ByVal extended_search As Boolean, ByVal search_range As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("callTSearchStd", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists, search_rulebase, exclude_vessel, include_alias, extended_search, search_range})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BegincallTSearchStd( _
                    ByVal username As String,  _
                    ByVal password As String,  _
                    ByVal name As String,  _
                    ByVal street As String,  _
                    ByVal city As String,  _
                    ByVal country As String,  _
                    ByVal score_threshold As Integer,  _
                    ByVal maximum_results As Integer,  _
                    ByVal search_lists As String,  _
                    ByVal search_rulebase As Boolean,  _
                    ByVal exclude_vessel As Boolean,  _
                    ByVal include_alias As Boolean,  _
                    ByVal extended_search As Boolean,  _
                    ByVal search_range As Integer,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("callTSearchStd", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists, search_rulebase, exclude_vessel, include_alias, extended_search, search_range}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndcallTSearchStd(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub callTSearchStdAsync(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal search_rulebase As Boolean, ByVal exclude_vessel As Boolean, ByVal include_alias As Boolean, ByVal extended_search As Boolean, ByVal search_range As Integer)
            Me.callTSearchStdAsync(username, password, name, street, city, country, score_threshold, maximum_results, search_lists, search_rulebase, exclude_vessel, include_alias, extended_search, search_range, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub callTSearchStdAsync(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal search_rulebase As Boolean, ByVal exclude_vessel As Boolean, ByVal include_alias As Boolean, ByVal extended_search As Boolean, ByVal search_range As Integer, ByVal userState As Object)
            If (Me.callTSearchStdOperationCompleted Is Nothing) Then
                Me.callTSearchStdOperationCompleted = AddressOf Me.OncallTSearchStdOperationCompleted
            End If
            Me.InvokeAsync("callTSearchStd", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists, search_rulebase, exclude_vessel, include_alias, extended_search, search_range}, Me.callTSearchStdOperationCompleted, userState)
        End Sub
        
        Private Sub OncallTSearchStdOperationCompleted(ByVal arg As Object)
            If (Not (Me.callTSearchStdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent callTSearchStdCompleted(Me, New callTSearchStdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.name-searching.com/CaddressASP/callSTSearchStd", RequestNamespace:="http://www.name-searching.com/CaddressASP", ResponseNamespace:="http://www.name-searching.com/CaddressASP", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function callSTSearchStd(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal search_rulebase As Boolean, ByVal exclude_vessel As Boolean, ByVal include_alias As Boolean, ByVal extended_search As Boolean, ByVal search_range As Integer) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("callSTSearchStd", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists, search_rulebase, exclude_vessel, include_alias, extended_search, search_range})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BegincallSTSearchStd( _
                    ByVal username As String,  _
                    ByVal password As String,  _
                    ByVal name As String,  _
                    ByVal street As String,  _
                    ByVal city As String,  _
                    ByVal country As String,  _
                    ByVal score_threshold As Integer,  _
                    ByVal maximum_results As Integer,  _
                    ByVal search_lists As String,  _
                    ByVal search_rulebase As Boolean,  _
                    ByVal exclude_vessel As Boolean,  _
                    ByVal include_alias As Boolean,  _
                    ByVal extended_search As Boolean,  _
                    ByVal search_range As Integer,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("callSTSearchStd", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists, search_rulebase, exclude_vessel, include_alias, extended_search, search_range}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndcallSTSearchStd(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub callSTSearchStdAsync(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal search_rulebase As Boolean, ByVal exclude_vessel As Boolean, ByVal include_alias As Boolean, ByVal extended_search As Boolean, ByVal search_range As Integer)
            Me.callSTSearchStdAsync(username, password, name, street, city, country, score_threshold, maximum_results, search_lists, search_rulebase, exclude_vessel, include_alias, extended_search, search_range, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub callSTSearchStdAsync(ByVal username As String, ByVal password As String, ByVal name As String, ByVal street As String, ByVal city As String, ByVal country As String, ByVal score_threshold As Integer, ByVal maximum_results As Integer, ByVal search_lists As String, ByVal search_rulebase As Boolean, ByVal exclude_vessel As Boolean, ByVal include_alias As Boolean, ByVal extended_search As Boolean, ByVal search_range As Integer, ByVal userState As Object)
            If (Me.callSTSearchStdOperationCompleted Is Nothing) Then
                Me.callSTSearchStdOperationCompleted = AddressOf Me.OncallSTSearchStdOperationCompleted
            End If
            Me.InvokeAsync("callSTSearchStd", New Object() {username, password, name, street, city, country, score_threshold, maximum_results, search_lists, search_rulebase, exclude_vessel, include_alias, extended_search, search_range}, Me.callSTSearchStdOperationCompleted, userState)
        End Sub
        
        Private Sub OncallSTSearchStdOperationCompleted(ByVal arg As Object)
            If (Not (Me.callSTSearchStdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent callSTSearchStdCompleted(Me, New callSTSearchStdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.name-searching.com/CaddressASP/getBuildDate", RequestNamespace:="http://www.name-searching.com/CaddressASP", ResponseNamespace:="http://www.name-searching.com/CaddressASP", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getBuildDate() As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("getBuildDate", New Object(-1) {})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BegingetBuildDate(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getBuildDate", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetBuildDate(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getBuildDateAsync()
            Me.getBuildDateAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getBuildDateAsync(ByVal userState As Object)
            If (Me.getBuildDateOperationCompleted Is Nothing) Then
                Me.getBuildDateOperationCompleted = AddressOf Me.OngetBuildDateOperationCompleted
            End If
            Me.InvokeAsync("getBuildDate", New Object(-1) {}, Me.getBuildDateOperationCompleted, userState)
        End Sub
        
        Private Sub OngetBuildDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.getBuildDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getBuildDateCompleted(Me, New getBuildDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub getAccountAccessCompletedEventHandler(ByVal sender As Object, ByVal e As getAccountAccessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAccountAccessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub getAccountInfoCompletedEventHandler(ByVal sender As Object, ByVal e As getAccountInfoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getAccountInfoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub callTSearchCompletedEventHandler(ByVal sender As Object, ByVal e As callTSearchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class callTSearchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub callTSearch2CompletedEventHandler(ByVal sender As Object, ByVal e As callTSearch2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class callTSearch2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub callTASearchCompletedEventHandler(ByVal sender As Object, ByVal e As callTASearchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class callTASearchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub callTASearch2CompletedEventHandler(ByVal sender As Object, ByVal e As callTASearch2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class callTASearch2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub callTSearchStdCompletedEventHandler(ByVal sender As Object, ByVal e As callTSearchStdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class callTSearchStdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub callSTSearchStdCompletedEventHandler(ByVal sender As Object, ByVal e As callSTSearchStdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class callSTSearchStdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub getBuildDateCompletedEventHandler(ByVal sender As Object, ByVal e As getBuildDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getBuildDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
End Namespace
