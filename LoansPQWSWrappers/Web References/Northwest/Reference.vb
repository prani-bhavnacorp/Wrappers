'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3625
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3625.
'
Namespace Northwest
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="MeridianLoanApplicationSoap", [Namespace]:="http://nwfcu.org/MLA/")>  _
    Partial Public Class MeridianLoanApplicationWse
        Inherits Microsoft.Web.Services3.WebServicesClientProtocol
        
        Private AccountInquiryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DisburseLoanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_Northwest_MeridianLoanApplication
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event AccountInquiryCompleted As AccountInquiryCompletedEventHandler
        
        '''<remarks/>
        Public Event DisburseLoanCompleted As DisburseLoanCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nwfcu.org/MLA/AccountInquiry", RequestNamespace:="http://nwfcu.org/MLA/", ResponseNamespace:="http://nwfcu.org/MLA/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AccountInquiry(ByVal requestString As String) As String
            Dim results() As Object = Me.Invoke("AccountInquiry", New Object() {requestString})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AccountInquiryAsync(ByVal requestString As String)
            Me.AccountInquiryAsync(requestString, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AccountInquiryAsync(ByVal requestString As String, ByVal userState As Object)
            If (Me.AccountInquiryOperationCompleted Is Nothing) Then
                Me.AccountInquiryOperationCompleted = AddressOf Me.OnAccountInquiryOperationCompleted
            End If
            Me.InvokeAsync("AccountInquiry", New Object() {requestString}, Me.AccountInquiryOperationCompleted, userState)
        End Sub
        
        Private Sub OnAccountInquiryOperationCompleted(ByVal arg As Object)
            If (Not (Me.AccountInquiryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AccountInquiryCompleted(Me, New AccountInquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nwfcu.org/MLA/DisburseLoan", RequestNamespace:="http://nwfcu.org/MLA/", ResponseNamespace:="http://nwfcu.org/MLA/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DisburseLoan(ByVal requestString As String) As String
            Dim results() As Object = Me.Invoke("DisburseLoan", New Object() {requestString})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DisburseLoanAsync(ByVal requestString As String)
            Me.DisburseLoanAsync(requestString, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DisburseLoanAsync(ByVal requestString As String, ByVal userState As Object)
            If (Me.DisburseLoanOperationCompleted Is Nothing) Then
                Me.DisburseLoanOperationCompleted = AddressOf Me.OnDisburseLoanOperationCompleted
            End If
            Me.InvokeAsync("DisburseLoan", New Object() {requestString}, Me.DisburseLoanOperationCompleted, userState)
        End Sub
        
        Private Sub OnDisburseLoanOperationCompleted(ByVal arg As Object)
            If (Not (Me.DisburseLoanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DisburseLoanCompleted(Me, New DisburseLoanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="MeridianLoanApplicationSoap", [Namespace]:="http://nwfcu.org/MLA/")>  _
    Partial Public Class MeridianLoanApplication
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private AccountInquiryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DisburseLoanOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_Northwest_MeridianLoanApplication
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event AccountInquiryCompleted As AccountInquiryCompletedEventHandler
        
        '''<remarks/>
        Public Event DisburseLoanCompleted As DisburseLoanCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nwfcu.org/MLA/AccountInquiry", RequestNamespace:="http://nwfcu.org/MLA/", ResponseNamespace:="http://nwfcu.org/MLA/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AccountInquiry(ByVal requestString As String) As String
            Dim results() As Object = Me.Invoke("AccountInquiry", New Object() {requestString})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginAccountInquiry(ByVal requestString As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AccountInquiry", New Object() {requestString}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAccountInquiry(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AccountInquiryAsync(ByVal requestString As String)
            Me.AccountInquiryAsync(requestString, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AccountInquiryAsync(ByVal requestString As String, ByVal userState As Object)
            If (Me.AccountInquiryOperationCompleted Is Nothing) Then
                Me.AccountInquiryOperationCompleted = AddressOf Me.OnAccountInquiryOperationCompleted
            End If
            Me.InvokeAsync("AccountInquiry", New Object() {requestString}, Me.AccountInquiryOperationCompleted, userState)
        End Sub
        
        Private Sub OnAccountInquiryOperationCompleted(ByVal arg As Object)
            If (Not (Me.AccountInquiryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AccountInquiryCompleted(Me, New AccountInquiryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://nwfcu.org/MLA/DisburseLoan", RequestNamespace:="http://nwfcu.org/MLA/", ResponseNamespace:="http://nwfcu.org/MLA/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DisburseLoan(ByVal requestString As String) As String
            Dim results() As Object = Me.Invoke("DisburseLoan", New Object() {requestString})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDisburseLoan(ByVal requestString As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DisburseLoan", New Object() {requestString}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDisburseLoan(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DisburseLoanAsync(ByVal requestString As String)
            Me.DisburseLoanAsync(requestString, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DisburseLoanAsync(ByVal requestString As String, ByVal userState As Object)
            If (Me.DisburseLoanOperationCompleted Is Nothing) Then
                Me.DisburseLoanOperationCompleted = AddressOf Me.OnDisburseLoanOperationCompleted
            End If
            Me.InvokeAsync("DisburseLoan", New Object() {requestString}, Me.DisburseLoanOperationCompleted, userState)
        End Sub
        
        Private Sub OnDisburseLoanOperationCompleted(ByVal arg As Object)
            If (Not (Me.DisburseLoanCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DisburseLoanCompleted(Me, New DisburseLoanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AccountInquiryCompletedEventHandler(ByVal sender As Object, ByVal e As AccountInquiryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AccountInquiryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub DisburseLoanCompletedEventHandler(ByVal sender As Object, ByVal e As DisburseLoanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DisburseLoanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
