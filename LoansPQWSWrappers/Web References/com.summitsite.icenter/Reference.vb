'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3603
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3603.
'
Namespace com.summitsite.icenter
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="CmdSpectrumImplPortBinding", [Namespace]:="http://cmdspectrum.ws.spectrum.summit.fiserv.com/")>  _
    Partial Public Class CmdSpectrumServiceWse
        Inherits Microsoft.Web.Services3.WebServicesClientProtocol
        
        Private submitXMLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private submitSTTIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private submitXMLCommandOperationCompleted As System.Threading.SendOrPostCallback
        
        Private submitFiAPIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private submitSIMOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getTellerIdsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private submitSSP1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private submitSSP2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private submitXMLCntlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_com_summitsite_icenter_CmdSpectrumService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event submitXMLCompleted As submitXMLCompletedEventHandler
        
        '''<remarks/>
        Public Event submitSTTICompleted As submitSTTICompletedEventHandler
        
        '''<remarks/>
        Public Event submitXMLCommandCompleted As submitXMLCommandCompletedEventHandler
        
        '''<remarks/>
        Public Event submitFiAPICompleted As submitFiAPICompletedEventHandler
        
        '''<remarks/>
        Public Event submitSIMCompleted As submitSIMCompletedEventHandler
        
        '''<remarks/>
        Public Event getTellerIdsCompleted As getTellerIdsCompletedEventHandler
        
        '''<remarks/>
        Public Event submitSSP1Completed As submitSSP1CompletedEventHandler
        
        '''<remarks/>
        Public Event submitSSP2Completed As submitSSP2CompletedEventHandler
        
        '''<remarks/>
        Public Event submitXMLCntlCompleted As submitXMLCntlCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:submitXML", RequestNamespace:="urn:connections.spectrum.summitsite.com", ResponseNamespace:="urn:connections.spectrum.summitsite.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function submitXML(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal request As String) As <System.Xml.Serialization.XmlElementAttribute("submitXMLResponse", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
            Dim results() As Object = Me.Invoke("submitXML", New Object() {request})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub submitXMLAsync(ByVal request As String)
            Me.submitXMLAsync(request, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub submitXMLAsync(ByVal request As String, ByVal userState As Object)
            If (Me.submitXMLOperationCompleted Is Nothing) Then
                Me.submitXMLOperationCompleted = AddressOf Me.OnsubmitXMLOperationCompleted
            End If
            Me.InvokeAsync("submitXML", New Object() {request}, Me.submitXMLOperationCompleted, userState)
        End Sub
        
        Private Sub OnsubmitXMLOperationCompleted(ByVal arg As Object)
            If (Not (Me.submitXMLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent submitXMLCompleted(Me, New submitXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:submitSTTI", RequestNamespace:="urn:connections.spectrum.summitsite.com", ResponseNamespace:="urn:connections.spectrum.summitsite.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function submitSTTI(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal trhVerNum As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal moduleNum As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal tranCode As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal tranVerNum As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal tranByteMap As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal requestData As String) As <System.Xml.Serialization.XmlElementAttribute("submitSTTIResponse", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
            Dim results() As Object = Me.Invoke("submitSTTI", New Object() {trhVerNum, moduleNum, tranCode, tranVerNum, tranByteMap, requestData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub submitSTTIAsync(ByVal trhVerNum As String, ByVal moduleNum As String, ByVal tranCode As String, ByVal tranVerNum As String, ByVal tranByteMap As String, ByVal requestData As String)
            Me.submitSTTIAsync(trhVerNum, moduleNum, tranCode, tranVerNum, tranByteMap, requestData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub submitSTTIAsync(ByVal trhVerNum As String, ByVal moduleNum As String, ByVal tranCode As String, ByVal tranVerNum As String, ByVal tranByteMap As String, ByVal requestData As String, ByVal userState As Object)
            If (Me.submitSTTIOperationCompleted Is Nothing) Then
                Me.submitSTTIOperationCompleted = AddressOf Me.OnsubmitSTTIOperationCompleted
            End If
            Me.InvokeAsync("submitSTTI", New Object() {trhVerNum, moduleNum, tranCode, tranVerNum, tranByteMap, requestData}, Me.submitSTTIOperationCompleted, userState)
        End Sub
        
        Private Sub OnsubmitSTTIOperationCompleted(ByVal arg As Object)
            If (Not (Me.submitSTTICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent submitSTTICompleted(Me, New submitSTTICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("url:submitXMLCommand", RequestNamespace:="urn:connections.spectrum.summitsite.com", ResponseNamespace:="urn:connections.spectrum.summitsite.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function submitXMLCommand(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal xmlRequest As String) As <System.Xml.Serialization.XmlElementAttribute("submitXMLCommandResponse", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
            Dim results() As Object = Me.Invoke("submitXMLCommand", New Object() {xmlRequest})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub submitXMLCommandAsync(ByVal xmlRequest As String)
            Me.submitXMLCommandAsync(xmlRequest, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub submitXMLCommandAsync(ByVal xmlRequest As String, ByVal userState As Object)
            If (Me.submitXMLCommandOperationCompleted Is Nothing) Then
                Me.submitXMLCommandOperationCompleted = AddressOf Me.OnsubmitXMLCommandOperationCompleted
            End If
            Me.InvokeAsync("submitXMLCommand", New Object() {xmlRequest}, Me.submitXMLCommandOperationCompleted, userState)
        End Sub
        
        Private Sub OnsubmitXMLCommandOperationCompleted(ByVal arg As Object)
            If (Not (Me.submitXMLCommandCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent submitXMLCommandCompleted(Me, New submitXMLCommandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:submitFiAPI", RequestNamespace:="urn:connections.spectrum.summitsite.com", ResponseNamespace:="urn:connections.spectrum.summitsite.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function submitFiAPI(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal request As String) As <System.Xml.Serialization.XmlElementAttribute("submitFiAPIResponse", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
            Dim results() As Object = Me.Invoke("submitFiAPI", New Object() {request})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub submitFiAPIAsync(ByVal request As String)
            Me.submitFiAPIAsync(request, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub submitFiAPIAsync(ByVal request As String, ByVal userState As Object)
            If (Me.submitFiAPIOperationCompleted Is Nothing) Then
                Me.submitFiAPIOperationCompleted = AddressOf Me.OnsubmitFiAPIOperationCompleted
            End If
            Me.InvokeAsync("submitFiAPI", New Object() {request}, Me.submitFiAPIOperationCompleted, userState)
        End Sub
        
        Private Sub OnsubmitFiAPIOperationCompleted(ByVal arg As Object)
            If (Not (Me.submitFiAPICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent submitFiAPICompleted(Me, New submitFiAPICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:submitSIM", RequestNamespace:="urn:connections.spectrum.summitsite.com", ResponseNamespace:="urn:connections.spectrum.summitsite.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function submitSIM(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal request As String) As <System.Xml.Serialization.XmlElementAttribute("submitSIMResponse", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
            Dim results() As Object = Me.Invoke("submitSIM", New Object() {request})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub submitSIMAsync(ByVal request As String)
            Me.submitSIMAsync(request, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub submitSIMAsync(ByVal request As String, ByVal userState As Object)
            If (Me.submitSIMOperationCompleted Is Nothing) Then
                Me.submitSIMOperationCompleted = AddressOf Me.OnsubmitSIMOperationCompleted
            End If
            Me.InvokeAsync("submitSIM", New Object() {request}, Me.submitSIMOperationCompleted, userState)
        End Sub
        
        Private Sub OnsubmitSIMOperationCompleted(ByVal arg As Object)
            If (Not (Me.submitSIMCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent submitSIMCompleted(Me, New submitSIMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getTellerIds", RequestNamespace:="urn:connections.spectrum.summitsite.com", ResponseNamespace:="urn:connections.spectrum.summitsite.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getTellerIds() As <System.Xml.Serialization.XmlElementAttribute("getTellerIdsResponse", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> String()
            Dim results() As Object = Me.Invoke("getTellerIds", New Object(-1) {})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getTellerIdsAsync()
            Me.getTellerIdsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getTellerIdsAsync(ByVal userState As Object)
            If (Me.getTellerIdsOperationCompleted Is Nothing) Then
                Me.getTellerIdsOperationCompleted = AddressOf Me.OngetTellerIdsOperationCompleted
            End If
            Me.InvokeAsync("getTellerIds", New Object(-1) {}, Me.getTellerIdsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetTellerIdsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getTellerIdsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getTellerIdsCompleted(Me, New getTellerIdsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:submitSSP1", RequestNamespace:="urn:connections.spectrum.summitsite.com", ResponseNamespace:="urn:connections.spectrum.summitsite.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function submitSSP1(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal serviceContext As serviceContext, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal request As String) As <System.Xml.Serialization.XmlElementAttribute("submitSSP1Response", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> spectrumResponse
            Dim results() As Object = Me.Invoke("submitSSP1", New Object() {serviceContext, request})
            Return CType(results(0),spectrumResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub submitSSP1Async(ByVal serviceContext As serviceContext, ByVal request As String)
            Me.submitSSP1Async(serviceContext, request, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub submitSSP1Async(ByVal serviceContext As serviceContext, ByVal request As String, ByVal userState As Object)
            If (Me.submitSSP1OperationCompleted Is Nothing) Then
                Me.submitSSP1OperationCompleted = AddressOf Me.OnsubmitSSP1OperationCompleted
            End If
            Me.InvokeAsync("submitSSP1", New Object() {serviceContext, request}, Me.submitSSP1OperationCompleted, userState)
        End Sub
        
        Private Sub OnsubmitSSP1OperationCompleted(ByVal arg As Object)
            If (Not (Me.submitSSP1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent submitSSP1Completed(Me, New submitSSP1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:submitSSP2", RequestNamespace:="urn:connections.spectrum.summitsite.com", ResponseNamespace:="urn:connections.spectrum.summitsite.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function submitSSP2(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal request As String) As <System.Xml.Serialization.XmlElementAttribute("submitSSP2Response", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
            Dim results() As Object = Me.Invoke("submitSSP2", New Object() {request})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub submitSSP2Async(ByVal request As String)
            Me.submitSSP2Async(request, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub submitSSP2Async(ByVal request As String, ByVal userState As Object)
            If (Me.submitSSP2OperationCompleted Is Nothing) Then
                Me.submitSSP2OperationCompleted = AddressOf Me.OnsubmitSSP2OperationCompleted
            End If
            Me.InvokeAsync("submitSSP2", New Object() {request}, Me.submitSSP2OperationCompleted, userState)
        End Sub
        
        Private Sub OnsubmitSSP2OperationCompleted(ByVal arg As Object)
            If (Not (Me.submitSSP2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent submitSSP2Completed(Me, New submitSSP2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:submitXMLCntl", RequestNamespace:="urn:connections.spectrum.summitsite.com", ResponseNamespace:="urn:connections.spectrum.summitsite.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function submitXMLCntl(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal request As String) As <System.Xml.Serialization.XmlElementAttribute("submitXMLCntlResponse", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
            Dim results() As Object = Me.Invoke("submitXMLCntl", New Object() {request})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub submitXMLCntlAsync(ByVal request As String)
            Me.submitXMLCntlAsync(request, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub submitXMLCntlAsync(ByVal request As String, ByVal userState As Object)
            If (Me.submitXMLCntlOperationCompleted Is Nothing) Then
                Me.submitXMLCntlOperationCompleted = AddressOf Me.OnsubmitXMLCntlOperationCompleted
            End If
            Me.InvokeAsync("submitXMLCntl", New Object() {request}, Me.submitXMLCntlOperationCompleted, userState)
        End Sub
        
        Private Sub OnsubmitXMLCntlOperationCompleted(ByVal arg As Object)
            If (Not (Me.submitXMLCntlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent submitXMLCntlCompleted(Me, New submitXMLCntlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="CmdSpectrumImplPortBinding", [Namespace]:="http://cmdspectrum.ws.spectrum.summit.fiserv.com/")>  _
    Partial Public Class CmdSpectrumService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private submitXMLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private submitSTTIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private submitXMLCommandOperationCompleted As System.Threading.SendOrPostCallback
        
        Private submitFiAPIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private submitSIMOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getTellerIdsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private submitSSP1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private submitSSP2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private submitXMLCntlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_com_summitsite_icenter_CmdSpectrumService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event submitXMLCompleted As submitXMLCompletedEventHandler
        
        '''<remarks/>
        Public Event submitSTTICompleted As submitSTTICompletedEventHandler
        
        '''<remarks/>
        Public Event submitXMLCommandCompleted As submitXMLCommandCompletedEventHandler
        
        '''<remarks/>
        Public Event submitFiAPICompleted As submitFiAPICompletedEventHandler
        
        '''<remarks/>
        Public Event submitSIMCompleted As submitSIMCompletedEventHandler
        
        '''<remarks/>
        Public Event getTellerIdsCompleted As getTellerIdsCompletedEventHandler
        
        '''<remarks/>
        Public Event submitSSP1Completed As submitSSP1CompletedEventHandler
        
        '''<remarks/>
        Public Event submitSSP2Completed As submitSSP2CompletedEventHandler
        
        '''<remarks/>
        Public Event submitXMLCntlCompleted As submitXMLCntlCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:submitXML", RequestNamespace:="urn:connections.spectrum.summitsite.com", ResponseNamespace:="urn:connections.spectrum.summitsite.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function submitXML(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal request As String) As <System.Xml.Serialization.XmlElementAttribute("submitXMLResponse", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
            Dim results() As Object = Me.Invoke("submitXML", New Object() {request})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginsubmitXML(ByVal request As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("submitXML", New Object() {request}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndsubmitXML(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub submitXMLAsync(ByVal request As String)
            Me.submitXMLAsync(request, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub submitXMLAsync(ByVal request As String, ByVal userState As Object)
            If (Me.submitXMLOperationCompleted Is Nothing) Then
                Me.submitXMLOperationCompleted = AddressOf Me.OnsubmitXMLOperationCompleted
            End If
            Me.InvokeAsync("submitXML", New Object() {request}, Me.submitXMLOperationCompleted, userState)
        End Sub
        
        Private Sub OnsubmitXMLOperationCompleted(ByVal arg As Object)
            If (Not (Me.submitXMLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent submitXMLCompleted(Me, New submitXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:submitSTTI", RequestNamespace:="urn:connections.spectrum.summitsite.com", ResponseNamespace:="urn:connections.spectrum.summitsite.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function submitSTTI(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal trhVerNum As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal moduleNum As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal tranCode As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal tranVerNum As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal tranByteMap As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal requestData As String) As <System.Xml.Serialization.XmlElementAttribute("submitSTTIResponse", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
            Dim results() As Object = Me.Invoke("submitSTTI", New Object() {trhVerNum, moduleNum, tranCode, tranVerNum, tranByteMap, requestData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginsubmitSTTI(ByVal trhVerNum As String, ByVal moduleNum As String, ByVal tranCode As String, ByVal tranVerNum As String, ByVal tranByteMap As String, ByVal requestData As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("submitSTTI", New Object() {trhVerNum, moduleNum, tranCode, tranVerNum, tranByteMap, requestData}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndsubmitSTTI(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub submitSTTIAsync(ByVal trhVerNum As String, ByVal moduleNum As String, ByVal tranCode As String, ByVal tranVerNum As String, ByVal tranByteMap As String, ByVal requestData As String)
            Me.submitSTTIAsync(trhVerNum, moduleNum, tranCode, tranVerNum, tranByteMap, requestData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub submitSTTIAsync(ByVal trhVerNum As String, ByVal moduleNum As String, ByVal tranCode As String, ByVal tranVerNum As String, ByVal tranByteMap As String, ByVal requestData As String, ByVal userState As Object)
            If (Me.submitSTTIOperationCompleted Is Nothing) Then
                Me.submitSTTIOperationCompleted = AddressOf Me.OnsubmitSTTIOperationCompleted
            End If
            Me.InvokeAsync("submitSTTI", New Object() {trhVerNum, moduleNum, tranCode, tranVerNum, tranByteMap, requestData}, Me.submitSTTIOperationCompleted, userState)
        End Sub
        
        Private Sub OnsubmitSTTIOperationCompleted(ByVal arg As Object)
            If (Not (Me.submitSTTICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent submitSTTICompleted(Me, New submitSTTICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("url:submitXMLCommand", RequestNamespace:="urn:connections.spectrum.summitsite.com", ResponseNamespace:="urn:connections.spectrum.summitsite.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function submitXMLCommand(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal xmlRequest As String) As <System.Xml.Serialization.XmlElementAttribute("submitXMLCommandResponse", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
            Dim results() As Object = Me.Invoke("submitXMLCommand", New Object() {xmlRequest})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginsubmitXMLCommand(ByVal xmlRequest As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("submitXMLCommand", New Object() {xmlRequest}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndsubmitXMLCommand(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub submitXMLCommandAsync(ByVal xmlRequest As String)
            Me.submitXMLCommandAsync(xmlRequest, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub submitXMLCommandAsync(ByVal xmlRequest As String, ByVal userState As Object)
            If (Me.submitXMLCommandOperationCompleted Is Nothing) Then
                Me.submitXMLCommandOperationCompleted = AddressOf Me.OnsubmitXMLCommandOperationCompleted
            End If
            Me.InvokeAsync("submitXMLCommand", New Object() {xmlRequest}, Me.submitXMLCommandOperationCompleted, userState)
        End Sub
        
        Private Sub OnsubmitXMLCommandOperationCompleted(ByVal arg As Object)
            If (Not (Me.submitXMLCommandCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent submitXMLCommandCompleted(Me, New submitXMLCommandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:submitFiAPI", RequestNamespace:="urn:connections.spectrum.summitsite.com", ResponseNamespace:="urn:connections.spectrum.summitsite.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function submitFiAPI(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal request As String) As <System.Xml.Serialization.XmlElementAttribute("submitFiAPIResponse", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
            Dim results() As Object = Me.Invoke("submitFiAPI", New Object() {request})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginsubmitFiAPI(ByVal request As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("submitFiAPI", New Object() {request}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndsubmitFiAPI(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub submitFiAPIAsync(ByVal request As String)
            Me.submitFiAPIAsync(request, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub submitFiAPIAsync(ByVal request As String, ByVal userState As Object)
            If (Me.submitFiAPIOperationCompleted Is Nothing) Then
                Me.submitFiAPIOperationCompleted = AddressOf Me.OnsubmitFiAPIOperationCompleted
            End If
            Me.InvokeAsync("submitFiAPI", New Object() {request}, Me.submitFiAPIOperationCompleted, userState)
        End Sub
        
        Private Sub OnsubmitFiAPIOperationCompleted(ByVal arg As Object)
            If (Not (Me.submitFiAPICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent submitFiAPICompleted(Me, New submitFiAPICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:submitSIM", RequestNamespace:="urn:connections.spectrum.summitsite.com", ResponseNamespace:="urn:connections.spectrum.summitsite.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function submitSIM(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal request As String) As <System.Xml.Serialization.XmlElementAttribute("submitSIMResponse", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
            Dim results() As Object = Me.Invoke("submitSIM", New Object() {request})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginsubmitSIM(ByVal request As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("submitSIM", New Object() {request}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndsubmitSIM(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub submitSIMAsync(ByVal request As String)
            Me.submitSIMAsync(request, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub submitSIMAsync(ByVal request As String, ByVal userState As Object)
            If (Me.submitSIMOperationCompleted Is Nothing) Then
                Me.submitSIMOperationCompleted = AddressOf Me.OnsubmitSIMOperationCompleted
            End If
            Me.InvokeAsync("submitSIM", New Object() {request}, Me.submitSIMOperationCompleted, userState)
        End Sub
        
        Private Sub OnsubmitSIMOperationCompleted(ByVal arg As Object)
            If (Not (Me.submitSIMCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent submitSIMCompleted(Me, New submitSIMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:getTellerIds", RequestNamespace:="urn:connections.spectrum.summitsite.com", ResponseNamespace:="urn:connections.spectrum.summitsite.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getTellerIds() As <System.Xml.Serialization.XmlElementAttribute("getTellerIdsResponse", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> String()
            Dim results() As Object = Me.Invoke("getTellerIds", New Object(-1) {})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Function BegingetTellerIds(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getTellerIds", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetTellerIds(ByVal asyncResult As System.IAsyncResult) As String()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getTellerIdsAsync()
            Me.getTellerIdsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getTellerIdsAsync(ByVal userState As Object)
            If (Me.getTellerIdsOperationCompleted Is Nothing) Then
                Me.getTellerIdsOperationCompleted = AddressOf Me.OngetTellerIdsOperationCompleted
            End If
            Me.InvokeAsync("getTellerIds", New Object(-1) {}, Me.getTellerIdsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetTellerIdsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getTellerIdsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getTellerIdsCompleted(Me, New getTellerIdsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:submitSSP1", RequestNamespace:="urn:connections.spectrum.summitsite.com", ResponseNamespace:="urn:connections.spectrum.summitsite.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function submitSSP1(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal serviceContext As serviceContext, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal request As String) As <System.Xml.Serialization.XmlElementAttribute("submitSSP1Response", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> spectrumResponse
            Dim results() As Object = Me.Invoke("submitSSP1", New Object() {serviceContext, request})
            Return CType(results(0),spectrumResponse)
        End Function
        
        '''<remarks/>
        Public Function BeginsubmitSSP1(ByVal serviceContext As serviceContext, ByVal request As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("submitSSP1", New Object() {serviceContext, request}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndsubmitSSP1(ByVal asyncResult As System.IAsyncResult) As spectrumResponse
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),spectrumResponse)
        End Function
        
        '''<remarks/>
        Public Overloads Sub submitSSP1Async(ByVal serviceContext As serviceContext, ByVal request As String)
            Me.submitSSP1Async(serviceContext, request, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub submitSSP1Async(ByVal serviceContext As serviceContext, ByVal request As String, ByVal userState As Object)
            If (Me.submitSSP1OperationCompleted Is Nothing) Then
                Me.submitSSP1OperationCompleted = AddressOf Me.OnsubmitSSP1OperationCompleted
            End If
            Me.InvokeAsync("submitSSP1", New Object() {serviceContext, request}, Me.submitSSP1OperationCompleted, userState)
        End Sub
        
        Private Sub OnsubmitSSP1OperationCompleted(ByVal arg As Object)
            If (Not (Me.submitSSP1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent submitSSP1Completed(Me, New submitSSP1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:submitSSP2", RequestNamespace:="urn:connections.spectrum.summitsite.com", ResponseNamespace:="urn:connections.spectrum.summitsite.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function submitSSP2(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal request As String) As <System.Xml.Serialization.XmlElementAttribute("submitSSP2Response", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
            Dim results() As Object = Me.Invoke("submitSSP2", New Object() {request})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginsubmitSSP2(ByVal request As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("submitSSP2", New Object() {request}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndsubmitSSP2(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub submitSSP2Async(ByVal request As String)
            Me.submitSSP2Async(request, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub submitSSP2Async(ByVal request As String, ByVal userState As Object)
            If (Me.submitSSP2OperationCompleted Is Nothing) Then
                Me.submitSSP2OperationCompleted = AddressOf Me.OnsubmitSSP2OperationCompleted
            End If
            Me.InvokeAsync("submitSSP2", New Object() {request}, Me.submitSSP2OperationCompleted, userState)
        End Sub
        
        Private Sub OnsubmitSSP2OperationCompleted(ByVal arg As Object)
            If (Not (Me.submitSSP2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent submitSSP2Completed(Me, New submitSSP2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:submitXMLCntl", RequestNamespace:="urn:connections.spectrum.summitsite.com", ResponseNamespace:="urn:connections.spectrum.summitsite.com", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function submitXMLCntl(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal request As String) As <System.Xml.Serialization.XmlElementAttribute("submitXMLCntlResponse", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
            Dim results() As Object = Me.Invoke("submitXMLCntl", New Object() {request})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginsubmitXMLCntl(ByVal request As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("submitXMLCntl", New Object() {request}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndsubmitXMLCntl(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub submitXMLCntlAsync(ByVal request As String)
            Me.submitXMLCntlAsync(request, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub submitXMLCntlAsync(ByVal request As String, ByVal userState As Object)
            If (Me.submitXMLCntlOperationCompleted Is Nothing) Then
                Me.submitXMLCntlOperationCompleted = AddressOf Me.OnsubmitXMLCntlOperationCompleted
            End If
            Me.InvokeAsync("submitXMLCntl", New Object() {request}, Me.submitXMLCntlOperationCompleted, userState)
        End Sub
        
        Private Sub OnsubmitXMLCntlOperationCompleted(ByVal arg As Object)
            If (Not (Me.submitXMLCntlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent submitXMLCntlCompleted(Me, New submitXMLCntlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="urn:connections.spectrum.summitsite.com")>  _
    Partial Public Class serviceContext
        
        Private stationIdField As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
        Public Property stationId() As String
            Get
                Return Me.stationIdField
            End Get
            Set
                Me.stationIdField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3082"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="urn:connections.spectrum.summitsite.com")>  _
    Partial Public Class spectrumResponse
        
        Private continuableErrorField As Boolean
        
        Private dateField As String
        
        Private missingMessagesField() As String
        
        Private moreOutputField As Boolean
        
        Private overridableErrorField As Boolean
        
        Private overrideAuthorizedField As Boolean
        
        Private prefixWord8Field As Integer
        
        Private previousOutputField As Boolean
        
        Private responseField As String
        
        Private sequenceNumField As String
        
        Private ticklersField() As String
        
        Private timeField As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
        Public Property continuableError() As Boolean
            Get
                Return Me.continuableErrorField
            End Get
            Set
                Me.continuableErrorField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
        Public Property [date]() As String
            Get
                Return Me.dateField
            End Get
            Set
                Me.dateField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute("missingMessages", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
        Public Property missingMessages() As String()
            Get
                Return Me.missingMessagesField
            End Get
            Set
                Me.missingMessagesField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
        Public Property moreOutput() As Boolean
            Get
                Return Me.moreOutputField
            End Get
            Set
                Me.moreOutputField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
        Public Property overridableError() As Boolean
            Get
                Return Me.overridableErrorField
            End Get
            Set
                Me.overridableErrorField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
        Public Property overrideAuthorized() As Boolean
            Get
                Return Me.overrideAuthorizedField
            End Get
            Set
                Me.overrideAuthorizedField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
        Public Property prefixWord8() As Integer
            Get
                Return Me.prefixWord8Field
            End Get
            Set
                Me.prefixWord8Field = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
        Public Property previousOutput() As Boolean
            Get
                Return Me.previousOutputField
            End Get
            Set
                Me.previousOutputField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
        Public Property response() As String
            Get
                Return Me.responseField
            End Get
            Set
                Me.responseField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
        Public Property sequenceNum() As String
            Get
                Return Me.sequenceNumField
            End Get
            Set
                Me.sequenceNumField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute("ticklers", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)>  _
        Public Property ticklers() As String()
            Get
                Return Me.ticklersField
            End Get
            Set
                Me.ticklersField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)>  _
        Public Property time() As String
            Get
                Return Me.timeField
            End Get
            Set
                Me.timeField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub submitXMLCompletedEventHandler(ByVal sender As Object, ByVal e As submitXMLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class submitXMLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub submitSTTICompletedEventHandler(ByVal sender As Object, ByVal e As submitSTTICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class submitSTTICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub submitXMLCommandCompletedEventHandler(ByVal sender As Object, ByVal e As submitXMLCommandCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class submitXMLCommandCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub submitFiAPICompletedEventHandler(ByVal sender As Object, ByVal e As submitFiAPICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class submitFiAPICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub submitSIMCompletedEventHandler(ByVal sender As Object, ByVal e As submitSIMCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class submitSIMCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub getTellerIdsCompletedEventHandler(ByVal sender As Object, ByVal e As getTellerIdsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getTellerIdsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub submitSSP1CompletedEventHandler(ByVal sender As Object, ByVal e As submitSSP1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class submitSSP1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As spectrumResponse
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),spectrumResponse)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub submitSSP2CompletedEventHandler(ByVal sender As Object, ByVal e As submitSSP2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class submitSSP2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub submitXMLCntlCompletedEventHandler(ByVal sender As Object, ByVal e As submitXMLCntlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class submitXMLCntlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
