'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.832
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.832.
'
Namespace IWSQuoteService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="IQQSoap", [Namespace]:="https://localhost/nserv/IQQ.asmx")>  _
    Partial Public Class IQQWse
        Inherits Microsoft.Web.Services3.WebServicesClientProtocol
        
        Private VersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IwsAEsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IwsCCRepsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AgenciesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Agencies2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private BundleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AgencyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AgentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TaxOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ModelsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Models2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private QuoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Quote2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private Quote3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private AmortizeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ContractOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Contract2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private Contract3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoansOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ContractsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Contracts2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private Contracts3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteContractOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ContractStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ClearCallsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CommonReasonsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CommonReasonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MarketingBlurbsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MarketingBlurbOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AssignLeadsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NotesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ClickThruOperationCompleted As System.Threading.SendOrPostCallback
        
        Private VerifyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReassignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BatchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BatchesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ForgotOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_IWSQuoteService_IQQ
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event VersionCompleted As VersionCompletedEventHandler
        
        '''<remarks/>
        Public Event IwsAEsCompleted As IwsAEsCompletedEventHandler
        
        '''<remarks/>
        Public Event IwsCCRepsCompleted As IwsCCRepsCompletedEventHandler
        
        '''<remarks/>
        Public Event AgenciesCompleted As AgenciesCompletedEventHandler
        
        '''<remarks/>
        Public Event Agencies2Completed As Agencies2CompletedEventHandler
        
        '''<remarks/>
        Public Event BundleCompleted As BundleCompletedEventHandler
        
        '''<remarks/>
        Public Event AgencyCompleted As AgencyCompletedEventHandler
        
        '''<remarks/>
        Public Event AgentCompleted As AgentCompletedEventHandler
        
        '''<remarks/>
        Public Event TaxCompleted As TaxCompletedEventHandler
        
        '''<remarks/>
        Public Event ModelsCompleted As ModelsCompletedEventHandler
        
        '''<remarks/>
        Public Event Models2Completed As Models2CompletedEventHandler
        
        '''<remarks/>
        Public Event QuoteCompleted As QuoteCompletedEventHandler
        
        '''<remarks/>
        Public Event Quote2Completed As Quote2CompletedEventHandler
        
        '''<remarks/>
        Public Event Quote3Completed As Quote3CompletedEventHandler
        
        '''<remarks/>
        Public Event AmortizeCompleted As AmortizeCompletedEventHandler
        
        '''<remarks/>
        Public Event ContractCompleted As ContractCompletedEventHandler
        
        '''<remarks/>
        Public Event Contract2Completed As Contract2CompletedEventHandler
        
        '''<remarks/>
        Public Event Contract3Completed As Contract3CompletedEventHandler
        
        '''<remarks/>
        Public Event LoansCompleted As LoansCompletedEventHandler
        
        '''<remarks/>
        Public Event ContractsCompleted As ContractsCompletedEventHandler
        
        '''<remarks/>
        Public Event Contracts2Completed As Contracts2CompletedEventHandler
        
        '''<remarks/>
        Public Event Contracts3Completed As Contracts3CompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteContractCompleted As DeleteContractCompletedEventHandler
        
        '''<remarks/>
        Public Event ContractStatusCompleted As ContractStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event ClearCallsCompleted As ClearCallsCompletedEventHandler
        
        '''<remarks/>
        Public Event CommonReasonsCompleted As CommonReasonsCompletedEventHandler
        
        '''<remarks/>
        Public Event CommonReasonCompleted As CommonReasonCompletedEventHandler
        
        '''<remarks/>
        Public Event MarketingBlurbsCompleted As MarketingBlurbsCompletedEventHandler
        
        '''<remarks/>
        Public Event MarketingBlurbCompleted As MarketingBlurbCompletedEventHandler
        
        '''<remarks/>
        Public Event AssignLeadsCompleted As AssignLeadsCompletedEventHandler
        
        '''<remarks/>
        Public Event NoteCompleted As NoteCompletedEventHandler
        
        '''<remarks/>
        Public Event NotesCompleted As NotesCompletedEventHandler
        
        '''<remarks/>
        Public Event ClickThruCompleted As ClickThruCompletedEventHandler
        
        '''<remarks/>
        Public Event VerifyCompleted As VerifyCompletedEventHandler
        
        '''<remarks/>
        Public Event ReassignCompleted As ReassignCompletedEventHandler
        
        '''<remarks/>
        Public Event BatchCompleted As BatchCompletedEventHandler
        
        '''<remarks/>
        Public Event BatchesCompleted As BatchesCompletedEventHandler
        
        '''<remarks/>
        Public Event ForgotCompleted As ForgotCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Version", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Version() As String
            Dim results() As Object = Me.Invoke("Version", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub VersionAsync()
            Me.VersionAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub VersionAsync(ByVal userState As Object)
            If (Me.VersionOperationCompleted Is Nothing) Then
                Me.VersionOperationCompleted = AddressOf Me.OnVersionOperationCompleted
            End If
            Me.InvokeAsync("Version", New Object(-1) {}, Me.VersionOperationCompleted, userState)
        End Sub
        
        Private Sub OnVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.VersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent VersionCompleted(Me, New VersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/IwsAEs", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IwsAEs(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("IwsAEs", New Object() {login, password, agencyCodingType, agencyCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IwsAEsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String)
            Me.IwsAEsAsync(login, password, agencyCodingType, agencyCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IwsAEsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal userState As Object)
            If (Me.IwsAEsOperationCompleted Is Nothing) Then
                Me.IwsAEsOperationCompleted = AddressOf Me.OnIwsAEsOperationCompleted
            End If
            Me.InvokeAsync("IwsAEs", New Object() {login, password, agencyCodingType, agencyCode}, Me.IwsAEsOperationCompleted, userState)
        End Sub
        
        Private Sub OnIwsAEsOperationCompleted(ByVal arg As Object)
            If (Not (Me.IwsAEsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IwsAEsCompleted(Me, New IwsAEsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/IwsCCReps", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IwsCCReps(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("IwsCCReps", New Object() {login, password, agencyCodingType, agencyCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IwsCCRepsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String)
            Me.IwsCCRepsAsync(login, password, agencyCodingType, agencyCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IwsCCRepsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal userState As Object)
            If (Me.IwsCCRepsOperationCompleted Is Nothing) Then
                Me.IwsCCRepsOperationCompleted = AddressOf Me.OnIwsCCRepsOperationCompleted
            End If
            Me.InvokeAsync("IwsCCReps", New Object() {login, password, agencyCodingType, agencyCode}, Me.IwsCCRepsOperationCompleted, userState)
        End Sub
        
        Private Sub OnIwsCCRepsOperationCompleted(ByVal arg As Object)
            If (Not (Me.IwsCCRepsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IwsCCRepsCompleted(Me, New IwsCCRepsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Agencies", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Agencies(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Agencies", New Object() {login, password, agencyCodingType, agencyCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AgenciesAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String)
            Me.AgenciesAsync(login, password, agencyCodingType, agencyCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AgenciesAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal userState As Object)
            If (Me.AgenciesOperationCompleted Is Nothing) Then
                Me.AgenciesOperationCompleted = AddressOf Me.OnAgenciesOperationCompleted
            End If
            Me.InvokeAsync("Agencies", New Object() {login, password, agencyCodingType, agencyCode}, Me.AgenciesOperationCompleted, userState)
        End Sub
        
        Private Sub OnAgenciesOperationCompleted(ByVal arg As Object)
            If (Not (Me.AgenciesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AgenciesCompleted(Me, New AgenciesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Agencies2", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Agencies2(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal keyWord As String, ByVal includeAgents As String, ByVal includeSubAgencies As String, ByVal includeSharingSiblings As String, ByVal agentCode As String, ByVal agentCode2 As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Agencies2", New Object() {login, password, agencyCodingType, agencyCode, keyWord, includeAgents, includeSubAgencies, includeSharingSiblings, agentCode, agentCode2})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Agencies2Async(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal keyWord As String, ByVal includeAgents As String, ByVal includeSubAgencies As String, ByVal includeSharingSiblings As String, ByVal agentCode As String, ByVal agentCode2 As String)
            Me.Agencies2Async(login, password, agencyCodingType, agencyCode, keyWord, includeAgents, includeSubAgencies, includeSharingSiblings, agentCode, agentCode2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Agencies2Async(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal keyWord As String, ByVal includeAgents As String, ByVal includeSubAgencies As String, ByVal includeSharingSiblings As String, ByVal agentCode As String, ByVal agentCode2 As String, ByVal userState As Object)
            If (Me.Agencies2OperationCompleted Is Nothing) Then
                Me.Agencies2OperationCompleted = AddressOf Me.OnAgencies2OperationCompleted
            End If
            Me.InvokeAsync("Agencies2", New Object() {login, password, agencyCodingType, agencyCode, keyWord, includeAgents, includeSubAgencies, includeSharingSiblings, agentCode, agentCode2}, Me.Agencies2OperationCompleted, userState)
        End Sub
        
        Private Sub OnAgencies2OperationCompleted(ByVal arg As Object)
            If (Not (Me.Agencies2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Agencies2Completed(Me, New Agencies2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Bundle", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Bundle(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal bundleId As String, ByVal title As String, ByVal descriptionHtml As String, ByVal vsa As String, ByVal products As String, ByVal deleted As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Bundle", New Object() {login, password, agencyCodingType, agencyCode, bundleId, title, descriptionHtml, vsa, products, deleted})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BundleAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal bundleId As String, ByVal title As String, ByVal descriptionHtml As String, ByVal vsa As String, ByVal products As String, ByVal deleted As String)
            Me.BundleAsync(login, password, agencyCodingType, agencyCode, bundleId, title, descriptionHtml, vsa, products, deleted, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BundleAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal bundleId As String, ByVal title As String, ByVal descriptionHtml As String, ByVal vsa As String, ByVal products As String, ByVal deleted As String, ByVal userState As Object)
            If (Me.BundleOperationCompleted Is Nothing) Then
                Me.BundleOperationCompleted = AddressOf Me.OnBundleOperationCompleted
            End If
            Me.InvokeAsync("Bundle", New Object() {login, password, agencyCodingType, agencyCode, bundleId, title, descriptionHtml, vsa, products, deleted}, Me.BundleOperationCompleted, userState)
        End Sub
        
        Private Sub OnBundleOperationCompleted(ByVal arg As Object)
            If (Not (Me.BundleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BundleCompleted(Me, New BundleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Agency", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Agency(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal taxRate As String, ByVal passphrase As String, ByVal agencyName As String, ByVal agencyCode2 As String, ByVal requireMemberCode As String, ByVal mainContactAgentId As String, ByVal AeId As String, ByVal MeId As String, ByVal MeId2 As String, ByVal CcId As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Agency", New Object() {login, password, agencyCodingType, agencyCode, taxRate, passphrase, agencyName, agencyCode2, requireMemberCode, mainContactAgentId, AeId, MeId, MeId2, CcId})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AgencyAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal taxRate As String, ByVal passphrase As String, ByVal agencyName As String, ByVal agencyCode2 As String, ByVal requireMemberCode As String, ByVal mainContactAgentId As String, ByVal AeId As String, ByVal MeId As String, ByVal MeId2 As String, ByVal CcId As String)
            Me.AgencyAsync(login, password, agencyCodingType, agencyCode, taxRate, passphrase, agencyName, agencyCode2, requireMemberCode, mainContactAgentId, AeId, MeId, MeId2, CcId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AgencyAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal taxRate As String, ByVal passphrase As String, ByVal agencyName As String, ByVal agencyCode2 As String, ByVal requireMemberCode As String, ByVal mainContactAgentId As String, ByVal AeId As String, ByVal MeId As String, ByVal MeId2 As String, ByVal CcId As String, ByVal userState As Object)
            If (Me.AgencyOperationCompleted Is Nothing) Then
                Me.AgencyOperationCompleted = AddressOf Me.OnAgencyOperationCompleted
            End If
            Me.InvokeAsync("Agency", New Object() {login, password, agencyCodingType, agencyCode, taxRate, passphrase, agencyName, agencyCode2, requireMemberCode, mainContactAgentId, AeId, MeId, MeId2, CcId}, Me.AgencyOperationCompleted, userState)
        End Sub
        
        Private Sub OnAgencyOperationCompleted(ByVal arg As Object)
            If (Not (Me.AgencyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AgencyCompleted(Me, New AgencyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Agent", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Agent( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal agentId As String,  _
                    ByVal parentAgencyId As String,  _
                    ByVal type As String,  _
                    ByVal code As String,  _
                    ByVal code2 As String,  _
                    ByVal foragencyid As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal loginName As String,  _
                    ByVal newPassword As String,  _
                    ByVal deleted As String,  _
                    ByVal balloons As String,  _
                    ByVal attributes As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Agent", New Object() {login, password, agencyCodingType, agencyCode, agentId, parentAgencyId, type, code, code2, foragencyid, firstName, middleName, lastName, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, loginName, newPassword, deleted, balloons, attributes})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AgentAsync( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal agentId As String,  _
                    ByVal parentAgencyId As String,  _
                    ByVal type As String,  _
                    ByVal code As String,  _
                    ByVal code2 As String,  _
                    ByVal foragencyid As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal loginName As String,  _
                    ByVal newPassword As String,  _
                    ByVal deleted As String,  _
                    ByVal balloons As String,  _
                    ByVal attributes As String)
            Me.AgentAsync(login, password, agencyCodingType, agencyCode, agentId, parentAgencyId, type, code, code2, foragencyid, firstName, middleName, lastName, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, loginName, newPassword, deleted, balloons, attributes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AgentAsync( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal agentId As String,  _
                    ByVal parentAgencyId As String,  _
                    ByVal type As String,  _
                    ByVal code As String,  _
                    ByVal code2 As String,  _
                    ByVal foragencyid As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal loginName As String,  _
                    ByVal newPassword As String,  _
                    ByVal deleted As String,  _
                    ByVal balloons As String,  _
                    ByVal attributes As String,  _
                    ByVal userState As Object)
            If (Me.AgentOperationCompleted Is Nothing) Then
                Me.AgentOperationCompleted = AddressOf Me.OnAgentOperationCompleted
            End If
            Me.InvokeAsync("Agent", New Object() {login, password, agencyCodingType, agencyCode, agentId, parentAgencyId, type, code, code2, foragencyid, firstName, middleName, lastName, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, loginName, newPassword, deleted, balloons, attributes}, Me.AgentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAgentOperationCompleted(ByVal arg As Object)
            If (Not (Me.AgentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AgentCompleted(Me, New AgentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Tax", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Tax(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal taxZipCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Tax", New Object() {login, password, agencyCodingType, agencyCode, taxZipCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TaxAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal taxZipCode As String)
            Me.TaxAsync(login, password, agencyCodingType, agencyCode, taxZipCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TaxAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal taxZipCode As String, ByVal userState As Object)
            If (Me.TaxOperationCompleted Is Nothing) Then
                Me.TaxOperationCompleted = AddressOf Me.OnTaxOperationCompleted
            End If
            Me.InvokeAsync("Tax", New Object() {login, password, agencyCodingType, agencyCode, taxZipCode}, Me.TaxOperationCompleted, userState)
        End Sub
        
        Private Sub OnTaxOperationCompleted(ByVal arg As Object)
            If (Not (Me.TaxCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TaxCompleted(Me, New TaxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Models", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Models(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal vehicleCodingType As String, ByVal vehicleCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Models", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ModelsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal vehicleCodingType As String, ByVal vehicleCode As String)
            Me.ModelsAsync(login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ModelsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal vehicleCodingType As String, ByVal vehicleCode As String, ByVal userState As Object)
            If (Me.ModelsOperationCompleted Is Nothing) Then
                Me.ModelsOperationCompleted = AddressOf Me.OnModelsOperationCompleted
            End If
            Me.InvokeAsync("Models", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode}, Me.ModelsOperationCompleted, userState)
        End Sub
        
        Private Sub OnModelsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ModelsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ModelsCompleted(Me, New ModelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Models2", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Models2(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal vehicleCodingType As String, ByVal vehicleCode As String, ByVal showIneligible As String, ByVal stateCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Models2", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, showIneligible, stateCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Models2Async(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal vehicleCodingType As String, ByVal vehicleCode As String, ByVal showIneligible As String, ByVal stateCode As String)
            Me.Models2Async(login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, showIneligible, stateCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Models2Async(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal vehicleCodingType As String, ByVal vehicleCode As String, ByVal showIneligible As String, ByVal stateCode As String, ByVal userState As Object)
            If (Me.Models2OperationCompleted Is Nothing) Then
                Me.Models2OperationCompleted = AddressOf Me.OnModels2OperationCompleted
            End If
            Me.InvokeAsync("Models2", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, showIneligible, stateCode}, Me.Models2OperationCompleted, userState)
        End Sub
        
        Private Sub OnModels2OperationCompleted(ByVal arg As Object)
            If (Not (Me.Models2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Models2Completed(Me, New Models2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Quote", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Quote( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal zipCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Quote", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, replacementDate, replacementMiles, transmission, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, zipCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub QuoteAsync( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal zipCode As String)
            Me.QuoteAsync(login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, replacementDate, replacementMiles, transmission, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, zipCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub QuoteAsync( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal zipCode As String,  _
                    ByVal userState As Object)
            If (Me.QuoteOperationCompleted Is Nothing) Then
                Me.QuoteOperationCompleted = AddressOf Me.OnQuoteOperationCompleted
            End If
            Me.InvokeAsync("Quote", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, replacementDate, replacementMiles, transmission, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, zipCode}, Me.QuoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnQuoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.QuoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent QuoteCompleted(Me, New QuoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Quote2", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Quote2( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal zipCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Quote2", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, zipCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Quote2Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal zipCode As String)
            Me.Quote2Async(login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, zipCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Quote2Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal zipCode As String,  _
                    ByVal userState As Object)
            If (Me.Quote2OperationCompleted Is Nothing) Then
                Me.Quote2OperationCompleted = AddressOf Me.OnQuote2OperationCompleted
            End If
            Me.InvokeAsync("Quote2", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, zipCode}, Me.Quote2OperationCompleted, userState)
        End Sub
        
        Private Sub OnQuote2OperationCompleted(ByVal arg As Object)
            If (Not (Me.Quote2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Quote2Completed(Me, New Quote2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Quote3", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Quote3( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal allowWrap As String,  _
                    ByVal allowPT As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal zipCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Quote3", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, allowWrap, allowPT, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, zipCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Quote3Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal allowWrap As String,  _
                    ByVal allowPT As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal zipCode As String)
            Me.Quote3Async(login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, allowWrap, allowPT, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, zipCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Quote3Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal allowWrap As String,  _
                    ByVal allowPT As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal zipCode As String,  _
                    ByVal userState As Object)
            If (Me.Quote3OperationCompleted Is Nothing) Then
                Me.Quote3OperationCompleted = AddressOf Me.OnQuote3OperationCompleted
            End If
            Me.InvokeAsync("Quote3", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, allowWrap, allowPT, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, zipCode}, Me.Quote3OperationCompleted, userState)
        End Sub
        
        Private Sub OnQuote3OperationCompleted(ByVal arg As Object)
            If (Not (Me.Quote3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Quote3Completed(Me, New Quote3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Amortize", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Amortize(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal xml As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Amortize", New Object() {login, password, agencyCodingType, agencyCode, xml})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AmortizeAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal xml As String)
            Me.AmortizeAsync(login, password, agencyCodingType, agencyCode, xml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AmortizeAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal xml As String, ByVal userState As Object)
            If (Me.AmortizeOperationCompleted Is Nothing) Then
                Me.AmortizeOperationCompleted = AddressOf Me.OnAmortizeOperationCompleted
            End If
            Me.InvokeAsync("Amortize", New Object() {login, password, agencyCodingType, agencyCode, xml}, Me.AmortizeOperationCompleted, userState)
        End Sub
        
        Private Sub OnAmortizeOperationCompleted(ByVal arg As Object)
            If (Not (Me.AmortizeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AmortizeCompleted(Me, New AmortizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Contract", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Contract( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal fixPayment As String,  _
                    ByVal fixForPlans As String,  _
                    ByVal contractNumber As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal ssn2 As String,  _
                    ByVal firstName2 As String,  _
                    ByVal middleName2 As String,  _
                    ByVal lastName2 As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal vin As String,  _
                    ByVal status As String,  _
                    ByVal plans As String,  _
                    ByVal totalCost As String,  _
                    ByVal totalTax As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Contract", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, replacementDate, replacementMiles, transmission, usage, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, fixPayment, fixForPlans, contractNumber, memberCode, ssn, firstName, middleName, lastName, ssn2, firstName2, middleName2, lastName2, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, vin, status, plans, totalCost, totalTax})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ContractAsync( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal fixPayment As String,  _
                    ByVal fixForPlans As String,  _
                    ByVal contractNumber As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal ssn2 As String,  _
                    ByVal firstName2 As String,  _
                    ByVal middleName2 As String,  _
                    ByVal lastName2 As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal vin As String,  _
                    ByVal status As String,  _
                    ByVal plans As String,  _
                    ByVal totalCost As String,  _
                    ByVal totalTax As String)
            Me.ContractAsync(login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, replacementDate, replacementMiles, transmission, usage, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, fixPayment, fixForPlans, contractNumber, memberCode, ssn, firstName, middleName, lastName, ssn2, firstName2, middleName2, lastName2, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, vin, status, plans, totalCost, totalTax, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ContractAsync( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal fixPayment As String,  _
                    ByVal fixForPlans As String,  _
                    ByVal contractNumber As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal ssn2 As String,  _
                    ByVal firstName2 As String,  _
                    ByVal middleName2 As String,  _
                    ByVal lastName2 As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal vin As String,  _
                    ByVal status As String,  _
                    ByVal plans As String,  _
                    ByVal totalCost As String,  _
                    ByVal totalTax As String,  _
                    ByVal userState As Object)
            If (Me.ContractOperationCompleted Is Nothing) Then
                Me.ContractOperationCompleted = AddressOf Me.OnContractOperationCompleted
            End If
            Me.InvokeAsync("Contract", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, replacementDate, replacementMiles, transmission, usage, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, fixPayment, fixForPlans, contractNumber, memberCode, ssn, firstName, middleName, lastName, ssn2, firstName2, middleName2, lastName2, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, vin, status, plans, totalCost, totalTax}, Me.ContractOperationCompleted, userState)
        End Sub
        
        Private Sub OnContractOperationCompleted(ByVal arg As Object)
            If (Not (Me.ContractCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ContractCompleted(Me, New ContractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Contract2", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Contract2( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal fixPayment As String,  _
                    ByVal fixForPlans As String,  _
                    ByVal balloonType As String,  _
                    ByVal balloonAmount As String,  _
                    ByVal pDaysOut As String,  _
                    ByVal contractNumber As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal birthdate As String,  _
                    ByVal ssn2 As String,  _
                    ByVal firstName2 As String,  _
                    ByVal middleName2 As String,  _
                    ByVal lastName2 As String,  _
                    ByVal birthdate2 As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal vin As String,  _
                    ByVal status As String,  _
                    ByVal plans As String,  _
                    ByVal totalCost As String,  _
                    ByVal totalTax As String,  _
                    ByVal source As String,  _
                    ByVal directConnect As String,  _
                    ByVal refNum As String,  _
                    ByVal leadArrival As String,  _
                    ByVal firstReply As String,  _
                    ByVal callBack As String,  _
                    ByVal commonReason As String,  _
                    ByVal vehicleValue As String,  _
                    ByVal callBackAgentId As String,  _
                    ByVal paymentPlan As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Contract2", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, fixPayment, fixForPlans, balloonType, balloonAmount, pDaysOut, contractNumber, memberCode, ssn, firstName, middleName, lastName, birthdate, ssn2, firstName2, middleName2, lastName2, birthdate2, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, vin, status, plans, totalCost, totalTax, source, directConnect, refNum, leadArrival, firstReply, callBack, commonReason, vehicleValue, callBackAgentId, paymentPlan})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Contract2Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal fixPayment As String,  _
                    ByVal fixForPlans As String,  _
                    ByVal balloonType As String,  _
                    ByVal balloonAmount As String,  _
                    ByVal pDaysOut As String,  _
                    ByVal contractNumber As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal birthdate As String,  _
                    ByVal ssn2 As String,  _
                    ByVal firstName2 As String,  _
                    ByVal middleName2 As String,  _
                    ByVal lastName2 As String,  _
                    ByVal birthdate2 As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal vin As String,  _
                    ByVal status As String,  _
                    ByVal plans As String,  _
                    ByVal totalCost As String,  _
                    ByVal totalTax As String,  _
                    ByVal source As String,  _
                    ByVal directConnect As String,  _
                    ByVal refNum As String,  _
                    ByVal leadArrival As String,  _
                    ByVal firstReply As String,  _
                    ByVal callBack As String,  _
                    ByVal commonReason As String,  _
                    ByVal vehicleValue As String,  _
                    ByVal callBackAgentId As String,  _
                    ByVal paymentPlan As String)
            Me.Contract2Async(login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, fixPayment, fixForPlans, balloonType, balloonAmount, pDaysOut, contractNumber, memberCode, ssn, firstName, middleName, lastName, birthdate, ssn2, firstName2, middleName2, lastName2, birthdate2, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, vin, status, plans, totalCost, totalTax, source, directConnect, refNum, leadArrival, firstReply, callBack, commonReason, vehicleValue, callBackAgentId, paymentPlan, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Contract2Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal fixPayment As String,  _
                    ByVal fixForPlans As String,  _
                    ByVal balloonType As String,  _
                    ByVal balloonAmount As String,  _
                    ByVal pDaysOut As String,  _
                    ByVal contractNumber As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal birthdate As String,  _
                    ByVal ssn2 As String,  _
                    ByVal firstName2 As String,  _
                    ByVal middleName2 As String,  _
                    ByVal lastName2 As String,  _
                    ByVal birthdate2 As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal vin As String,  _
                    ByVal status As String,  _
                    ByVal plans As String,  _
                    ByVal totalCost As String,  _
                    ByVal totalTax As String,  _
                    ByVal source As String,  _
                    ByVal directConnect As String,  _
                    ByVal refNum As String,  _
                    ByVal leadArrival As String,  _
                    ByVal firstReply As String,  _
                    ByVal callBack As String,  _
                    ByVal commonReason As String,  _
                    ByVal vehicleValue As String,  _
                    ByVal callBackAgentId As String,  _
                    ByVal paymentPlan As String,  _
                    ByVal userState As Object)
            If (Me.Contract2OperationCompleted Is Nothing) Then
                Me.Contract2OperationCompleted = AddressOf Me.OnContract2OperationCompleted
            End If
            Me.InvokeAsync("Contract2", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, fixPayment, fixForPlans, balloonType, balloonAmount, pDaysOut, contractNumber, memberCode, ssn, firstName, middleName, lastName, birthdate, ssn2, firstName2, middleName2, lastName2, birthdate2, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, vin, status, plans, totalCost, totalTax, source, directConnect, refNum, leadArrival, firstReply, callBack, commonReason, vehicleValue, callBackAgentId, paymentPlan}, Me.Contract2OperationCompleted, userState)
        End Sub
        
        Private Sub OnContract2OperationCompleted(ByVal arg As Object)
            If (Not (Me.Contract2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Contract2Completed(Me, New Contract2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Contract3", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Contract3( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal hullCode As String,  _
                    ByVal motorCode As String,  _
                    ByVal trailerCode As String,  _
                    ByVal vehicleType As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal allowWrap As String,  _
                    ByVal allowPT As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal fixPayment As String,  _
                    ByVal fixForPlans As String,  _
                    ByVal balloonType As String,  _
                    ByVal balloonAmount As String,  _
                    ByVal pDaysOut As String,  _
                    ByVal contractNumber As String,  _
                    ByVal memberCode As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal birthdate As String,  _
                    ByVal firstName2 As String,  _
                    ByVal middleName2 As String,  _
                    ByVal lastName2 As String,  _
                    ByVal birthdate2 As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal vin As String,  _
                    ByVal status As String,  _
                    ByVal plans As String,  _
                    ByVal totalCost As String,  _
                    ByVal totalTax As String,  _
                    ByVal source As String,  _
                    ByVal directConnect As String,  _
                    ByVal refNum As String,  _
                    ByVal leadArrival As String,  _
                    ByVal firstReply As String,  _
                    ByVal callBack As String,  _
                    ByVal callBackTime As String,  _
                    ByVal commonReason As String,  _
                    ByVal vehicleValue As String,  _
                    ByVal callBackAgentId As String,  _
                    ByVal paymentPlan As String,  _
                    ByVal inspectionStatus As String,  _
                    ByVal inspectionDate As String,  _
                    ByVal clickThruId As String,  _
                    ByVal openingAgentId As String,  _
                    ByVal loanId As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Contract3", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, hullCode, motorCode, trailerCode, vehicleType, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, allowWrap, allowPT, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, fixPayment, fixForPlans, balloonType, balloonAmount, pDaysOut, contractNumber, memberCode, firstName, middleName, lastName, birthdate, firstName2, middleName2, lastName2, birthdate2, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, vin, status, plans, totalCost, totalTax, source, directConnect, refNum, leadArrival, firstReply, callBack, callBackTime, commonReason, vehicleValue, callBackAgentId, paymentPlan, inspectionStatus, inspectionDate, clickThruId, openingAgentId, loanId})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Contract3Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal hullCode As String,  _
                    ByVal motorCode As String,  _
                    ByVal trailerCode As String,  _
                    ByVal vehicleType As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal allowWrap As String,  _
                    ByVal allowPT As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal fixPayment As String,  _
                    ByVal fixForPlans As String,  _
                    ByVal balloonType As String,  _
                    ByVal balloonAmount As String,  _
                    ByVal pDaysOut As String,  _
                    ByVal contractNumber As String,  _
                    ByVal memberCode As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal birthdate As String,  _
                    ByVal firstName2 As String,  _
                    ByVal middleName2 As String,  _
                    ByVal lastName2 As String,  _
                    ByVal birthdate2 As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal vin As String,  _
                    ByVal status As String,  _
                    ByVal plans As String,  _
                    ByVal totalCost As String,  _
                    ByVal totalTax As String,  _
                    ByVal source As String,  _
                    ByVal directConnect As String,  _
                    ByVal refNum As String,  _
                    ByVal leadArrival As String,  _
                    ByVal firstReply As String,  _
                    ByVal callBack As String,  _
                    ByVal callBackTime As String,  _
                    ByVal commonReason As String,  _
                    ByVal vehicleValue As String,  _
                    ByVal callBackAgentId As String,  _
                    ByVal paymentPlan As String,  _
                    ByVal inspectionStatus As String,  _
                    ByVal inspectionDate As String,  _
                    ByVal clickThruId As String,  _
                    ByVal openingAgentId As String,  _
                    ByVal loanId As String)
            Me.Contract3Async(login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, hullCode, motorCode, trailerCode, vehicleType, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, allowWrap, allowPT, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, fixPayment, fixForPlans, balloonType, balloonAmount, pDaysOut, contractNumber, memberCode, firstName, middleName, lastName, birthdate, firstName2, middleName2, lastName2, birthdate2, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, vin, status, plans, totalCost, totalTax, source, directConnect, refNum, leadArrival, firstReply, callBack, callBackTime, commonReason, vehicleValue, callBackAgentId, paymentPlan, inspectionStatus, inspectionDate, clickThruId, openingAgentId, loanId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Contract3Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal hullCode As String,  _
                    ByVal motorCode As String,  _
                    ByVal trailerCode As String,  _
                    ByVal vehicleType As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal allowWrap As String,  _
                    ByVal allowPT As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal fixPayment As String,  _
                    ByVal fixForPlans As String,  _
                    ByVal balloonType As String,  _
                    ByVal balloonAmount As String,  _
                    ByVal pDaysOut As String,  _
                    ByVal contractNumber As String,  _
                    ByVal memberCode As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal birthdate As String,  _
                    ByVal firstName2 As String,  _
                    ByVal middleName2 As String,  _
                    ByVal lastName2 As String,  _
                    ByVal birthdate2 As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal vin As String,  _
                    ByVal status As String,  _
                    ByVal plans As String,  _
                    ByVal totalCost As String,  _
                    ByVal totalTax As String,  _
                    ByVal source As String,  _
                    ByVal directConnect As String,  _
                    ByVal refNum As String,  _
                    ByVal leadArrival As String,  _
                    ByVal firstReply As String,  _
                    ByVal callBack As String,  _
                    ByVal callBackTime As String,  _
                    ByVal commonReason As String,  _
                    ByVal vehicleValue As String,  _
                    ByVal callBackAgentId As String,  _
                    ByVal paymentPlan As String,  _
                    ByVal inspectionStatus As String,  _
                    ByVal inspectionDate As String,  _
                    ByVal clickThruId As String,  _
                    ByVal openingAgentId As String,  _
                    ByVal loanId As String,  _
                    ByVal userState As Object)
            If (Me.Contract3OperationCompleted Is Nothing) Then
                Me.Contract3OperationCompleted = AddressOf Me.OnContract3OperationCompleted
            End If
            Me.InvokeAsync("Contract3", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, hullCode, motorCode, trailerCode, vehicleType, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, allowWrap, allowPT, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, fixPayment, fixForPlans, balloonType, balloonAmount, pDaysOut, contractNumber, memberCode, firstName, middleName, lastName, birthdate, firstName2, middleName2, lastName2, birthdate2, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, vin, status, plans, totalCost, totalTax, source, directConnect, refNum, leadArrival, firstReply, callBack, callBackTime, commonReason, vehicleValue, callBackAgentId, paymentPlan, inspectionStatus, inspectionDate, clickThruId, openingAgentId, loanId}, Me.Contract3OperationCompleted, userState)
        End Sub
        
        Private Sub OnContract3OperationCompleted(ByVal arg As Object)
            If (Not (Me.Contract3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Contract3Completed(Me, New Contract3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Loans", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Loans(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal loanId As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Loans", New Object() {login, password, agencyCodingType, agencyCode, loanId})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoansAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal loanId As String)
            Me.LoansAsync(login, password, agencyCodingType, agencyCode, loanId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoansAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal loanId As String, ByVal userState As Object)
            If (Me.LoansOperationCompleted Is Nothing) Then
                Me.LoansOperationCompleted = AddressOf Me.OnLoansOperationCompleted
            End If
            Me.InvokeAsync("Loans", New Object() {login, password, agencyCodingType, agencyCode, loanId}, Me.LoansOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoansOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoansCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoansCompleted(Me, New LoansCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Contracts", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Contracts( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal includeSubAgencies As String,  _
                    ByVal openingAgentCode As String,  _
                    ByVal closingAgentCode As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal lastName As String,  _
                    ByVal phone As String,  _
                    ByVal email As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal vin As String,  _
                    ByVal contractNumber As String,  _
                    ByVal dateStart As String,  _
                    ByVal dateEnd As String,  _
                    ByVal batchNumber1 As String,  _
                    ByVal batchNumber2 As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Contracts", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, openingAgentCode, closingAgentCode, memberCode, ssn, lastName, phone, email, vehicleCodingType, vehicleCode, vin, contractNumber, dateStart, dateEnd, batchNumber1, batchNumber2})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ContractsAsync( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal includeSubAgencies As String,  _
                    ByVal openingAgentCode As String,  _
                    ByVal closingAgentCode As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal lastName As String,  _
                    ByVal phone As String,  _
                    ByVal email As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal vin As String,  _
                    ByVal contractNumber As String,  _
                    ByVal dateStart As String,  _
                    ByVal dateEnd As String,  _
                    ByVal batchNumber1 As String,  _
                    ByVal batchNumber2 As String)
            Me.ContractsAsync(login, password, agencyCodingType, agencyCode, includeSubAgencies, openingAgentCode, closingAgentCode, memberCode, ssn, lastName, phone, email, vehicleCodingType, vehicleCode, vin, contractNumber, dateStart, dateEnd, batchNumber1, batchNumber2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ContractsAsync( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal includeSubAgencies As String,  _
                    ByVal openingAgentCode As String,  _
                    ByVal closingAgentCode As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal lastName As String,  _
                    ByVal phone As String,  _
                    ByVal email As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal vin As String,  _
                    ByVal contractNumber As String,  _
                    ByVal dateStart As String,  _
                    ByVal dateEnd As String,  _
                    ByVal batchNumber1 As String,  _
                    ByVal batchNumber2 As String,  _
                    ByVal userState As Object)
            If (Me.ContractsOperationCompleted Is Nothing) Then
                Me.ContractsOperationCompleted = AddressOf Me.OnContractsOperationCompleted
            End If
            Me.InvokeAsync("Contracts", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, openingAgentCode, closingAgentCode, memberCode, ssn, lastName, phone, email, vehicleCodingType, vehicleCode, vin, contractNumber, dateStart, dateEnd, batchNumber1, batchNumber2}, Me.ContractsOperationCompleted, userState)
        End Sub
        
        Private Sub OnContractsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ContractsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ContractsCompleted(Me, New ContractsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Contracts2", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Contracts2( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal includeSubAgencies As String,  _
                    ByVal openingAgentCode As String,  _
                    ByVal closingAgentCode As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal lastName As String,  _
                    ByVal phone As String,  _
                    ByVal email As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal vin As String,  _
                    ByVal contractNumber As String,  _
                    ByVal dateStart As String,  _
                    ByVal dateEnd As String,  _
                    ByVal batchNumber1 As String,  _
                    ByVal batchNumber2 As String,  _
                    ByVal status As String,  _
                    ByVal callBack As String,  _
                    ByVal maxCount As String,  _
                    ByVal callBackAgentId As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Contracts2", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, openingAgentCode, closingAgentCode, memberCode, ssn, lastName, phone, email, vehicleCodingType, vehicleCode, vin, contractNumber, dateStart, dateEnd, batchNumber1, batchNumber2, status, callBack, maxCount, callBackAgentId})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Contracts2Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal includeSubAgencies As String,  _
                    ByVal openingAgentCode As String,  _
                    ByVal closingAgentCode As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal lastName As String,  _
                    ByVal phone As String,  _
                    ByVal email As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal vin As String,  _
                    ByVal contractNumber As String,  _
                    ByVal dateStart As String,  _
                    ByVal dateEnd As String,  _
                    ByVal batchNumber1 As String,  _
                    ByVal batchNumber2 As String,  _
                    ByVal status As String,  _
                    ByVal callBack As String,  _
                    ByVal maxCount As String,  _
                    ByVal callBackAgentId As String)
            Me.Contracts2Async(login, password, agencyCodingType, agencyCode, includeSubAgencies, openingAgentCode, closingAgentCode, memberCode, ssn, lastName, phone, email, vehicleCodingType, vehicleCode, vin, contractNumber, dateStart, dateEnd, batchNumber1, batchNumber2, status, callBack, maxCount, callBackAgentId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Contracts2Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal includeSubAgencies As String,  _
                    ByVal openingAgentCode As String,  _
                    ByVal closingAgentCode As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal lastName As String,  _
                    ByVal phone As String,  _
                    ByVal email As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal vin As String,  _
                    ByVal contractNumber As String,  _
                    ByVal dateStart As String,  _
                    ByVal dateEnd As String,  _
                    ByVal batchNumber1 As String,  _
                    ByVal batchNumber2 As String,  _
                    ByVal status As String,  _
                    ByVal callBack As String,  _
                    ByVal maxCount As String,  _
                    ByVal callBackAgentId As String,  _
                    ByVal userState As Object)
            If (Me.Contracts2OperationCompleted Is Nothing) Then
                Me.Contracts2OperationCompleted = AddressOf Me.OnContracts2OperationCompleted
            End If
            Me.InvokeAsync("Contracts2", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, openingAgentCode, closingAgentCode, memberCode, ssn, lastName, phone, email, vehicleCodingType, vehicleCode, vin, contractNumber, dateStart, dateEnd, batchNumber1, batchNumber2, status, callBack, maxCount, callBackAgentId}, Me.Contracts2OperationCompleted, userState)
        End Sub
        
        Private Sub OnContracts2OperationCompleted(ByVal arg As Object)
            If (Not (Me.Contracts2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Contracts2Completed(Me, New Contracts2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Contracts3", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Contracts3( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal includeSubAgencies As String,  _
                    ByVal includeSharingSiblings As String,  _
                    ByVal includeUnsavedClickThrus As String,  _
                    ByVal clickThruId As String,  _
                    ByVal bannerCode As String,  _
                    ByVal openingAgentCode As String,  _
                    ByVal closingAgentCode As String,  _
                    ByVal memberCode As String,  _
                    ByVal firstName As String,  _
                    ByVal lastName As String,  _
                    ByVal phone As String,  _
                    ByVal email As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal vin As String,  _
                    ByVal contractNumber As String,  _
                    ByVal dateType As String,  _
                    ByVal dateStart As String,  _
                    ByVal dateEnd As String,  _
                    ByVal batchNumber1 As String,  _
                    ByVal batchNumber2 As String,  _
                    ByVal batchNumber3 As String,  _
                    ByVal status As String,  _
                    ByVal callBack As String,  _
                    ByVal callBackTime As String,  _
                    ByVal maxCount As String,  _
                    ByVal callBackAgentId As String,  _
                    ByVal directConnect As String,  _
                    ByVal contractType As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Contracts3", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, includeSharingSiblings, includeUnsavedClickThrus, clickThruId, bannerCode, openingAgentCode, closingAgentCode, memberCode, firstName, lastName, phone, email, vehicleCodingType, vehicleCode, vin, contractNumber, dateType, dateStart, dateEnd, batchNumber1, batchNumber2, batchNumber3, status, callBack, callBackTime, maxCount, callBackAgentId, directConnect, contractType})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Contracts3Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal includeSubAgencies As String,  _
                    ByVal includeSharingSiblings As String,  _
                    ByVal includeUnsavedClickThrus As String,  _
                    ByVal clickThruId As String,  _
                    ByVal bannerCode As String,  _
                    ByVal openingAgentCode As String,  _
                    ByVal closingAgentCode As String,  _
                    ByVal memberCode As String,  _
                    ByVal firstName As String,  _
                    ByVal lastName As String,  _
                    ByVal phone As String,  _
                    ByVal email As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal vin As String,  _
                    ByVal contractNumber As String,  _
                    ByVal dateType As String,  _
                    ByVal dateStart As String,  _
                    ByVal dateEnd As String,  _
                    ByVal batchNumber1 As String,  _
                    ByVal batchNumber2 As String,  _
                    ByVal batchNumber3 As String,  _
                    ByVal status As String,  _
                    ByVal callBack As String,  _
                    ByVal callBackTime As String,  _
                    ByVal maxCount As String,  _
                    ByVal callBackAgentId As String,  _
                    ByVal directConnect As String,  _
                    ByVal contractType As String)
            Me.Contracts3Async(login, password, agencyCodingType, agencyCode, includeSubAgencies, includeSharingSiblings, includeUnsavedClickThrus, clickThruId, bannerCode, openingAgentCode, closingAgentCode, memberCode, firstName, lastName, phone, email, vehicleCodingType, vehicleCode, vin, contractNumber, dateType, dateStart, dateEnd, batchNumber1, batchNumber2, batchNumber3, status, callBack, callBackTime, maxCount, callBackAgentId, directConnect, contractType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Contracts3Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal includeSubAgencies As String,  _
                    ByVal includeSharingSiblings As String,  _
                    ByVal includeUnsavedClickThrus As String,  _
                    ByVal clickThruId As String,  _
                    ByVal bannerCode As String,  _
                    ByVal openingAgentCode As String,  _
                    ByVal closingAgentCode As String,  _
                    ByVal memberCode As String,  _
                    ByVal firstName As String,  _
                    ByVal lastName As String,  _
                    ByVal phone As String,  _
                    ByVal email As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal vin As String,  _
                    ByVal contractNumber As String,  _
                    ByVal dateType As String,  _
                    ByVal dateStart As String,  _
                    ByVal dateEnd As String,  _
                    ByVal batchNumber1 As String,  _
                    ByVal batchNumber2 As String,  _
                    ByVal batchNumber3 As String,  _
                    ByVal status As String,  _
                    ByVal callBack As String,  _
                    ByVal callBackTime As String,  _
                    ByVal maxCount As String,  _
                    ByVal callBackAgentId As String,  _
                    ByVal directConnect As String,  _
                    ByVal contractType As String,  _
                    ByVal userState As Object)
            If (Me.Contracts3OperationCompleted Is Nothing) Then
                Me.Contracts3OperationCompleted = AddressOf Me.OnContracts3OperationCompleted
            End If
            Me.InvokeAsync("Contracts3", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, includeSharingSiblings, includeUnsavedClickThrus, clickThruId, bannerCode, openingAgentCode, closingAgentCode, memberCode, firstName, lastName, phone, email, vehicleCodingType, vehicleCode, vin, contractNumber, dateType, dateStart, dateEnd, batchNumber1, batchNumber2, batchNumber3, status, callBack, callBackTime, maxCount, callBackAgentId, directConnect, contractType}, Me.Contracts3OperationCompleted, userState)
        End Sub
        
        Private Sub OnContracts3OperationCompleted(ByVal arg As Object)
            If (Not (Me.Contracts3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Contracts3Completed(Me, New Contracts3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/DeleteContract", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteContract(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal oldOwnerCode As String, ByVal newOwnerCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("DeleteContract", New Object() {login, password, agencyCodingType, agencyCode, oldOwnerCode, newOwnerCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteContractAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal oldOwnerCode As String, ByVal newOwnerCode As String)
            Me.DeleteContractAsync(login, password, agencyCodingType, agencyCode, oldOwnerCode, newOwnerCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteContractAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal oldOwnerCode As String, ByVal newOwnerCode As String, ByVal userState As Object)
            If (Me.DeleteContractOperationCompleted Is Nothing) Then
                Me.DeleteContractOperationCompleted = AddressOf Me.OnDeleteContractOperationCompleted
            End If
            Me.InvokeAsync("DeleteContract", New Object() {login, password, agencyCodingType, agencyCode, oldOwnerCode, newOwnerCode}, Me.DeleteContractOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteContractOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteContractCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteContractCompleted(Me, New DeleteContractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/ContractStatus", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ContractStatus(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal status As String, ByVal contractNumbers As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("ContractStatus", New Object() {login, password, agencyCodingType, agencyCode, status, contractNumbers})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ContractStatusAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal status As String, ByVal contractNumbers As String)
            Me.ContractStatusAsync(login, password, agencyCodingType, agencyCode, status, contractNumbers, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ContractStatusAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal status As String, ByVal contractNumbers As String, ByVal userState As Object)
            If (Me.ContractStatusOperationCompleted Is Nothing) Then
                Me.ContractStatusOperationCompleted = AddressOf Me.OnContractStatusOperationCompleted
            End If
            Me.InvokeAsync("ContractStatus", New Object() {login, password, agencyCodingType, agencyCode, status, contractNumbers}, Me.ContractStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnContractStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.ContractStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ContractStatusCompleted(Me, New ContractStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/ClearCalls", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ClearCalls(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal includeSubAgencies As String, ByVal includeSharingSiblings As String, ByVal clearDate As String, ByVal status As String, ByVal callBackAgentId As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("ClearCalls", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, includeSharingSiblings, clearDate, status, callBackAgentId})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ClearCallsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal includeSubAgencies As String, ByVal includeSharingSiblings As String, ByVal clearDate As String, ByVal status As String, ByVal callBackAgentId As String)
            Me.ClearCallsAsync(login, password, agencyCodingType, agencyCode, includeSubAgencies, includeSharingSiblings, clearDate, status, callBackAgentId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClearCallsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal includeSubAgencies As String, ByVal includeSharingSiblings As String, ByVal clearDate As String, ByVal status As String, ByVal callBackAgentId As String, ByVal userState As Object)
            If (Me.ClearCallsOperationCompleted Is Nothing) Then
                Me.ClearCallsOperationCompleted = AddressOf Me.OnClearCallsOperationCompleted
            End If
            Me.InvokeAsync("ClearCalls", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, includeSharingSiblings, clearDate, status, callBackAgentId}, Me.ClearCallsOperationCompleted, userState)
        End Sub
        
        Private Sub OnClearCallsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ClearCallsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ClearCallsCompleted(Me, New ClearCallsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/CommonReasons", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CommonReasons(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("CommonReasons", New Object() {login, password, agencyCodingType, agencyCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CommonReasonsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String)
            Me.CommonReasonsAsync(login, password, agencyCodingType, agencyCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CommonReasonsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal userState As Object)
            If (Me.CommonReasonsOperationCompleted Is Nothing) Then
                Me.CommonReasonsOperationCompleted = AddressOf Me.OnCommonReasonsOperationCompleted
            End If
            Me.InvokeAsync("CommonReasons", New Object() {login, password, agencyCodingType, agencyCode}, Me.CommonReasonsOperationCompleted, userState)
        End Sub
        
        Private Sub OnCommonReasonsOperationCompleted(ByVal arg As Object)
            If (Not (Me.CommonReasonsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CommonReasonsCompleted(Me, New CommonReasonsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/CommonReason", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CommonReason(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal code As String, ByVal reason As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("CommonReason", New Object() {login, password, agencyCodingType, agencyCode, code, reason})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CommonReasonAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal code As String, ByVal reason As String)
            Me.CommonReasonAsync(login, password, agencyCodingType, agencyCode, code, reason, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CommonReasonAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal code As String, ByVal reason As String, ByVal userState As Object)
            If (Me.CommonReasonOperationCompleted Is Nothing) Then
                Me.CommonReasonOperationCompleted = AddressOf Me.OnCommonReasonOperationCompleted
            End If
            Me.InvokeAsync("CommonReason", New Object() {login, password, agencyCodingType, agencyCode, code, reason}, Me.CommonReasonOperationCompleted, userState)
        End Sub
        
        Private Sub OnCommonReasonOperationCompleted(ByVal arg As Object)
            If (Not (Me.CommonReasonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CommonReasonCompleted(Me, New CommonReasonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/MarketingBlurbs", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MarketingBlurbs(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("MarketingBlurbs", New Object() {login, password, agencyCodingType, agencyCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MarketingBlurbsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String)
            Me.MarketingBlurbsAsync(login, password, agencyCodingType, agencyCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MarketingBlurbsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal userState As Object)
            If (Me.MarketingBlurbsOperationCompleted Is Nothing) Then
                Me.MarketingBlurbsOperationCompleted = AddressOf Me.OnMarketingBlurbsOperationCompleted
            End If
            Me.InvokeAsync("MarketingBlurbs", New Object() {login, password, agencyCodingType, agencyCode}, Me.MarketingBlurbsOperationCompleted, userState)
        End Sub
        
        Private Sub OnMarketingBlurbsOperationCompleted(ByVal arg As Object)
            If (Not (Me.MarketingBlurbsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MarketingBlurbsCompleted(Me, New MarketingBlurbsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/MarketingBlurb", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MarketingBlurb(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal marketingId As String, ByVal marketingHtml As String, ByVal active As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("MarketingBlurb", New Object() {login, password, agencyCodingType, agencyCode, marketingId, marketingHtml, active})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MarketingBlurbAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal marketingId As String, ByVal marketingHtml As String, ByVal active As String)
            Me.MarketingBlurbAsync(login, password, agencyCodingType, agencyCode, marketingId, marketingHtml, active, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MarketingBlurbAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal marketingId As String, ByVal marketingHtml As String, ByVal active As String, ByVal userState As Object)
            If (Me.MarketingBlurbOperationCompleted Is Nothing) Then
                Me.MarketingBlurbOperationCompleted = AddressOf Me.OnMarketingBlurbOperationCompleted
            End If
            Me.InvokeAsync("MarketingBlurb", New Object() {login, password, agencyCodingType, agencyCode, marketingId, marketingHtml, active}, Me.MarketingBlurbOperationCompleted, userState)
        End Sub
        
        Private Sub OnMarketingBlurbOperationCompleted(ByVal arg As Object)
            If (Not (Me.MarketingBlurbCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MarketingBlurbCompleted(Me, New MarketingBlurbCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/AssignLeads", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AssignLeads(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal includeSubAgencies As String, ByVal includeSharingSiblings As String, ByVal callbackAgentId As String, ByVal unassignLeads As String, ByVal leadCount As String, ByVal statusFilter As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("AssignLeads", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, includeSharingSiblings, callbackAgentId, unassignLeads, leadCount, statusFilter})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AssignLeadsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal includeSubAgencies As String, ByVal includeSharingSiblings As String, ByVal callbackAgentId As String, ByVal unassignLeads As String, ByVal leadCount As String, ByVal statusFilter As String)
            Me.AssignLeadsAsync(login, password, agencyCodingType, agencyCode, includeSubAgencies, includeSharingSiblings, callbackAgentId, unassignLeads, leadCount, statusFilter, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AssignLeadsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal includeSubAgencies As String, ByVal includeSharingSiblings As String, ByVal callbackAgentId As String, ByVal unassignLeads As String, ByVal leadCount As String, ByVal statusFilter As String, ByVal userState As Object)
            If (Me.AssignLeadsOperationCompleted Is Nothing) Then
                Me.AssignLeadsOperationCompleted = AddressOf Me.OnAssignLeadsOperationCompleted
            End If
            Me.InvokeAsync("AssignLeads", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, includeSharingSiblings, callbackAgentId, unassignLeads, leadCount, statusFilter}, Me.AssignLeadsOperationCompleted, userState)
        End Sub
        
        Private Sub OnAssignLeadsOperationCompleted(ByVal arg As Object)
            If (Not (Me.AssignLeadsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AssignLeadsCompleted(Me, New AssignLeadsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Note", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Note(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal ownerCodingType As String, ByVal ownerCode As String, ByVal noteText As String, ByVal quoteId As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Note", New Object() {login, password, agencyCodingType, agencyCode, ownerCodingType, ownerCode, noteText, quoteId})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NoteAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal ownerCodingType As String, ByVal ownerCode As String, ByVal noteText As String, ByVal quoteId As String)
            Me.NoteAsync(login, password, agencyCodingType, agencyCode, ownerCodingType, ownerCode, noteText, quoteId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NoteAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal ownerCodingType As String, ByVal ownerCode As String, ByVal noteText As String, ByVal quoteId As String, ByVal userState As Object)
            If (Me.NoteOperationCompleted Is Nothing) Then
                Me.NoteOperationCompleted = AddressOf Me.OnNoteOperationCompleted
            End If
            Me.InvokeAsync("Note", New Object() {login, password, agencyCodingType, agencyCode, ownerCodingType, ownerCode, noteText, quoteId}, Me.NoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.NoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NoteCompleted(Me, New NoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Notes", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Notes(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal quoteId As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Notes", New Object() {login, password, agencyCodingType, agencyCode, quoteId})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NotesAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal quoteId As String)
            Me.NotesAsync(login, password, agencyCodingType, agencyCode, quoteId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NotesAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal quoteId As String, ByVal userState As Object)
            If (Me.NotesOperationCompleted Is Nothing) Then
                Me.NotesOperationCompleted = AddressOf Me.OnNotesOperationCompleted
            End If
            Me.InvokeAsync("Notes", New Object() {login, password, agencyCodingType, agencyCode, quoteId}, Me.NotesOperationCompleted, userState)
        End Sub
        
        Private Sub OnNotesOperationCompleted(ByVal arg As Object)
            If (Not (Me.NotesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NotesCompleted(Me, New NotesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/ClickThru", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ClickThru(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal bannerCode As String, ByVal ipAddress As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("ClickThru", New Object() {login, password, agencyCodingType, agencyCode, bannerCode, ipAddress})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ClickThruAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal bannerCode As String, ByVal ipAddress As String)
            Me.ClickThruAsync(login, password, agencyCodingType, agencyCode, bannerCode, ipAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClickThruAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal bannerCode As String, ByVal ipAddress As String, ByVal userState As Object)
            If (Me.ClickThruOperationCompleted Is Nothing) Then
                Me.ClickThruOperationCompleted = AddressOf Me.OnClickThruOperationCompleted
            End If
            Me.InvokeAsync("ClickThru", New Object() {login, password, agencyCodingType, agencyCode, bannerCode, ipAddress}, Me.ClickThruOperationCompleted, userState)
        End Sub
        
        Private Sub OnClickThruOperationCompleted(ByVal arg As Object)
            If (Not (Me.ClickThruCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ClickThruCompleted(Me, New ClickThruCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Verify", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Verify(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal contractNumber As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Verify", New Object() {login, password, agencyCodingType, agencyCode, contractNumber})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub VerifyAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal contractNumber As String)
            Me.VerifyAsync(login, password, agencyCodingType, agencyCode, contractNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub VerifyAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal contractNumber As String, ByVal userState As Object)
            If (Me.VerifyOperationCompleted Is Nothing) Then
                Me.VerifyOperationCompleted = AddressOf Me.OnVerifyOperationCompleted
            End If
            Me.InvokeAsync("Verify", New Object() {login, password, agencyCodingType, agencyCode, contractNumber}, Me.VerifyOperationCompleted, userState)
        End Sub
        
        Private Sub OnVerifyOperationCompleted(ByVal arg As Object)
            If (Not (Me.VerifyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent VerifyCompleted(Me, New VerifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Reassign", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Reassign(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal contractNumber As String, ByVal openingAgentId As String, ByVal closingAgentId As String, ByVal verifierAgentId As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Reassign", New Object() {login, password, agencyCodingType, agencyCode, contractNumber, openingAgentId, closingAgentId, verifierAgentId})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReassignAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal contractNumber As String, ByVal openingAgentId As String, ByVal closingAgentId As String, ByVal verifierAgentId As String)
            Me.ReassignAsync(login, password, agencyCodingType, agencyCode, contractNumber, openingAgentId, closingAgentId, verifierAgentId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReassignAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal contractNumber As String, ByVal openingAgentId As String, ByVal closingAgentId As String, ByVal verifierAgentId As String, ByVal userState As Object)
            If (Me.ReassignOperationCompleted Is Nothing) Then
                Me.ReassignOperationCompleted = AddressOf Me.OnReassignOperationCompleted
            End If
            Me.InvokeAsync("Reassign", New Object() {login, password, agencyCodingType, agencyCode, contractNumber, openingAgentId, closingAgentId, verifierAgentId}, Me.ReassignOperationCompleted, userState)
        End Sub
        
        Private Sub OnReassignOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReassignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReassignCompleted(Me, New ReassignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Batch", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Batch(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal batchNumber As String, ByVal batchType As String, ByVal checkNumber As String, ByVal checkAmount As String, ByVal endDate As String, ByVal receiveDate As String, ByVal contractNumbers As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Batch", New Object() {login, password, agencyCodingType, agencyCode, batchNumber, batchType, checkNumber, checkAmount, endDate, receiveDate, contractNumbers})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BatchAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal batchNumber As String, ByVal batchType As String, ByVal checkNumber As String, ByVal checkAmount As String, ByVal endDate As String, ByVal receiveDate As String, ByVal contractNumbers As String)
            Me.BatchAsync(login, password, agencyCodingType, agencyCode, batchNumber, batchType, checkNumber, checkAmount, endDate, receiveDate, contractNumbers, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BatchAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal batchNumber As String, ByVal batchType As String, ByVal checkNumber As String, ByVal checkAmount As String, ByVal endDate As String, ByVal receiveDate As String, ByVal contractNumbers As String, ByVal userState As Object)
            If (Me.BatchOperationCompleted Is Nothing) Then
                Me.BatchOperationCompleted = AddressOf Me.OnBatchOperationCompleted
            End If
            Me.InvokeAsync("Batch", New Object() {login, password, agencyCodingType, agencyCode, batchNumber, batchType, checkNumber, checkAmount, endDate, receiveDate, contractNumbers}, Me.BatchOperationCompleted, userState)
        End Sub
        
        Private Sub OnBatchOperationCompleted(ByVal arg As Object)
            If (Not (Me.BatchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BatchCompleted(Me, New BatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Batches", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Batches(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal includeSubAgencies As String, ByVal batchNumber As String, ByVal batchType As String, ByVal checkNumber As String, ByVal submitDateStart As String, ByVal submitDateEnd As String, ByVal received As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Batches", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, batchNumber, batchType, checkNumber, submitDateStart, submitDateEnd, received})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BatchesAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal includeSubAgencies As String, ByVal batchNumber As String, ByVal batchType As String, ByVal checkNumber As String, ByVal submitDateStart As String, ByVal submitDateEnd As String, ByVal received As String)
            Me.BatchesAsync(login, password, agencyCodingType, agencyCode, includeSubAgencies, batchNumber, batchType, checkNumber, submitDateStart, submitDateEnd, received, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BatchesAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal includeSubAgencies As String, ByVal batchNumber As String, ByVal batchType As String, ByVal checkNumber As String, ByVal submitDateStart As String, ByVal submitDateEnd As String, ByVal received As String, ByVal userState As Object)
            If (Me.BatchesOperationCompleted Is Nothing) Then
                Me.BatchesOperationCompleted = AddressOf Me.OnBatchesOperationCompleted
            End If
            Me.InvokeAsync("Batches", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, batchNumber, batchType, checkNumber, submitDateStart, submitDateEnd, received}, Me.BatchesOperationCompleted, userState)
        End Sub
        
        Private Sub OnBatchesOperationCompleted(ByVal arg As Object)
            If (Not (Me.BatchesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BatchesCompleted(Me, New BatchesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Forgot", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Forgot(ByVal login As String, ByVal agencyCode As String, ByVal sendEmail As String, ByVal domain As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Forgot", New Object() {login, agencyCode, sendEmail, domain})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ForgotAsync(ByVal login As String, ByVal agencyCode As String, ByVal sendEmail As String, ByVal domain As String)
            Me.ForgotAsync(login, agencyCode, sendEmail, domain, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ForgotAsync(ByVal login As String, ByVal agencyCode As String, ByVal sendEmail As String, ByVal domain As String, ByVal userState As Object)
            If (Me.ForgotOperationCompleted Is Nothing) Then
                Me.ForgotOperationCompleted = AddressOf Me.OnForgotOperationCompleted
            End If
            Me.InvokeAsync("Forgot", New Object() {login, agencyCode, sendEmail, domain}, Me.ForgotOperationCompleted, userState)
        End Sub
        
        Private Sub OnForgotOperationCompleted(ByVal arg As Object)
            If (Not (Me.ForgotCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ForgotCompleted(Me, New ForgotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="IQQSoap", [Namespace]:="https://localhost/nserv/IQQ.asmx")>  _
    Partial Public Class IQQ
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private VersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IwsAEsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private IwsCCRepsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AgenciesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Agencies2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private BundleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AgencyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AgentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TaxOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ModelsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Models2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private QuoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Quote2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private Quote3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private AmortizeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ContractOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Contract2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private Contract3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoansOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ContractsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Contracts2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private Contracts3OperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteContractOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ContractStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ClearCallsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CommonReasonsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CommonReasonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MarketingBlurbsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private MarketingBlurbOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AssignLeadsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NoteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private NotesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ClickThruOperationCompleted As System.Threading.SendOrPostCallback
        
        Private VerifyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReassignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BatchOperationCompleted As System.Threading.SendOrPostCallback
        
        Private BatchesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ForgotOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_IWSQuoteService_IQQ
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event VersionCompleted As VersionCompletedEventHandler
        
        '''<remarks/>
        Public Event IwsAEsCompleted As IwsAEsCompletedEventHandler
        
        '''<remarks/>
        Public Event IwsCCRepsCompleted As IwsCCRepsCompletedEventHandler
        
        '''<remarks/>
        Public Event AgenciesCompleted As AgenciesCompletedEventHandler
        
        '''<remarks/>
        Public Event Agencies2Completed As Agencies2CompletedEventHandler
        
        '''<remarks/>
        Public Event BundleCompleted As BundleCompletedEventHandler
        
        '''<remarks/>
        Public Event AgencyCompleted As AgencyCompletedEventHandler
        
        '''<remarks/>
        Public Event AgentCompleted As AgentCompletedEventHandler
        
        '''<remarks/>
        Public Event TaxCompleted As TaxCompletedEventHandler
        
        '''<remarks/>
        Public Event ModelsCompleted As ModelsCompletedEventHandler
        
        '''<remarks/>
        Public Event Models2Completed As Models2CompletedEventHandler
        
        '''<remarks/>
        Public Event QuoteCompleted As QuoteCompletedEventHandler
        
        '''<remarks/>
        Public Event Quote2Completed As Quote2CompletedEventHandler
        
        '''<remarks/>
        Public Event Quote3Completed As Quote3CompletedEventHandler
        
        '''<remarks/>
        Public Event AmortizeCompleted As AmortizeCompletedEventHandler
        
        '''<remarks/>
        Public Event ContractCompleted As ContractCompletedEventHandler
        
        '''<remarks/>
        Public Event Contract2Completed As Contract2CompletedEventHandler
        
        '''<remarks/>
        Public Event Contract3Completed As Contract3CompletedEventHandler
        
        '''<remarks/>
        Public Event LoansCompleted As LoansCompletedEventHandler
        
        '''<remarks/>
        Public Event ContractsCompleted As ContractsCompletedEventHandler
        
        '''<remarks/>
        Public Event Contracts2Completed As Contracts2CompletedEventHandler
        
        '''<remarks/>
        Public Event Contracts3Completed As Contracts3CompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteContractCompleted As DeleteContractCompletedEventHandler
        
        '''<remarks/>
        Public Event ContractStatusCompleted As ContractStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event ClearCallsCompleted As ClearCallsCompletedEventHandler
        
        '''<remarks/>
        Public Event CommonReasonsCompleted As CommonReasonsCompletedEventHandler
        
        '''<remarks/>
        Public Event CommonReasonCompleted As CommonReasonCompletedEventHandler
        
        '''<remarks/>
        Public Event MarketingBlurbsCompleted As MarketingBlurbsCompletedEventHandler
        
        '''<remarks/>
        Public Event MarketingBlurbCompleted As MarketingBlurbCompletedEventHandler
        
        '''<remarks/>
        Public Event AssignLeadsCompleted As AssignLeadsCompletedEventHandler
        
        '''<remarks/>
        Public Event NoteCompleted As NoteCompletedEventHandler
        
        '''<remarks/>
        Public Event NotesCompleted As NotesCompletedEventHandler
        
        '''<remarks/>
        Public Event ClickThruCompleted As ClickThruCompletedEventHandler
        
        '''<remarks/>
        Public Event VerifyCompleted As VerifyCompletedEventHandler
        
        '''<remarks/>
        Public Event ReassignCompleted As ReassignCompletedEventHandler
        
        '''<remarks/>
        Public Event BatchCompleted As BatchCompletedEventHandler
        
        '''<remarks/>
        Public Event BatchesCompleted As BatchesCompletedEventHandler
        
        '''<remarks/>
        Public Event ForgotCompleted As ForgotCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Version", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Version() As String
            Dim results() As Object = Me.Invoke("Version", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginVersion(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Version", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndVersion(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub VersionAsync()
            Me.VersionAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub VersionAsync(ByVal userState As Object)
            If (Me.VersionOperationCompleted Is Nothing) Then
                Me.VersionOperationCompleted = AddressOf Me.OnVersionOperationCompleted
            End If
            Me.InvokeAsync("Version", New Object(-1) {}, Me.VersionOperationCompleted, userState)
        End Sub
        
        Private Sub OnVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.VersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent VersionCompleted(Me, New VersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/IwsAEs", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IwsAEs(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("IwsAEs", New Object() {login, password, agencyCodingType, agencyCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginIwsAEs(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("IwsAEs", New Object() {login, password, agencyCodingType, agencyCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndIwsAEs(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IwsAEsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String)
            Me.IwsAEsAsync(login, password, agencyCodingType, agencyCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IwsAEsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal userState As Object)
            If (Me.IwsAEsOperationCompleted Is Nothing) Then
                Me.IwsAEsOperationCompleted = AddressOf Me.OnIwsAEsOperationCompleted
            End If
            Me.InvokeAsync("IwsAEs", New Object() {login, password, agencyCodingType, agencyCode}, Me.IwsAEsOperationCompleted, userState)
        End Sub
        
        Private Sub OnIwsAEsOperationCompleted(ByVal arg As Object)
            If (Not (Me.IwsAEsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IwsAEsCompleted(Me, New IwsAEsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/IwsCCReps", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function IwsCCReps(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("IwsCCReps", New Object() {login, password, agencyCodingType, agencyCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginIwsCCReps(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("IwsCCReps", New Object() {login, password, agencyCodingType, agencyCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndIwsCCReps(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub IwsCCRepsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String)
            Me.IwsCCRepsAsync(login, password, agencyCodingType, agencyCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub IwsCCRepsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal userState As Object)
            If (Me.IwsCCRepsOperationCompleted Is Nothing) Then
                Me.IwsCCRepsOperationCompleted = AddressOf Me.OnIwsCCRepsOperationCompleted
            End If
            Me.InvokeAsync("IwsCCReps", New Object() {login, password, agencyCodingType, agencyCode}, Me.IwsCCRepsOperationCompleted, userState)
        End Sub
        
        Private Sub OnIwsCCRepsOperationCompleted(ByVal arg As Object)
            If (Not (Me.IwsCCRepsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent IwsCCRepsCompleted(Me, New IwsCCRepsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Agencies", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Agencies(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Agencies", New Object() {login, password, agencyCodingType, agencyCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginAgencies(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Agencies", New Object() {login, password, agencyCodingType, agencyCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAgencies(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AgenciesAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String)
            Me.AgenciesAsync(login, password, agencyCodingType, agencyCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AgenciesAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal userState As Object)
            If (Me.AgenciesOperationCompleted Is Nothing) Then
                Me.AgenciesOperationCompleted = AddressOf Me.OnAgenciesOperationCompleted
            End If
            Me.InvokeAsync("Agencies", New Object() {login, password, agencyCodingType, agencyCode}, Me.AgenciesOperationCompleted, userState)
        End Sub
        
        Private Sub OnAgenciesOperationCompleted(ByVal arg As Object)
            If (Not (Me.AgenciesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AgenciesCompleted(Me, New AgenciesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Agencies2", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Agencies2(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal keyWord As String, ByVal includeAgents As String, ByVal includeSubAgencies As String, ByVal includeSharingSiblings As String, ByVal agentCode As String, ByVal agentCode2 As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Agencies2", New Object() {login, password, agencyCodingType, agencyCode, keyWord, includeAgents, includeSubAgencies, includeSharingSiblings, agentCode, agentCode2})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginAgencies2(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal keyWord As String, ByVal includeAgents As String, ByVal includeSubAgencies As String, ByVal includeSharingSiblings As String, ByVal agentCode As String, ByVal agentCode2 As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Agencies2", New Object() {login, password, agencyCodingType, agencyCode, keyWord, includeAgents, includeSubAgencies, includeSharingSiblings, agentCode, agentCode2}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAgencies2(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Agencies2Async(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal keyWord As String, ByVal includeAgents As String, ByVal includeSubAgencies As String, ByVal includeSharingSiblings As String, ByVal agentCode As String, ByVal agentCode2 As String)
            Me.Agencies2Async(login, password, agencyCodingType, agencyCode, keyWord, includeAgents, includeSubAgencies, includeSharingSiblings, agentCode, agentCode2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Agencies2Async(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal keyWord As String, ByVal includeAgents As String, ByVal includeSubAgencies As String, ByVal includeSharingSiblings As String, ByVal agentCode As String, ByVal agentCode2 As String, ByVal userState As Object)
            If (Me.Agencies2OperationCompleted Is Nothing) Then
                Me.Agencies2OperationCompleted = AddressOf Me.OnAgencies2OperationCompleted
            End If
            Me.InvokeAsync("Agencies2", New Object() {login, password, agencyCodingType, agencyCode, keyWord, includeAgents, includeSubAgencies, includeSharingSiblings, agentCode, agentCode2}, Me.Agencies2OperationCompleted, userState)
        End Sub
        
        Private Sub OnAgencies2OperationCompleted(ByVal arg As Object)
            If (Not (Me.Agencies2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Agencies2Completed(Me, New Agencies2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Bundle", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Bundle(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal bundleId As String, ByVal title As String, ByVal descriptionHtml As String, ByVal vsa As String, ByVal products As String, ByVal deleted As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Bundle", New Object() {login, password, agencyCodingType, agencyCode, bundleId, title, descriptionHtml, vsa, products, deleted})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginBundle(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal bundleId As String, ByVal title As String, ByVal descriptionHtml As String, ByVal vsa As String, ByVal products As String, ByVal deleted As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Bundle", New Object() {login, password, agencyCodingType, agencyCode, bundleId, title, descriptionHtml, vsa, products, deleted}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndBundle(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BundleAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal bundleId As String, ByVal title As String, ByVal descriptionHtml As String, ByVal vsa As String, ByVal products As String, ByVal deleted As String)
            Me.BundleAsync(login, password, agencyCodingType, agencyCode, bundleId, title, descriptionHtml, vsa, products, deleted, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BundleAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal bundleId As String, ByVal title As String, ByVal descriptionHtml As String, ByVal vsa As String, ByVal products As String, ByVal deleted As String, ByVal userState As Object)
            If (Me.BundleOperationCompleted Is Nothing) Then
                Me.BundleOperationCompleted = AddressOf Me.OnBundleOperationCompleted
            End If
            Me.InvokeAsync("Bundle", New Object() {login, password, agencyCodingType, agencyCode, bundleId, title, descriptionHtml, vsa, products, deleted}, Me.BundleOperationCompleted, userState)
        End Sub
        
        Private Sub OnBundleOperationCompleted(ByVal arg As Object)
            If (Not (Me.BundleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BundleCompleted(Me, New BundleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Agency", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Agency(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal taxRate As String, ByVal passphrase As String, ByVal agencyName As String, ByVal agencyCode2 As String, ByVal requireMemberCode As String, ByVal mainContactAgentId As String, ByVal AeId As String, ByVal MeId As String, ByVal MeId2 As String, ByVal CcId As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Agency", New Object() {login, password, agencyCodingType, agencyCode, taxRate, passphrase, agencyName, agencyCode2, requireMemberCode, mainContactAgentId, AeId, MeId, MeId2, CcId})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginAgency( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal taxRate As String,  _
                    ByVal passphrase As String,  _
                    ByVal agencyName As String,  _
                    ByVal agencyCode2 As String,  _
                    ByVal requireMemberCode As String,  _
                    ByVal mainContactAgentId As String,  _
                    ByVal AeId As String,  _
                    ByVal MeId As String,  _
                    ByVal MeId2 As String,  _
                    ByVal CcId As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Agency", New Object() {login, password, agencyCodingType, agencyCode, taxRate, passphrase, agencyName, agencyCode2, requireMemberCode, mainContactAgentId, AeId, MeId, MeId2, CcId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAgency(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AgencyAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal taxRate As String, ByVal passphrase As String, ByVal agencyName As String, ByVal agencyCode2 As String, ByVal requireMemberCode As String, ByVal mainContactAgentId As String, ByVal AeId As String, ByVal MeId As String, ByVal MeId2 As String, ByVal CcId As String)
            Me.AgencyAsync(login, password, agencyCodingType, agencyCode, taxRate, passphrase, agencyName, agencyCode2, requireMemberCode, mainContactAgentId, AeId, MeId, MeId2, CcId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AgencyAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal taxRate As String, ByVal passphrase As String, ByVal agencyName As String, ByVal agencyCode2 As String, ByVal requireMemberCode As String, ByVal mainContactAgentId As String, ByVal AeId As String, ByVal MeId As String, ByVal MeId2 As String, ByVal CcId As String, ByVal userState As Object)
            If (Me.AgencyOperationCompleted Is Nothing) Then
                Me.AgencyOperationCompleted = AddressOf Me.OnAgencyOperationCompleted
            End If
            Me.InvokeAsync("Agency", New Object() {login, password, agencyCodingType, agencyCode, taxRate, passphrase, agencyName, agencyCode2, requireMemberCode, mainContactAgentId, AeId, MeId, MeId2, CcId}, Me.AgencyOperationCompleted, userState)
        End Sub
        
        Private Sub OnAgencyOperationCompleted(ByVal arg As Object)
            If (Not (Me.AgencyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AgencyCompleted(Me, New AgencyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Agent", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Agent( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal agentId As String,  _
                    ByVal parentAgencyId As String,  _
                    ByVal type As String,  _
                    ByVal code As String,  _
                    ByVal code2 As String,  _
                    ByVal foragencyid As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal loginName As String,  _
                    ByVal newPassword As String,  _
                    ByVal deleted As String,  _
                    ByVal balloons As String,  _
                    ByVal attributes As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Agent", New Object() {login, password, agencyCodingType, agencyCode, agentId, parentAgencyId, type, code, code2, foragencyid, firstName, middleName, lastName, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, loginName, newPassword, deleted, balloons, attributes})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginAgent( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal agentId As String,  _
                    ByVal parentAgencyId As String,  _
                    ByVal type As String,  _
                    ByVal code As String,  _
                    ByVal code2 As String,  _
                    ByVal foragencyid As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal loginName As String,  _
                    ByVal newPassword As String,  _
                    ByVal deleted As String,  _
                    ByVal balloons As String,  _
                    ByVal attributes As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Agent", New Object() {login, password, agencyCodingType, agencyCode, agentId, parentAgencyId, type, code, code2, foragencyid, firstName, middleName, lastName, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, loginName, newPassword, deleted, balloons, attributes}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAgent(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AgentAsync( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal agentId As String,  _
                    ByVal parentAgencyId As String,  _
                    ByVal type As String,  _
                    ByVal code As String,  _
                    ByVal code2 As String,  _
                    ByVal foragencyid As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal loginName As String,  _
                    ByVal newPassword As String,  _
                    ByVal deleted As String,  _
                    ByVal balloons As String,  _
                    ByVal attributes As String)
            Me.AgentAsync(login, password, agencyCodingType, agencyCode, agentId, parentAgencyId, type, code, code2, foragencyid, firstName, middleName, lastName, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, loginName, newPassword, deleted, balloons, attributes, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AgentAsync( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal agentId As String,  _
                    ByVal parentAgencyId As String,  _
                    ByVal type As String,  _
                    ByVal code As String,  _
                    ByVal code2 As String,  _
                    ByVal foragencyid As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal loginName As String,  _
                    ByVal newPassword As String,  _
                    ByVal deleted As String,  _
                    ByVal balloons As String,  _
                    ByVal attributes As String,  _
                    ByVal userState As Object)
            If (Me.AgentOperationCompleted Is Nothing) Then
                Me.AgentOperationCompleted = AddressOf Me.OnAgentOperationCompleted
            End If
            Me.InvokeAsync("Agent", New Object() {login, password, agencyCodingType, agencyCode, agentId, parentAgencyId, type, code, code2, foragencyid, firstName, middleName, lastName, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, loginName, newPassword, deleted, balloons, attributes}, Me.AgentOperationCompleted, userState)
        End Sub
        
        Private Sub OnAgentOperationCompleted(ByVal arg As Object)
            If (Not (Me.AgentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AgentCompleted(Me, New AgentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Tax", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Tax(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal taxZipCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Tax", New Object() {login, password, agencyCodingType, agencyCode, taxZipCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginTax(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal taxZipCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Tax", New Object() {login, password, agencyCodingType, agencyCode, taxZipCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndTax(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TaxAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal taxZipCode As String)
            Me.TaxAsync(login, password, agencyCodingType, agencyCode, taxZipCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TaxAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal taxZipCode As String, ByVal userState As Object)
            If (Me.TaxOperationCompleted Is Nothing) Then
                Me.TaxOperationCompleted = AddressOf Me.OnTaxOperationCompleted
            End If
            Me.InvokeAsync("Tax", New Object() {login, password, agencyCodingType, agencyCode, taxZipCode}, Me.TaxOperationCompleted, userState)
        End Sub
        
        Private Sub OnTaxOperationCompleted(ByVal arg As Object)
            If (Not (Me.TaxCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TaxCompleted(Me, New TaxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Models", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Models(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal vehicleCodingType As String, ByVal vehicleCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Models", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginModels(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal vehicleCodingType As String, ByVal vehicleCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Models", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndModels(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ModelsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal vehicleCodingType As String, ByVal vehicleCode As String)
            Me.ModelsAsync(login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ModelsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal vehicleCodingType As String, ByVal vehicleCode As String, ByVal userState As Object)
            If (Me.ModelsOperationCompleted Is Nothing) Then
                Me.ModelsOperationCompleted = AddressOf Me.OnModelsOperationCompleted
            End If
            Me.InvokeAsync("Models", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode}, Me.ModelsOperationCompleted, userState)
        End Sub
        
        Private Sub OnModelsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ModelsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ModelsCompleted(Me, New ModelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Models2", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Models2(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal vehicleCodingType As String, ByVal vehicleCode As String, ByVal showIneligible As String, ByVal stateCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Models2", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, showIneligible, stateCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginModels2(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal vehicleCodingType As String, ByVal vehicleCode As String, ByVal showIneligible As String, ByVal stateCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Models2", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, showIneligible, stateCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndModels2(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Models2Async(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal vehicleCodingType As String, ByVal vehicleCode As String, ByVal showIneligible As String, ByVal stateCode As String)
            Me.Models2Async(login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, showIneligible, stateCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Models2Async(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal vehicleCodingType As String, ByVal vehicleCode As String, ByVal showIneligible As String, ByVal stateCode As String, ByVal userState As Object)
            If (Me.Models2OperationCompleted Is Nothing) Then
                Me.Models2OperationCompleted = AddressOf Me.OnModels2OperationCompleted
            End If
            Me.InvokeAsync("Models2", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, showIneligible, stateCode}, Me.Models2OperationCompleted, userState)
        End Sub
        
        Private Sub OnModels2OperationCompleted(ByVal arg As Object)
            If (Not (Me.Models2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Models2Completed(Me, New Models2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Quote", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Quote( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal zipCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Quote", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, replacementDate, replacementMiles, transmission, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, zipCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginQuote( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal zipCode As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Quote", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, replacementDate, replacementMiles, transmission, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, zipCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndQuote(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub QuoteAsync( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal zipCode As String)
            Me.QuoteAsync(login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, replacementDate, replacementMiles, transmission, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, zipCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub QuoteAsync( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal zipCode As String,  _
                    ByVal userState As Object)
            If (Me.QuoteOperationCompleted Is Nothing) Then
                Me.QuoteOperationCompleted = AddressOf Me.OnQuoteOperationCompleted
            End If
            Me.InvokeAsync("Quote", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, replacementDate, replacementMiles, transmission, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, zipCode}, Me.QuoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnQuoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.QuoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent QuoteCompleted(Me, New QuoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Quote2", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Quote2( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal zipCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Quote2", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, zipCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginQuote2( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal zipCode As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Quote2", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, zipCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndQuote2(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Quote2Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal zipCode As String)
            Me.Quote2Async(login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, zipCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Quote2Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal zipCode As String,  _
                    ByVal userState As Object)
            If (Me.Quote2OperationCompleted Is Nothing) Then
                Me.Quote2OperationCompleted = AddressOf Me.OnQuote2OperationCompleted
            End If
            Me.InvokeAsync("Quote2", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, zipCode}, Me.Quote2OperationCompleted, userState)
        End Sub
        
        Private Sub OnQuote2OperationCompleted(ByVal arg As Object)
            If (Not (Me.Quote2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Quote2Completed(Me, New Quote2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Quote3", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Quote3( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal allowWrap As String,  _
                    ByVal allowPT As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal zipCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Quote3", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, allowWrap, allowPT, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, zipCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginQuote3( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal allowWrap As String,  _
                    ByVal allowPT As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal zipCode As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Quote3", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, allowWrap, allowPT, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, zipCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndQuote3(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Quote3Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal allowWrap As String,  _
                    ByVal allowPT As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal zipCode As String)
            Me.Quote3Async(login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, allowWrap, allowPT, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, zipCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Quote3Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal allowWrap As String,  _
                    ByVal allowPT As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal zipCode As String,  _
                    ByVal userState As Object)
            If (Me.Quote3OperationCompleted Is Nothing) Then
                Me.Quote3OperationCompleted = AddressOf Me.OnQuote3OperationCompleted
            End If
            Me.InvokeAsync("Quote3", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, allowWrap, allowPT, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, zipCode}, Me.Quote3OperationCompleted, userState)
        End Sub
        
        Private Sub OnQuote3OperationCompleted(ByVal arg As Object)
            If (Not (Me.Quote3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Quote3Completed(Me, New Quote3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Amortize", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Amortize(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal xml As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Amortize", New Object() {login, password, agencyCodingType, agencyCode, xml})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginAmortize(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal xml As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Amortize", New Object() {login, password, agencyCodingType, agencyCode, xml}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAmortize(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AmortizeAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal xml As String)
            Me.AmortizeAsync(login, password, agencyCodingType, agencyCode, xml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AmortizeAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal xml As String, ByVal userState As Object)
            If (Me.AmortizeOperationCompleted Is Nothing) Then
                Me.AmortizeOperationCompleted = AddressOf Me.OnAmortizeOperationCompleted
            End If
            Me.InvokeAsync("Amortize", New Object() {login, password, agencyCodingType, agencyCode, xml}, Me.AmortizeOperationCompleted, userState)
        End Sub
        
        Private Sub OnAmortizeOperationCompleted(ByVal arg As Object)
            If (Not (Me.AmortizeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AmortizeCompleted(Me, New AmortizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Contract", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Contract( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal fixPayment As String,  _
                    ByVal fixForPlans As String,  _
                    ByVal contractNumber As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal ssn2 As String,  _
                    ByVal firstName2 As String,  _
                    ByVal middleName2 As String,  _
                    ByVal lastName2 As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal vin As String,  _
                    ByVal status As String,  _
                    ByVal plans As String,  _
                    ByVal totalCost As String,  _
                    ByVal totalTax As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Contract", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, replacementDate, replacementMiles, transmission, usage, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, fixPayment, fixForPlans, contractNumber, memberCode, ssn, firstName, middleName, lastName, ssn2, firstName2, middleName2, lastName2, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, vin, status, plans, totalCost, totalTax})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginContract( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal fixPayment As String,  _
                    ByVal fixForPlans As String,  _
                    ByVal contractNumber As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal ssn2 As String,  _
                    ByVal firstName2 As String,  _
                    ByVal middleName2 As String,  _
                    ByVal lastName2 As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal vin As String,  _
                    ByVal status As String,  _
                    ByVal plans As String,  _
                    ByVal totalCost As String,  _
                    ByVal totalTax As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Contract", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, replacementDate, replacementMiles, transmission, usage, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, fixPayment, fixForPlans, contractNumber, memberCode, ssn, firstName, middleName, lastName, ssn2, firstName2, middleName2, lastName2, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, vin, status, plans, totalCost, totalTax}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndContract(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ContractAsync( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal fixPayment As String,  _
                    ByVal fixForPlans As String,  _
                    ByVal contractNumber As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal ssn2 As String,  _
                    ByVal firstName2 As String,  _
                    ByVal middleName2 As String,  _
                    ByVal lastName2 As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal vin As String,  _
                    ByVal status As String,  _
                    ByVal plans As String,  _
                    ByVal totalCost As String,  _
                    ByVal totalTax As String)
            Me.ContractAsync(login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, replacementDate, replacementMiles, transmission, usage, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, fixPayment, fixForPlans, contractNumber, memberCode, ssn, firstName, middleName, lastName, ssn2, firstName2, middleName2, lastName2, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, vin, status, plans, totalCost, totalTax, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ContractAsync( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal fixPayment As String,  _
                    ByVal fixForPlans As String,  _
                    ByVal contractNumber As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal ssn2 As String,  _
                    ByVal firstName2 As String,  _
                    ByVal middleName2 As String,  _
                    ByVal lastName2 As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal vin As String,  _
                    ByVal status As String,  _
                    ByVal plans As String,  _
                    ByVal totalCost As String,  _
                    ByVal totalTax As String,  _
                    ByVal userState As Object)
            If (Me.ContractOperationCompleted Is Nothing) Then
                Me.ContractOperationCompleted = AddressOf Me.OnContractOperationCompleted
            End If
            Me.InvokeAsync("Contract", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, replacementDate, replacementMiles, transmission, usage, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, fixPayment, fixForPlans, contractNumber, memberCode, ssn, firstName, middleName, lastName, ssn2, firstName2, middleName2, lastName2, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, vin, status, plans, totalCost, totalTax}, Me.ContractOperationCompleted, userState)
        End Sub
        
        Private Sub OnContractOperationCompleted(ByVal arg As Object)
            If (Not (Me.ContractCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ContractCompleted(Me, New ContractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Contract2", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Contract2( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal fixPayment As String,  _
                    ByVal fixForPlans As String,  _
                    ByVal balloonType As String,  _
                    ByVal balloonAmount As String,  _
                    ByVal pDaysOut As String,  _
                    ByVal contractNumber As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal birthdate As String,  _
                    ByVal ssn2 As String,  _
                    ByVal firstName2 As String,  _
                    ByVal middleName2 As String,  _
                    ByVal lastName2 As String,  _
                    ByVal birthdate2 As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal vin As String,  _
                    ByVal status As String,  _
                    ByVal plans As String,  _
                    ByVal totalCost As String,  _
                    ByVal totalTax As String,  _
                    ByVal source As String,  _
                    ByVal directConnect As String,  _
                    ByVal refNum As String,  _
                    ByVal leadArrival As String,  _
                    ByVal firstReply As String,  _
                    ByVal callBack As String,  _
                    ByVal commonReason As String,  _
                    ByVal vehicleValue As String,  _
                    ByVal callBackAgentId As String,  _
                    ByVal paymentPlan As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Contract2", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, fixPayment, fixForPlans, balloonType, balloonAmount, pDaysOut, contractNumber, memberCode, ssn, firstName, middleName, lastName, birthdate, ssn2, firstName2, middleName2, lastName2, birthdate2, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, vin, status, plans, totalCost, totalTax, source, directConnect, refNum, leadArrival, firstReply, callBack, commonReason, vehicleValue, callBackAgentId, paymentPlan})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
		Public Function BeginContract2( _
					ByVal login As String, _
					ByVal password As String, _
					ByVal agencyCodingType As String, _
					ByVal agencyCode As String, _
					ByVal vehicleCodingType As String, _
					ByVal vehicleCode As String, _
					ByVal newUsed As String, _
					ByVal inServiceDate As String, _
					ByVal issueDate As String, _
					ByVal issueMiles As String, _
					ByVal milesPerYear As String, _
					ByVal replacementDate As String, _
					ByVal replacementMiles As String, _
					ByVal transmission As String, _
					ByVal usage As String, _
					ByVal taxRate As String, _
					ByVal taxZipCode As String, _
					ByVal loanAmount As String, _
					ByVal loanAPR As String, _
					ByVal pPerTerm As String, _
					ByVal pPerYear As String, _
					ByVal fixPayment As String, _
					ByVal fixForPlans As String, _
					ByVal balloonType As String, _
					ByVal balloonAmount As String, _
					ByVal pDaysOut As String, _
					ByVal contractNumber As String, _
					ByVal memberCode As String, _
					ByVal ssn As String, _
					ByVal firstName As String, _
					ByVal middleName As String, _
					ByVal lastName As String, _
					ByVal birthdate As String, _
					ByVal ssn2 As String, _
					ByVal firstName2 As String, _
					ByVal middleName2 As String, _
					ByVal lastName2 As String, _
					ByVal birthdate2 As String, _
					ByVal address1 As String, _
					ByVal address2 As String, _
					ByVal city As String, _
					ByVal county As String, _
					ByVal stateCode As String, _
					ByVal zipCode As String, _
					ByVal homePhone As String, _
					ByVal workPhone As String, _
					ByVal fax As String, _
					ByVal email As String, _
					ByVal vin As String, _
					ByVal status As String, _
					ByVal plans As String, _
					ByVal totalCost As String, _
					ByVal totalTax As String, _
					ByVal source As String, _
					ByVal directConnect As String, _
					ByVal refNum As String, _
					ByVal leadArrival As String, _
					ByVal firstReply As String, _
					ByVal callBack As String, _
					ByVal commonReason As String, _
					ByVal vehicleValue As String, _
					ByVal callBackAgentId As String, _
					ByVal paymentPlan As String, _
					ByVal callback2 As System.AsyncCallback, _
					ByVal asyncState As Object) As System.IAsyncResult
			Return Me.BeginInvoke("Contract2", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, fixPayment, fixForPlans, balloonType, balloonAmount, pDaysOut, contractNumber, memberCode, ssn, firstName, middleName, lastName, birthdate, ssn2, firstName2, middleName2, lastName2, birthdate2, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, vin, status, plans, totalCost, totalTax, source, directConnect, refNum, leadArrival, firstReply, callBack, commonReason, vehicleValue, callBackAgentId, paymentPlan}, callback2, asyncState)
		End Function
        
        '''<remarks/>
        Public Function EndContract2(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Contract2Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal fixPayment As String,  _
                    ByVal fixForPlans As String,  _
                    ByVal balloonType As String,  _
                    ByVal balloonAmount As String,  _
                    ByVal pDaysOut As String,  _
                    ByVal contractNumber As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal birthdate As String,  _
                    ByVal ssn2 As String,  _
                    ByVal firstName2 As String,  _
                    ByVal middleName2 As String,  _
                    ByVal lastName2 As String,  _
                    ByVal birthdate2 As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal vin As String,  _
                    ByVal status As String,  _
                    ByVal plans As String,  _
                    ByVal totalCost As String,  _
                    ByVal totalTax As String,  _
                    ByVal source As String,  _
                    ByVal directConnect As String,  _
                    ByVal refNum As String,  _
                    ByVal leadArrival As String,  _
                    ByVal firstReply As String,  _
                    ByVal callBack As String,  _
                    ByVal commonReason As String,  _
                    ByVal vehicleValue As String,  _
                    ByVal callBackAgentId As String,  _
                    ByVal paymentPlan As String)
            Me.Contract2Async(login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, fixPayment, fixForPlans, balloonType, balloonAmount, pDaysOut, contractNumber, memberCode, ssn, firstName, middleName, lastName, birthdate, ssn2, firstName2, middleName2, lastName2, birthdate2, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, vin, status, plans, totalCost, totalTax, source, directConnect, refNum, leadArrival, firstReply, callBack, commonReason, vehicleValue, callBackAgentId, paymentPlan, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Contract2Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal fixPayment As String,  _
                    ByVal fixForPlans As String,  _
                    ByVal balloonType As String,  _
                    ByVal balloonAmount As String,  _
                    ByVal pDaysOut As String,  _
                    ByVal contractNumber As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal birthdate As String,  _
                    ByVal ssn2 As String,  _
                    ByVal firstName2 As String,  _
                    ByVal middleName2 As String,  _
                    ByVal lastName2 As String,  _
                    ByVal birthdate2 As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal vin As String,  _
                    ByVal status As String,  _
                    ByVal plans As String,  _
                    ByVal totalCost As String,  _
                    ByVal totalTax As String,  _
                    ByVal source As String,  _
                    ByVal directConnect As String,  _
                    ByVal refNum As String,  _
                    ByVal leadArrival As String,  _
                    ByVal firstReply As String,  _
                    ByVal callBack As String,  _
                    ByVal commonReason As String,  _
                    ByVal vehicleValue As String,  _
                    ByVal callBackAgentId As String,  _
                    ByVal paymentPlan As String,  _
                    ByVal userState As Object)
            If (Me.Contract2OperationCompleted Is Nothing) Then
                Me.Contract2OperationCompleted = AddressOf Me.OnContract2OperationCompleted
            End If
            Me.InvokeAsync("Contract2", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, fixPayment, fixForPlans, balloonType, balloonAmount, pDaysOut, contractNumber, memberCode, ssn, firstName, middleName, lastName, birthdate, ssn2, firstName2, middleName2, lastName2, birthdate2, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, vin, status, plans, totalCost, totalTax, source, directConnect, refNum, leadArrival, firstReply, callBack, commonReason, vehicleValue, callBackAgentId, paymentPlan}, Me.Contract2OperationCompleted, userState)
        End Sub
        
        Private Sub OnContract2OperationCompleted(ByVal arg As Object)
            If (Not (Me.Contract2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Contract2Completed(Me, New Contract2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Contract3", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Contract3( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal hullCode As String,  _
                    ByVal motorCode As String,  _
                    ByVal trailerCode As String,  _
                    ByVal vehicleType As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal allowWrap As String,  _
                    ByVal allowPT As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal fixPayment As String,  _
                    ByVal fixForPlans As String,  _
                    ByVal balloonType As String,  _
                    ByVal balloonAmount As String,  _
                    ByVal pDaysOut As String,  _
                    ByVal contractNumber As String,  _
                    ByVal memberCode As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal birthdate As String,  _
                    ByVal firstName2 As String,  _
                    ByVal middleName2 As String,  _
                    ByVal lastName2 As String,  _
                    ByVal birthdate2 As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal vin As String,  _
                    ByVal status As String,  _
                    ByVal plans As String,  _
                    ByVal totalCost As String,  _
                    ByVal totalTax As String,  _
                    ByVal source As String,  _
                    ByVal directConnect As String,  _
                    ByVal refNum As String,  _
                    ByVal leadArrival As String,  _
                    ByVal firstReply As String,  _
                    ByVal callBack As String,  _
                    ByVal callBackTime As String,  _
                    ByVal commonReason As String,  _
                    ByVal vehicleValue As String,  _
                    ByVal callBackAgentId As String,  _
                    ByVal paymentPlan As String,  _
                    ByVal inspectionStatus As String,  _
                    ByVal inspectionDate As String,  _
                    ByVal clickThruId As String,  _
                    ByVal openingAgentId As String,  _
                    ByVal loanId As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Contract3", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, hullCode, motorCode, trailerCode, vehicleType, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, allowWrap, allowPT, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, fixPayment, fixForPlans, balloonType, balloonAmount, pDaysOut, contractNumber, memberCode, firstName, middleName, lastName, birthdate, firstName2, middleName2, lastName2, birthdate2, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, vin, status, plans, totalCost, totalTax, source, directConnect, refNum, leadArrival, firstReply, callBack, callBackTime, commonReason, vehicleValue, callBackAgentId, paymentPlan, inspectionStatus, inspectionDate, clickThruId, openingAgentId, loanId})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
		Public Function BeginContract3( _
					ByVal login As String, _
					ByVal password As String, _
					ByVal agencyCodingType As String, _
					ByVal agencyCode As String, _
					ByVal vehicleCodingType As String, _
					ByVal vehicleCode As String, _
					ByVal hullCode As String, _
					ByVal motorCode As String, _
					ByVal trailerCode As String, _
					ByVal vehicleType As String, _
					ByVal newUsed As String, _
					ByVal inServiceDate As String, _
					ByVal issueDate As String, _
					ByVal issueMiles As String, _
					ByVal milesPerYear As String, _
					ByVal replacementDate As String, _
					ByVal replacementMiles As String, _
					ByVal transmission As String, _
					ByVal usage As String, _
					ByVal allowWrap As String, _
					ByVal allowPT As String, _
					ByVal taxRate As String, _
					ByVal taxZipCode As String, _
					ByVal loanAmount As String, _
					ByVal loanAPR As String, _
					ByVal pPerTerm As String, _
					ByVal pPerYear As String, _
					ByVal fixPayment As String, _
					ByVal fixForPlans As String, _
					ByVal balloonType As String, _
					ByVal balloonAmount As String, _
					ByVal pDaysOut As String, _
					ByVal contractNumber As String, _
					ByVal memberCode As String, _
					ByVal firstName As String, _
					ByVal middleName As String, _
					ByVal lastName As String, _
					ByVal birthdate As String, _
					ByVal firstName2 As String, _
					ByVal middleName2 As String, _
					ByVal lastName2 As String, _
					ByVal birthdate2 As String, _
					ByVal address1 As String, _
					ByVal address2 As String, _
					ByVal city As String, _
					ByVal county As String, _
					ByVal stateCode As String, _
					ByVal zipCode As String, _
					ByVal homePhone As String, _
					ByVal workPhone As String, _
					ByVal fax As String, _
					ByVal email As String, _
					ByVal vin As String, _
					ByVal status As String, _
					ByVal plans As String, _
					ByVal totalCost As String, _
					ByVal totalTax As String, _
					ByVal source As String, _
					ByVal directConnect As String, _
					ByVal refNum As String, _
					ByVal leadArrival As String, _
					ByVal firstReply As String, _
					ByVal callBack As String, _
					ByVal callBackTime As String, _
					ByVal commonReason As String, _
					ByVal vehicleValue As String, _
					ByVal callBackAgentId As String, _
					ByVal paymentPlan As String, _
					ByVal inspectionStatus As String, _
					ByVal inspectionDate As String, _
					ByVal clickThruId As String, _
					ByVal openingAgentId As String, _
					ByVal loanId As String, _
					ByVal callback2 As System.AsyncCallback, _
					ByVal asyncState As Object) As System.IAsyncResult
			Return Me.BeginInvoke("Contract3", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, hullCode, motorCode, trailerCode, vehicleType, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, allowWrap, allowPT, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, fixPayment, fixForPlans, balloonType, balloonAmount, pDaysOut, contractNumber, memberCode, firstName, middleName, lastName, birthdate, firstName2, middleName2, lastName2, birthdate2, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, vin, status, plans, totalCost, totalTax, source, directConnect, refNum, leadArrival, firstReply, callBack, callBackTime, commonReason, vehicleValue, callBackAgentId, paymentPlan, inspectionStatus, inspectionDate, clickThruId, openingAgentId, loanId}, callback2, asyncState)
		End Function
        
        '''<remarks/>
        Public Function EndContract3(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Contract3Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal hullCode As String,  _
                    ByVal motorCode As String,  _
                    ByVal trailerCode As String,  _
                    ByVal vehicleType As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal allowWrap As String,  _
                    ByVal allowPT As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal fixPayment As String,  _
                    ByVal fixForPlans As String,  _
                    ByVal balloonType As String,  _
                    ByVal balloonAmount As String,  _
                    ByVal pDaysOut As String,  _
                    ByVal contractNumber As String,  _
                    ByVal memberCode As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal birthdate As String,  _
                    ByVal firstName2 As String,  _
                    ByVal middleName2 As String,  _
                    ByVal lastName2 As String,  _
                    ByVal birthdate2 As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal vin As String,  _
                    ByVal status As String,  _
                    ByVal plans As String,  _
                    ByVal totalCost As String,  _
                    ByVal totalTax As String,  _
                    ByVal source As String,  _
                    ByVal directConnect As String,  _
                    ByVal refNum As String,  _
                    ByVal leadArrival As String,  _
                    ByVal firstReply As String,  _
                    ByVal callBack As String,  _
                    ByVal callBackTime As String,  _
                    ByVal commonReason As String,  _
                    ByVal vehicleValue As String,  _
                    ByVal callBackAgentId As String,  _
                    ByVal paymentPlan As String,  _
                    ByVal inspectionStatus As String,  _
                    ByVal inspectionDate As String,  _
                    ByVal clickThruId As String,  _
                    ByVal openingAgentId As String,  _
                    ByVal loanId As String)
            Me.Contract3Async(login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, hullCode, motorCode, trailerCode, vehicleType, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, allowWrap, allowPT, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, fixPayment, fixForPlans, balloonType, balloonAmount, pDaysOut, contractNumber, memberCode, firstName, middleName, lastName, birthdate, firstName2, middleName2, lastName2, birthdate2, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, vin, status, plans, totalCost, totalTax, source, directConnect, refNum, leadArrival, firstReply, callBack, callBackTime, commonReason, vehicleValue, callBackAgentId, paymentPlan, inspectionStatus, inspectionDate, clickThruId, openingAgentId, loanId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Contract3Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal hullCode As String,  _
                    ByVal motorCode As String,  _
                    ByVal trailerCode As String,  _
                    ByVal vehicleType As String,  _
                    ByVal newUsed As String,  _
                    ByVal inServiceDate As String,  _
                    ByVal issueDate As String,  _
                    ByVal issueMiles As String,  _
                    ByVal milesPerYear As String,  _
                    ByVal replacementDate As String,  _
                    ByVal replacementMiles As String,  _
                    ByVal transmission As String,  _
                    ByVal usage As String,  _
                    ByVal allowWrap As String,  _
                    ByVal allowPT As String,  _
                    ByVal taxRate As String,  _
                    ByVal taxZipCode As String,  _
                    ByVal loanAmount As String,  _
                    ByVal loanAPR As String,  _
                    ByVal pPerTerm As String,  _
                    ByVal pPerYear As String,  _
                    ByVal fixPayment As String,  _
                    ByVal fixForPlans As String,  _
                    ByVal balloonType As String,  _
                    ByVal balloonAmount As String,  _
                    ByVal pDaysOut As String,  _
                    ByVal contractNumber As String,  _
                    ByVal memberCode As String,  _
                    ByVal firstName As String,  _
                    ByVal middleName As String,  _
                    ByVal lastName As String,  _
                    ByVal birthdate As String,  _
                    ByVal firstName2 As String,  _
                    ByVal middleName2 As String,  _
                    ByVal lastName2 As String,  _
                    ByVal birthdate2 As String,  _
                    ByVal address1 As String,  _
                    ByVal address2 As String,  _
                    ByVal city As String,  _
                    ByVal county As String,  _
                    ByVal stateCode As String,  _
                    ByVal zipCode As String,  _
                    ByVal homePhone As String,  _
                    ByVal workPhone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal vin As String,  _
                    ByVal status As String,  _
                    ByVal plans As String,  _
                    ByVal totalCost As String,  _
                    ByVal totalTax As String,  _
                    ByVal source As String,  _
                    ByVal directConnect As String,  _
                    ByVal refNum As String,  _
                    ByVal leadArrival As String,  _
                    ByVal firstReply As String,  _
                    ByVal callBack As String,  _
                    ByVal callBackTime As String,  _
                    ByVal commonReason As String,  _
                    ByVal vehicleValue As String,  _
                    ByVal callBackAgentId As String,  _
                    ByVal paymentPlan As String,  _
                    ByVal inspectionStatus As String,  _
                    ByVal inspectionDate As String,  _
                    ByVal clickThruId As String,  _
                    ByVal openingAgentId As String,  _
                    ByVal loanId As String,  _
                    ByVal userState As Object)
            If (Me.Contract3OperationCompleted Is Nothing) Then
                Me.Contract3OperationCompleted = AddressOf Me.OnContract3OperationCompleted
            End If
            Me.InvokeAsync("Contract3", New Object() {login, password, agencyCodingType, agencyCode, vehicleCodingType, vehicleCode, hullCode, motorCode, trailerCode, vehicleType, newUsed, inServiceDate, issueDate, issueMiles, milesPerYear, replacementDate, replacementMiles, transmission, usage, allowWrap, allowPT, taxRate, taxZipCode, loanAmount, loanAPR, pPerTerm, pPerYear, fixPayment, fixForPlans, balloonType, balloonAmount, pDaysOut, contractNumber, memberCode, firstName, middleName, lastName, birthdate, firstName2, middleName2, lastName2, birthdate2, address1, address2, city, county, stateCode, zipCode, homePhone, workPhone, fax, email, vin, status, plans, totalCost, totalTax, source, directConnect, refNum, leadArrival, firstReply, callBack, callBackTime, commonReason, vehicleValue, callBackAgentId, paymentPlan, inspectionStatus, inspectionDate, clickThruId, openingAgentId, loanId}, Me.Contract3OperationCompleted, userState)
        End Sub
        
        Private Sub OnContract3OperationCompleted(ByVal arg As Object)
            If (Not (Me.Contract3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Contract3Completed(Me, New Contract3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Loans", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Loans(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal loanId As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Loans", New Object() {login, password, agencyCodingType, agencyCode, loanId})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginLoans(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal loanId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Loans", New Object() {login, password, agencyCodingType, agencyCode, loanId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLoans(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoansAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal loanId As String)
            Me.LoansAsync(login, password, agencyCodingType, agencyCode, loanId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoansAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal loanId As String, ByVal userState As Object)
            If (Me.LoansOperationCompleted Is Nothing) Then
                Me.LoansOperationCompleted = AddressOf Me.OnLoansOperationCompleted
            End If
            Me.InvokeAsync("Loans", New Object() {login, password, agencyCodingType, agencyCode, loanId}, Me.LoansOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoansOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoansCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoansCompleted(Me, New LoansCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Contracts", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Contracts( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal includeSubAgencies As String,  _
                    ByVal openingAgentCode As String,  _
                    ByVal closingAgentCode As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal lastName As String,  _
                    ByVal phone As String,  _
                    ByVal email As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal vin As String,  _
                    ByVal contractNumber As String,  _
                    ByVal dateStart As String,  _
                    ByVal dateEnd As String,  _
                    ByVal batchNumber1 As String,  _
                    ByVal batchNumber2 As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Contracts", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, openingAgentCode, closingAgentCode, memberCode, ssn, lastName, phone, email, vehicleCodingType, vehicleCode, vin, contractNumber, dateStart, dateEnd, batchNumber1, batchNumber2})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginContracts( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal includeSubAgencies As String,  _
                    ByVal openingAgentCode As String,  _
                    ByVal closingAgentCode As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal lastName As String,  _
                    ByVal phone As String,  _
                    ByVal email As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal vin As String,  _
                    ByVal contractNumber As String,  _
                    ByVal dateStart As String,  _
                    ByVal dateEnd As String,  _
                    ByVal batchNumber1 As String,  _
                    ByVal batchNumber2 As String,  _
                    ByVal callback As System.AsyncCallback,  _
                    ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Contracts", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, openingAgentCode, closingAgentCode, memberCode, ssn, lastName, phone, email, vehicleCodingType, vehicleCode, vin, contractNumber, dateStart, dateEnd, batchNumber1, batchNumber2}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndContracts(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ContractsAsync( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal includeSubAgencies As String,  _
                    ByVal openingAgentCode As String,  _
                    ByVal closingAgentCode As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal lastName As String,  _
                    ByVal phone As String,  _
                    ByVal email As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal vin As String,  _
                    ByVal contractNumber As String,  _
                    ByVal dateStart As String,  _
                    ByVal dateEnd As String,  _
                    ByVal batchNumber1 As String,  _
                    ByVal batchNumber2 As String)
            Me.ContractsAsync(login, password, agencyCodingType, agencyCode, includeSubAgencies, openingAgentCode, closingAgentCode, memberCode, ssn, lastName, phone, email, vehicleCodingType, vehicleCode, vin, contractNumber, dateStart, dateEnd, batchNumber1, batchNumber2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ContractsAsync( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal includeSubAgencies As String,  _
                    ByVal openingAgentCode As String,  _
                    ByVal closingAgentCode As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal lastName As String,  _
                    ByVal phone As String,  _
                    ByVal email As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal vin As String,  _
                    ByVal contractNumber As String,  _
                    ByVal dateStart As String,  _
                    ByVal dateEnd As String,  _
                    ByVal batchNumber1 As String,  _
                    ByVal batchNumber2 As String,  _
                    ByVal userState As Object)
            If (Me.ContractsOperationCompleted Is Nothing) Then
                Me.ContractsOperationCompleted = AddressOf Me.OnContractsOperationCompleted
            End If
            Me.InvokeAsync("Contracts", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, openingAgentCode, closingAgentCode, memberCode, ssn, lastName, phone, email, vehicleCodingType, vehicleCode, vin, contractNumber, dateStart, dateEnd, batchNumber1, batchNumber2}, Me.ContractsOperationCompleted, userState)
        End Sub
        
        Private Sub OnContractsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ContractsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ContractsCompleted(Me, New ContractsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Contracts2", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Contracts2( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal includeSubAgencies As String,  _
                    ByVal openingAgentCode As String,  _
                    ByVal closingAgentCode As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal lastName As String,  _
                    ByVal phone As String,  _
                    ByVal email As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal vin As String,  _
                    ByVal contractNumber As String,  _
                    ByVal dateStart As String,  _
                    ByVal dateEnd As String,  _
                    ByVal batchNumber1 As String,  _
                    ByVal batchNumber2 As String,  _
                    ByVal status As String,  _
                    ByVal callBack As String,  _
                    ByVal maxCount As String,  _
                    ByVal callBackAgentId As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Contracts2", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, openingAgentCode, closingAgentCode, memberCode, ssn, lastName, phone, email, vehicleCodingType, vehicleCode, vin, contractNumber, dateStart, dateEnd, batchNumber1, batchNumber2, status, callBack, maxCount, callBackAgentId})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
		Public Function BeginContracts2( _
					ByVal login As String, _
					ByVal password As String, _
					ByVal agencyCodingType As String, _
					ByVal agencyCode As String, _
					ByVal includeSubAgencies As String, _
					ByVal openingAgentCode As String, _
					ByVal closingAgentCode As String, _
					ByVal memberCode As String, _
					ByVal ssn As String, _
					ByVal lastName As String, _
					ByVal phone As String, _
					ByVal email As String, _
					ByVal vehicleCodingType As String, _
					ByVal vehicleCode As String, _
					ByVal vin As String, _
					ByVal contractNumber As String, _
					ByVal dateStart As String, _
					ByVal dateEnd As String, _
					ByVal batchNumber1 As String, _
					ByVal batchNumber2 As String, _
					ByVal status As String, _
					ByVal callBack As String, _
					ByVal maxCount As String, _
					ByVal callBackAgentId As String, _
					ByVal callback2 As System.AsyncCallback, _
					ByVal asyncState As Object) As System.IAsyncResult
			Return Me.BeginInvoke("Contracts2", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, openingAgentCode, closingAgentCode, memberCode, ssn, lastName, phone, email, vehicleCodingType, vehicleCode, vin, contractNumber, dateStart, dateEnd, batchNumber1, batchNumber2, status, callBack, maxCount, callBackAgentId}, callback2, asyncState)
		End Function
        
        '''<remarks/>
        Public Function EndContracts2(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Contracts2Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal includeSubAgencies As String,  _
                    ByVal openingAgentCode As String,  _
                    ByVal closingAgentCode As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal lastName As String,  _
                    ByVal phone As String,  _
                    ByVal email As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal vin As String,  _
                    ByVal contractNumber As String,  _
                    ByVal dateStart As String,  _
                    ByVal dateEnd As String,  _
                    ByVal batchNumber1 As String,  _
                    ByVal batchNumber2 As String,  _
                    ByVal status As String,  _
                    ByVal callBack As String,  _
                    ByVal maxCount As String,  _
                    ByVal callBackAgentId As String)
            Me.Contracts2Async(login, password, agencyCodingType, agencyCode, includeSubAgencies, openingAgentCode, closingAgentCode, memberCode, ssn, lastName, phone, email, vehicleCodingType, vehicleCode, vin, contractNumber, dateStart, dateEnd, batchNumber1, batchNumber2, status, callBack, maxCount, callBackAgentId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Contracts2Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal includeSubAgencies As String,  _
                    ByVal openingAgentCode As String,  _
                    ByVal closingAgentCode As String,  _
                    ByVal memberCode As String,  _
                    ByVal ssn As String,  _
                    ByVal lastName As String,  _
                    ByVal phone As String,  _
                    ByVal email As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal vin As String,  _
                    ByVal contractNumber As String,  _
                    ByVal dateStart As String,  _
                    ByVal dateEnd As String,  _
                    ByVal batchNumber1 As String,  _
                    ByVal batchNumber2 As String,  _
                    ByVal status As String,  _
                    ByVal callBack As String,  _
                    ByVal maxCount As String,  _
                    ByVal callBackAgentId As String,  _
                    ByVal userState As Object)
            If (Me.Contracts2OperationCompleted Is Nothing) Then
                Me.Contracts2OperationCompleted = AddressOf Me.OnContracts2OperationCompleted
            End If
            Me.InvokeAsync("Contracts2", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, openingAgentCode, closingAgentCode, memberCode, ssn, lastName, phone, email, vehicleCodingType, vehicleCode, vin, contractNumber, dateStart, dateEnd, batchNumber1, batchNumber2, status, callBack, maxCount, callBackAgentId}, Me.Contracts2OperationCompleted, userState)
        End Sub
        
        Private Sub OnContracts2OperationCompleted(ByVal arg As Object)
            If (Not (Me.Contracts2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Contracts2Completed(Me, New Contracts2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Contracts3", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Contracts3( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal includeSubAgencies As String,  _
                    ByVal includeSharingSiblings As String,  _
                    ByVal includeUnsavedClickThrus As String,  _
                    ByVal clickThruId As String,  _
                    ByVal bannerCode As String,  _
                    ByVal openingAgentCode As String,  _
                    ByVal closingAgentCode As String,  _
                    ByVal memberCode As String,  _
                    ByVal firstName As String,  _
                    ByVal lastName As String,  _
                    ByVal phone As String,  _
                    ByVal email As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal vin As String,  _
                    ByVal contractNumber As String,  _
                    ByVal dateType As String,  _
                    ByVal dateStart As String,  _
                    ByVal dateEnd As String,  _
                    ByVal batchNumber1 As String,  _
                    ByVal batchNumber2 As String,  _
                    ByVal batchNumber3 As String,  _
                    ByVal status As String,  _
                    ByVal callBack As String,  _
                    ByVal callBackTime As String,  _
                    ByVal maxCount As String,  _
                    ByVal callBackAgentId As String,  _
                    ByVal directConnect As String,  _
                    ByVal contractType As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Contracts3", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, includeSharingSiblings, includeUnsavedClickThrus, clickThruId, bannerCode, openingAgentCode, closingAgentCode, memberCode, firstName, lastName, phone, email, vehicleCodingType, vehicleCode, vin, contractNumber, dateType, dateStart, dateEnd, batchNumber1, batchNumber2, batchNumber3, status, callBack, callBackTime, maxCount, callBackAgentId, directConnect, contractType})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
		Public Function BeginContracts3( _
					ByVal login As String, _
					ByVal password As String, _
					ByVal agencyCodingType As String, _
					ByVal agencyCode As String, _
					ByVal includeSubAgencies As String, _
					ByVal includeSharingSiblings As String, _
					ByVal includeUnsavedClickThrus As String, _
					ByVal clickThruId As String, _
					ByVal bannerCode As String, _
					ByVal openingAgentCode As String, _
					ByVal closingAgentCode As String, _
					ByVal memberCode As String, _
					ByVal firstName As String, _
					ByVal lastName As String, _
					ByVal phone As String, _
					ByVal email As String, _
					ByVal vehicleCodingType As String, _
					ByVal vehicleCode As String, _
					ByVal vin As String, _
					ByVal contractNumber As String, _
					ByVal dateType As String, _
					ByVal dateStart As String, _
					ByVal dateEnd As String, _
					ByVal batchNumber1 As String, _
					ByVal batchNumber2 As String, _
					ByVal batchNumber3 As String, _
					ByVal status As String, _
					ByVal callBack As String, _
					ByVal callBackTime As String, _
					ByVal maxCount As String, _
					ByVal callBackAgentId As String, _
					ByVal directConnect As String, _
					ByVal contractType As String, _
					ByVal callback2 As System.AsyncCallback, _
					ByVal asyncState As Object) As System.IAsyncResult
			Return Me.BeginInvoke("Contracts3", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, includeSharingSiblings, includeUnsavedClickThrus, clickThruId, bannerCode, openingAgentCode, closingAgentCode, memberCode, firstName, lastName, phone, email, vehicleCodingType, vehicleCode, vin, contractNumber, dateType, dateStart, dateEnd, batchNumber1, batchNumber2, batchNumber3, status, callBack, callBackTime, maxCount, callBackAgentId, directConnect, contractType}, callback2, asyncState)
		End Function
        
        '''<remarks/>
        Public Function EndContracts3(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub Contracts3Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal includeSubAgencies As String,  _
                    ByVal includeSharingSiblings As String,  _
                    ByVal includeUnsavedClickThrus As String,  _
                    ByVal clickThruId As String,  _
                    ByVal bannerCode As String,  _
                    ByVal openingAgentCode As String,  _
                    ByVal closingAgentCode As String,  _
                    ByVal memberCode As String,  _
                    ByVal firstName As String,  _
                    ByVal lastName As String,  _
                    ByVal phone As String,  _
                    ByVal email As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal vin As String,  _
                    ByVal contractNumber As String,  _
                    ByVal dateType As String,  _
                    ByVal dateStart As String,  _
                    ByVal dateEnd As String,  _
                    ByVal batchNumber1 As String,  _
                    ByVal batchNumber2 As String,  _
                    ByVal batchNumber3 As String,  _
                    ByVal status As String,  _
                    ByVal callBack As String,  _
                    ByVal callBackTime As String,  _
                    ByVal maxCount As String,  _
                    ByVal callBackAgentId As String,  _
                    ByVal directConnect As String,  _
                    ByVal contractType As String)
            Me.Contracts3Async(login, password, agencyCodingType, agencyCode, includeSubAgencies, includeSharingSiblings, includeUnsavedClickThrus, clickThruId, bannerCode, openingAgentCode, closingAgentCode, memberCode, firstName, lastName, phone, email, vehicleCodingType, vehicleCode, vin, contractNumber, dateType, dateStart, dateEnd, batchNumber1, batchNumber2, batchNumber3, status, callBack, callBackTime, maxCount, callBackAgentId, directConnect, contractType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Contracts3Async( _
                    ByVal login As String,  _
                    ByVal password As String,  _
                    ByVal agencyCodingType As String,  _
                    ByVal agencyCode As String,  _
                    ByVal includeSubAgencies As String,  _
                    ByVal includeSharingSiblings As String,  _
                    ByVal includeUnsavedClickThrus As String,  _
                    ByVal clickThruId As String,  _
                    ByVal bannerCode As String,  _
                    ByVal openingAgentCode As String,  _
                    ByVal closingAgentCode As String,  _
                    ByVal memberCode As String,  _
                    ByVal firstName As String,  _
                    ByVal lastName As String,  _
                    ByVal phone As String,  _
                    ByVal email As String,  _
                    ByVal vehicleCodingType As String,  _
                    ByVal vehicleCode As String,  _
                    ByVal vin As String,  _
                    ByVal contractNumber As String,  _
                    ByVal dateType As String,  _
                    ByVal dateStart As String,  _
                    ByVal dateEnd As String,  _
                    ByVal batchNumber1 As String,  _
                    ByVal batchNumber2 As String,  _
                    ByVal batchNumber3 As String,  _
                    ByVal status As String,  _
                    ByVal callBack As String,  _
                    ByVal callBackTime As String,  _
                    ByVal maxCount As String,  _
                    ByVal callBackAgentId As String,  _
                    ByVal directConnect As String,  _
                    ByVal contractType As String,  _
                    ByVal userState As Object)
            If (Me.Contracts3OperationCompleted Is Nothing) Then
                Me.Contracts3OperationCompleted = AddressOf Me.OnContracts3OperationCompleted
            End If
            Me.InvokeAsync("Contracts3", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, includeSharingSiblings, includeUnsavedClickThrus, clickThruId, bannerCode, openingAgentCode, closingAgentCode, memberCode, firstName, lastName, phone, email, vehicleCodingType, vehicleCode, vin, contractNumber, dateType, dateStart, dateEnd, batchNumber1, batchNumber2, batchNumber3, status, callBack, callBackTime, maxCount, callBackAgentId, directConnect, contractType}, Me.Contracts3OperationCompleted, userState)
        End Sub
        
        Private Sub OnContracts3OperationCompleted(ByVal arg As Object)
            If (Not (Me.Contracts3CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Contracts3Completed(Me, New Contracts3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/DeleteContract", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteContract(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal oldOwnerCode As String, ByVal newOwnerCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("DeleteContract", New Object() {login, password, agencyCodingType, agencyCode, oldOwnerCode, newOwnerCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteContract(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal oldOwnerCode As String, ByVal newOwnerCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteContract", New Object() {login, password, agencyCodingType, agencyCode, oldOwnerCode, newOwnerCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteContract(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteContractAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal oldOwnerCode As String, ByVal newOwnerCode As String)
            Me.DeleteContractAsync(login, password, agencyCodingType, agencyCode, oldOwnerCode, newOwnerCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteContractAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal oldOwnerCode As String, ByVal newOwnerCode As String, ByVal userState As Object)
            If (Me.DeleteContractOperationCompleted Is Nothing) Then
                Me.DeleteContractOperationCompleted = AddressOf Me.OnDeleteContractOperationCompleted
            End If
            Me.InvokeAsync("DeleteContract", New Object() {login, password, agencyCodingType, agencyCode, oldOwnerCode, newOwnerCode}, Me.DeleteContractOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteContractOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteContractCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteContractCompleted(Me, New DeleteContractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/ContractStatus", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ContractStatus(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal status As String, ByVal contractNumbers As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("ContractStatus", New Object() {login, password, agencyCodingType, agencyCode, status, contractNumbers})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginContractStatus(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal status As String, ByVal contractNumbers As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ContractStatus", New Object() {login, password, agencyCodingType, agencyCode, status, contractNumbers}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndContractStatus(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ContractStatusAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal status As String, ByVal contractNumbers As String)
            Me.ContractStatusAsync(login, password, agencyCodingType, agencyCode, status, contractNumbers, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ContractStatusAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal status As String, ByVal contractNumbers As String, ByVal userState As Object)
            If (Me.ContractStatusOperationCompleted Is Nothing) Then
                Me.ContractStatusOperationCompleted = AddressOf Me.OnContractStatusOperationCompleted
            End If
            Me.InvokeAsync("ContractStatus", New Object() {login, password, agencyCodingType, agencyCode, status, contractNumbers}, Me.ContractStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnContractStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.ContractStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ContractStatusCompleted(Me, New ContractStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/ClearCalls", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ClearCalls(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal includeSubAgencies As String, ByVal includeSharingSiblings As String, ByVal clearDate As String, ByVal status As String, ByVal callBackAgentId As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("ClearCalls", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, includeSharingSiblings, clearDate, status, callBackAgentId})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginClearCalls(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal includeSubAgencies As String, ByVal includeSharingSiblings As String, ByVal clearDate As String, ByVal status As String, ByVal callBackAgentId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ClearCalls", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, includeSharingSiblings, clearDate, status, callBackAgentId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndClearCalls(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ClearCallsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal includeSubAgencies As String, ByVal includeSharingSiblings As String, ByVal clearDate As String, ByVal status As String, ByVal callBackAgentId As String)
            Me.ClearCallsAsync(login, password, agencyCodingType, agencyCode, includeSubAgencies, includeSharingSiblings, clearDate, status, callBackAgentId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClearCallsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal includeSubAgencies As String, ByVal includeSharingSiblings As String, ByVal clearDate As String, ByVal status As String, ByVal callBackAgentId As String, ByVal userState As Object)
            If (Me.ClearCallsOperationCompleted Is Nothing) Then
                Me.ClearCallsOperationCompleted = AddressOf Me.OnClearCallsOperationCompleted
            End If
            Me.InvokeAsync("ClearCalls", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, includeSharingSiblings, clearDate, status, callBackAgentId}, Me.ClearCallsOperationCompleted, userState)
        End Sub
        
        Private Sub OnClearCallsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ClearCallsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ClearCallsCompleted(Me, New ClearCallsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/CommonReasons", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CommonReasons(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("CommonReasons", New Object() {login, password, agencyCodingType, agencyCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginCommonReasons(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CommonReasons", New Object() {login, password, agencyCodingType, agencyCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCommonReasons(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CommonReasonsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String)
            Me.CommonReasonsAsync(login, password, agencyCodingType, agencyCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CommonReasonsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal userState As Object)
            If (Me.CommonReasonsOperationCompleted Is Nothing) Then
                Me.CommonReasonsOperationCompleted = AddressOf Me.OnCommonReasonsOperationCompleted
            End If
            Me.InvokeAsync("CommonReasons", New Object() {login, password, agencyCodingType, agencyCode}, Me.CommonReasonsOperationCompleted, userState)
        End Sub
        
        Private Sub OnCommonReasonsOperationCompleted(ByVal arg As Object)
            If (Not (Me.CommonReasonsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CommonReasonsCompleted(Me, New CommonReasonsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/CommonReason", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CommonReason(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal code As String, ByVal reason As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("CommonReason", New Object() {login, password, agencyCodingType, agencyCode, code, reason})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginCommonReason(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal code As String, ByVal reason As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CommonReason", New Object() {login, password, agencyCodingType, agencyCode, code, reason}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCommonReason(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CommonReasonAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal code As String, ByVal reason As String)
            Me.CommonReasonAsync(login, password, agencyCodingType, agencyCode, code, reason, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CommonReasonAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal code As String, ByVal reason As String, ByVal userState As Object)
            If (Me.CommonReasonOperationCompleted Is Nothing) Then
                Me.CommonReasonOperationCompleted = AddressOf Me.OnCommonReasonOperationCompleted
            End If
            Me.InvokeAsync("CommonReason", New Object() {login, password, agencyCodingType, agencyCode, code, reason}, Me.CommonReasonOperationCompleted, userState)
        End Sub
        
        Private Sub OnCommonReasonOperationCompleted(ByVal arg As Object)
            If (Not (Me.CommonReasonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CommonReasonCompleted(Me, New CommonReasonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/MarketingBlurbs", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MarketingBlurbs(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("MarketingBlurbs", New Object() {login, password, agencyCodingType, agencyCode})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginMarketingBlurbs(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("MarketingBlurbs", New Object() {login, password, agencyCodingType, agencyCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndMarketingBlurbs(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MarketingBlurbsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String)
            Me.MarketingBlurbsAsync(login, password, agencyCodingType, agencyCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MarketingBlurbsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal userState As Object)
            If (Me.MarketingBlurbsOperationCompleted Is Nothing) Then
                Me.MarketingBlurbsOperationCompleted = AddressOf Me.OnMarketingBlurbsOperationCompleted
            End If
            Me.InvokeAsync("MarketingBlurbs", New Object() {login, password, agencyCodingType, agencyCode}, Me.MarketingBlurbsOperationCompleted, userState)
        End Sub
        
        Private Sub OnMarketingBlurbsOperationCompleted(ByVal arg As Object)
            If (Not (Me.MarketingBlurbsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MarketingBlurbsCompleted(Me, New MarketingBlurbsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/MarketingBlurb", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function MarketingBlurb(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal marketingId As String, ByVal marketingHtml As String, ByVal active As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("MarketingBlurb", New Object() {login, password, agencyCodingType, agencyCode, marketingId, marketingHtml, active})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginMarketingBlurb(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal marketingId As String, ByVal marketingHtml As String, ByVal active As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("MarketingBlurb", New Object() {login, password, agencyCodingType, agencyCode, marketingId, marketingHtml, active}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndMarketingBlurb(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub MarketingBlurbAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal marketingId As String, ByVal marketingHtml As String, ByVal active As String)
            Me.MarketingBlurbAsync(login, password, agencyCodingType, agencyCode, marketingId, marketingHtml, active, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub MarketingBlurbAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal marketingId As String, ByVal marketingHtml As String, ByVal active As String, ByVal userState As Object)
            If (Me.MarketingBlurbOperationCompleted Is Nothing) Then
                Me.MarketingBlurbOperationCompleted = AddressOf Me.OnMarketingBlurbOperationCompleted
            End If
            Me.InvokeAsync("MarketingBlurb", New Object() {login, password, agencyCodingType, agencyCode, marketingId, marketingHtml, active}, Me.MarketingBlurbOperationCompleted, userState)
        End Sub
        
        Private Sub OnMarketingBlurbOperationCompleted(ByVal arg As Object)
            If (Not (Me.MarketingBlurbCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent MarketingBlurbCompleted(Me, New MarketingBlurbCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/AssignLeads", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AssignLeads(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal includeSubAgencies As String, ByVal includeSharingSiblings As String, ByVal callbackAgentId As String, ByVal unassignLeads As String, ByVal leadCount As String, ByVal statusFilter As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("AssignLeads", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, includeSharingSiblings, callbackAgentId, unassignLeads, leadCount, statusFilter})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginAssignLeads(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal includeSubAgencies As String, ByVal includeSharingSiblings As String, ByVal callbackAgentId As String, ByVal unassignLeads As String, ByVal leadCount As String, ByVal statusFilter As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AssignLeads", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, includeSharingSiblings, callbackAgentId, unassignLeads, leadCount, statusFilter}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAssignLeads(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AssignLeadsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal includeSubAgencies As String, ByVal includeSharingSiblings As String, ByVal callbackAgentId As String, ByVal unassignLeads As String, ByVal leadCount As String, ByVal statusFilter As String)
            Me.AssignLeadsAsync(login, password, agencyCodingType, agencyCode, includeSubAgencies, includeSharingSiblings, callbackAgentId, unassignLeads, leadCount, statusFilter, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AssignLeadsAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal includeSubAgencies As String, ByVal includeSharingSiblings As String, ByVal callbackAgentId As String, ByVal unassignLeads As String, ByVal leadCount As String, ByVal statusFilter As String, ByVal userState As Object)
            If (Me.AssignLeadsOperationCompleted Is Nothing) Then
                Me.AssignLeadsOperationCompleted = AddressOf Me.OnAssignLeadsOperationCompleted
            End If
            Me.InvokeAsync("AssignLeads", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, includeSharingSiblings, callbackAgentId, unassignLeads, leadCount, statusFilter}, Me.AssignLeadsOperationCompleted, userState)
        End Sub
        
        Private Sub OnAssignLeadsOperationCompleted(ByVal arg As Object)
            If (Not (Me.AssignLeadsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AssignLeadsCompleted(Me, New AssignLeadsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Note", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Note(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal ownerCodingType As String, ByVal ownerCode As String, ByVal noteText As String, ByVal quoteId As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Note", New Object() {login, password, agencyCodingType, agencyCode, ownerCodingType, ownerCode, noteText, quoteId})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginNote(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal ownerCodingType As String, ByVal ownerCode As String, ByVal noteText As String, ByVal quoteId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Note", New Object() {login, password, agencyCodingType, agencyCode, ownerCodingType, ownerCode, noteText, quoteId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNote(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NoteAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal ownerCodingType As String, ByVal ownerCode As String, ByVal noteText As String, ByVal quoteId As String)
            Me.NoteAsync(login, password, agencyCodingType, agencyCode, ownerCodingType, ownerCode, noteText, quoteId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NoteAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal ownerCodingType As String, ByVal ownerCode As String, ByVal noteText As String, ByVal quoteId As String, ByVal userState As Object)
            If (Me.NoteOperationCompleted Is Nothing) Then
                Me.NoteOperationCompleted = AddressOf Me.OnNoteOperationCompleted
            End If
            Me.InvokeAsync("Note", New Object() {login, password, agencyCodingType, agencyCode, ownerCodingType, ownerCode, noteText, quoteId}, Me.NoteOperationCompleted, userState)
        End Sub
        
        Private Sub OnNoteOperationCompleted(ByVal arg As Object)
            If (Not (Me.NoteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NoteCompleted(Me, New NoteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Notes", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Notes(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal quoteId As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Notes", New Object() {login, password, agencyCodingType, agencyCode, quoteId})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginNotes(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal quoteId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Notes", New Object() {login, password, agencyCodingType, agencyCode, quoteId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndNotes(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub NotesAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal quoteId As String)
            Me.NotesAsync(login, password, agencyCodingType, agencyCode, quoteId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub NotesAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal quoteId As String, ByVal userState As Object)
            If (Me.NotesOperationCompleted Is Nothing) Then
                Me.NotesOperationCompleted = AddressOf Me.OnNotesOperationCompleted
            End If
            Me.InvokeAsync("Notes", New Object() {login, password, agencyCodingType, agencyCode, quoteId}, Me.NotesOperationCompleted, userState)
        End Sub
        
        Private Sub OnNotesOperationCompleted(ByVal arg As Object)
            If (Not (Me.NotesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent NotesCompleted(Me, New NotesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/ClickThru", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ClickThru(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal bannerCode As String, ByVal ipAddress As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("ClickThru", New Object() {login, password, agencyCodingType, agencyCode, bannerCode, ipAddress})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginClickThru(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal bannerCode As String, ByVal ipAddress As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ClickThru", New Object() {login, password, agencyCodingType, agencyCode, bannerCode, ipAddress}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndClickThru(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ClickThruAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal bannerCode As String, ByVal ipAddress As String)
            Me.ClickThruAsync(login, password, agencyCodingType, agencyCode, bannerCode, ipAddress, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ClickThruAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal bannerCode As String, ByVal ipAddress As String, ByVal userState As Object)
            If (Me.ClickThruOperationCompleted Is Nothing) Then
                Me.ClickThruOperationCompleted = AddressOf Me.OnClickThruOperationCompleted
            End If
            Me.InvokeAsync("ClickThru", New Object() {login, password, agencyCodingType, agencyCode, bannerCode, ipAddress}, Me.ClickThruOperationCompleted, userState)
        End Sub
        
        Private Sub OnClickThruOperationCompleted(ByVal arg As Object)
            If (Not (Me.ClickThruCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ClickThruCompleted(Me, New ClickThruCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Verify", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Verify(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal contractNumber As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Verify", New Object() {login, password, agencyCodingType, agencyCode, contractNumber})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginVerify(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal contractNumber As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Verify", New Object() {login, password, agencyCodingType, agencyCode, contractNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndVerify(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub VerifyAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal contractNumber As String)
            Me.VerifyAsync(login, password, agencyCodingType, agencyCode, contractNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub VerifyAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal contractNumber As String, ByVal userState As Object)
            If (Me.VerifyOperationCompleted Is Nothing) Then
                Me.VerifyOperationCompleted = AddressOf Me.OnVerifyOperationCompleted
            End If
            Me.InvokeAsync("Verify", New Object() {login, password, agencyCodingType, agencyCode, contractNumber}, Me.VerifyOperationCompleted, userState)
        End Sub
        
        Private Sub OnVerifyOperationCompleted(ByVal arg As Object)
            If (Not (Me.VerifyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent VerifyCompleted(Me, New VerifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Reassign", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Reassign(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal contractNumber As String, ByVal openingAgentId As String, ByVal closingAgentId As String, ByVal verifierAgentId As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Reassign", New Object() {login, password, agencyCodingType, agencyCode, contractNumber, openingAgentId, closingAgentId, verifierAgentId})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginReassign(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal contractNumber As String, ByVal openingAgentId As String, ByVal closingAgentId As String, ByVal verifierAgentId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Reassign", New Object() {login, password, agencyCodingType, agencyCode, contractNumber, openingAgentId, closingAgentId, verifierAgentId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndReassign(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReassignAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal contractNumber As String, ByVal openingAgentId As String, ByVal closingAgentId As String, ByVal verifierAgentId As String)
            Me.ReassignAsync(login, password, agencyCodingType, agencyCode, contractNumber, openingAgentId, closingAgentId, verifierAgentId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReassignAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal contractNumber As String, ByVal openingAgentId As String, ByVal closingAgentId As String, ByVal verifierAgentId As String, ByVal userState As Object)
            If (Me.ReassignOperationCompleted Is Nothing) Then
                Me.ReassignOperationCompleted = AddressOf Me.OnReassignOperationCompleted
            End If
            Me.InvokeAsync("Reassign", New Object() {login, password, agencyCodingType, agencyCode, contractNumber, openingAgentId, closingAgentId, verifierAgentId}, Me.ReassignOperationCompleted, userState)
        End Sub
        
        Private Sub OnReassignOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReassignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReassignCompleted(Me, New ReassignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Batch", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Batch(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal batchNumber As String, ByVal batchType As String, ByVal checkNumber As String, ByVal checkAmount As String, ByVal endDate As String, ByVal receiveDate As String, ByVal contractNumbers As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Batch", New Object() {login, password, agencyCodingType, agencyCode, batchNumber, batchType, checkNumber, checkAmount, endDate, receiveDate, contractNumbers})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginBatch(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal batchNumber As String, ByVal batchType As String, ByVal checkNumber As String, ByVal checkAmount As String, ByVal endDate As String, ByVal receiveDate As String, ByVal contractNumbers As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Batch", New Object() {login, password, agencyCodingType, agencyCode, batchNumber, batchType, checkNumber, checkAmount, endDate, receiveDate, contractNumbers}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndBatch(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BatchAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal batchNumber As String, ByVal batchType As String, ByVal checkNumber As String, ByVal checkAmount As String, ByVal endDate As String, ByVal receiveDate As String, ByVal contractNumbers As String)
            Me.BatchAsync(login, password, agencyCodingType, agencyCode, batchNumber, batchType, checkNumber, checkAmount, endDate, receiveDate, contractNumbers, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BatchAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal batchNumber As String, ByVal batchType As String, ByVal checkNumber As String, ByVal checkAmount As String, ByVal endDate As String, ByVal receiveDate As String, ByVal contractNumbers As String, ByVal userState As Object)
            If (Me.BatchOperationCompleted Is Nothing) Then
                Me.BatchOperationCompleted = AddressOf Me.OnBatchOperationCompleted
            End If
            Me.InvokeAsync("Batch", New Object() {login, password, agencyCodingType, agencyCode, batchNumber, batchType, checkNumber, checkAmount, endDate, receiveDate, contractNumbers}, Me.BatchOperationCompleted, userState)
        End Sub
        
        Private Sub OnBatchOperationCompleted(ByVal arg As Object)
            If (Not (Me.BatchCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BatchCompleted(Me, New BatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Batches", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Batches(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal includeSubAgencies As String, ByVal batchNumber As String, ByVal batchType As String, ByVal checkNumber As String, ByVal submitDateStart As String, ByVal submitDateEnd As String, ByVal received As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Batches", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, batchNumber, batchType, checkNumber, submitDateStart, submitDateEnd, received})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginBatches(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal includeSubAgencies As String, ByVal batchNumber As String, ByVal batchType As String, ByVal checkNumber As String, ByVal submitDateStart As String, ByVal submitDateEnd As String, ByVal received As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Batches", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, batchNumber, batchType, checkNumber, submitDateStart, submitDateEnd, received}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndBatches(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub BatchesAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal includeSubAgencies As String, ByVal batchNumber As String, ByVal batchType As String, ByVal checkNumber As String, ByVal submitDateStart As String, ByVal submitDateEnd As String, ByVal received As String)
            Me.BatchesAsync(login, password, agencyCodingType, agencyCode, includeSubAgencies, batchNumber, batchType, checkNumber, submitDateStart, submitDateEnd, received, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub BatchesAsync(ByVal login As String, ByVal password As String, ByVal agencyCodingType As String, ByVal agencyCode As String, ByVal includeSubAgencies As String, ByVal batchNumber As String, ByVal batchType As String, ByVal checkNumber As String, ByVal submitDateStart As String, ByVal submitDateEnd As String, ByVal received As String, ByVal userState As Object)
            If (Me.BatchesOperationCompleted Is Nothing) Then
                Me.BatchesOperationCompleted = AddressOf Me.OnBatchesOperationCompleted
            End If
            Me.InvokeAsync("Batches", New Object() {login, password, agencyCodingType, agencyCode, includeSubAgencies, batchNumber, batchType, checkNumber, submitDateStart, submitDateEnd, received}, Me.BatchesOperationCompleted, userState)
        End Sub
        
        Private Sub OnBatchesOperationCompleted(ByVal arg As Object)
            If (Not (Me.BatchesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent BatchesCompleted(Me, New BatchesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://localhost/nserv/IQQ.asmx/Forgot", RequestNamespace:="https://localhost/nserv/IQQ.asmx", ResponseNamespace:="https://localhost/nserv/IQQ.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Forgot(ByVal login As String, ByVal agencyCode As String, ByVal sendEmail As String, ByVal domain As String) As System.Xml.XmlElement
            Dim results() As Object = Me.Invoke("Forgot", New Object() {login, agencyCode, sendEmail, domain})
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Function BeginForgot(ByVal login As String, ByVal agencyCode As String, ByVal sendEmail As String, ByVal domain As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("Forgot", New Object() {login, agencyCode, sendEmail, domain}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndForgot(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlElement
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlElement)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ForgotAsync(ByVal login As String, ByVal agencyCode As String, ByVal sendEmail As String, ByVal domain As String)
            Me.ForgotAsync(login, agencyCode, sendEmail, domain, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ForgotAsync(ByVal login As String, ByVal agencyCode As String, ByVal sendEmail As String, ByVal domain As String, ByVal userState As Object)
            If (Me.ForgotOperationCompleted Is Nothing) Then
                Me.ForgotOperationCompleted = AddressOf Me.OnForgotOperationCompleted
            End If
            Me.InvokeAsync("Forgot", New Object() {login, agencyCode, sendEmail, domain}, Me.ForgotOperationCompleted, userState)
        End Sub
        
        Private Sub OnForgotOperationCompleted(ByVal arg As Object)
            If (Not (Me.ForgotCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ForgotCompleted(Me, New ForgotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub VersionCompletedEventHandler(ByVal sender As Object, ByVal e As VersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class VersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub IwsAEsCompletedEventHandler(ByVal sender As Object, ByVal e As IwsAEsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IwsAEsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub IwsCCRepsCompletedEventHandler(ByVal sender As Object, ByVal e As IwsCCRepsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IwsCCRepsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub AgenciesCompletedEventHandler(ByVal sender As Object, ByVal e As AgenciesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AgenciesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub Agencies2CompletedEventHandler(ByVal sender As Object, ByVal e As Agencies2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Agencies2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub BundleCompletedEventHandler(ByVal sender As Object, ByVal e As BundleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BundleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub AgencyCompletedEventHandler(ByVal sender As Object, ByVal e As AgencyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AgencyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub AgentCompletedEventHandler(ByVal sender As Object, ByVal e As AgentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AgentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub TaxCompletedEventHandler(ByVal sender As Object, ByVal e As TaxCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TaxCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub ModelsCompletedEventHandler(ByVal sender As Object, ByVal e As ModelsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ModelsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub Models2CompletedEventHandler(ByVal sender As Object, ByVal e As Models2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Models2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub QuoteCompletedEventHandler(ByVal sender As Object, ByVal e As QuoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class QuoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub Quote2CompletedEventHandler(ByVal sender As Object, ByVal e As Quote2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Quote2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub Quote3CompletedEventHandler(ByVal sender As Object, ByVal e As Quote3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Quote3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub AmortizeCompletedEventHandler(ByVal sender As Object, ByVal e As AmortizeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AmortizeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub ContractCompletedEventHandler(ByVal sender As Object, ByVal e As ContractCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ContractCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub Contract2CompletedEventHandler(ByVal sender As Object, ByVal e As Contract2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Contract2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub Contract3CompletedEventHandler(ByVal sender As Object, ByVal e As Contract3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Contract3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub LoansCompletedEventHandler(ByVal sender As Object, ByVal e As LoansCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoansCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub ContractsCompletedEventHandler(ByVal sender As Object, ByVal e As ContractsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ContractsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub Contracts2CompletedEventHandler(ByVal sender As Object, ByVal e As Contracts2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Contracts2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub Contracts3CompletedEventHandler(ByVal sender As Object, ByVal e As Contracts3CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Contracts3CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub DeleteContractCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteContractCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteContractCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub ContractStatusCompletedEventHandler(ByVal sender As Object, ByVal e As ContractStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ContractStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub ClearCallsCompletedEventHandler(ByVal sender As Object, ByVal e As ClearCallsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ClearCallsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub CommonReasonsCompletedEventHandler(ByVal sender As Object, ByVal e As CommonReasonsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CommonReasonsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub CommonReasonCompletedEventHandler(ByVal sender As Object, ByVal e As CommonReasonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CommonReasonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub MarketingBlurbsCompletedEventHandler(ByVal sender As Object, ByVal e As MarketingBlurbsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MarketingBlurbsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub MarketingBlurbCompletedEventHandler(ByVal sender As Object, ByVal e As MarketingBlurbCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class MarketingBlurbCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub AssignLeadsCompletedEventHandler(ByVal sender As Object, ByVal e As AssignLeadsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AssignLeadsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub NoteCompletedEventHandler(ByVal sender As Object, ByVal e As NoteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NoteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub NotesCompletedEventHandler(ByVal sender As Object, ByVal e As NotesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class NotesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub ClickThruCompletedEventHandler(ByVal sender As Object, ByVal e As ClickThruCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ClickThruCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub VerifyCompletedEventHandler(ByVal sender As Object, ByVal e As VerifyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class VerifyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub ReassignCompletedEventHandler(ByVal sender As Object, ByVal e As ReassignCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReassignCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub BatchCompletedEventHandler(ByVal sender As Object, ByVal e As BatchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BatchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub BatchesCompletedEventHandler(ByVal sender As Object, ByVal e As BatchesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BatchesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub ForgotCompletedEventHandler(ByVal sender As Object, ByVal e As ForgotCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ForgotCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlElement
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlElement)
            End Get
        End Property
    End Class
End Namespace
