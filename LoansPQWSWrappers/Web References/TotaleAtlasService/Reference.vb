'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.832
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.832.
'
Namespace TotaleAtlasService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="FileTransferExtSoap", [Namespace]:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt")>  _
    Partial Public Class FileTransferExtWse
        Inherits Microsoft.Web.Services3.WebServicesClientProtocol
        
        Private CreateFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WriteContentsToFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WriteByteContentsToFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WriteContentsToSpecificFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WriteByteContentsToSpecificFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateFileAndReturnURLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_TotaleAtlasService_FileTransferExt
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event CreateFileCompleted As CreateFileCompletedEventHandler
        
        '''<remarks/>
        Public Event WriteContentsToFileCompleted As WriteContentsToFileCompletedEventHandler
        
        '''<remarks/>
        Public Event WriteByteContentsToFileCompleted As WriteByteContentsToFileCompletedEventHandler
        
        '''<remarks/>
        Public Event WriteContentsToSpecificFileCompleted As WriteContentsToSpecificFileCompletedEventHandler
        
        '''<remarks/>
        Public Event WriteByteContentsToSpecificFileCompleted As WriteByteContentsToSpecificFileCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteFileCompleted As DeleteFileCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateFileAndReturnURLCompleted As CreateFileAndReturnURLCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt/CreateFile", RequestNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", ResponseNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateFile(ByVal HostID As String, ByVal HostFIID As String, ByVal AccessPassword As String, ByVal filename As String, ByVal overwrite As Boolean) As String
            Dim results() As Object = Me.Invoke("CreateFile", New Object() {HostID, HostFIID, AccessPassword, filename, overwrite})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateFileAsync(ByVal HostID As String, ByVal HostFIID As String, ByVal AccessPassword As String, ByVal filename As String, ByVal overwrite As Boolean)
            Me.CreateFileAsync(HostID, HostFIID, AccessPassword, filename, overwrite, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateFileAsync(ByVal HostID As String, ByVal HostFIID As String, ByVal AccessPassword As String, ByVal filename As String, ByVal overwrite As Boolean, ByVal userState As Object)
            If (Me.CreateFileOperationCompleted Is Nothing) Then
                Me.CreateFileOperationCompleted = AddressOf Me.OnCreateFileOperationCompleted
            End If
            Me.InvokeAsync("CreateFile", New Object() {HostID, HostFIID, AccessPassword, filename, overwrite}, Me.CreateFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateFileCompleted(Me, New CreateFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt/WriteConten"& _ 
            "tsToFile", RequestNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", ResponseNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WriteContentsToFile(ByVal contents As String) As String
            Dim results() As Object = Me.Invoke("WriteContentsToFile", New Object() {contents})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WriteContentsToFileAsync(ByVal contents As String)
            Me.WriteContentsToFileAsync(contents, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WriteContentsToFileAsync(ByVal contents As String, ByVal userState As Object)
            If (Me.WriteContentsToFileOperationCompleted Is Nothing) Then
                Me.WriteContentsToFileOperationCompleted = AddressOf Me.OnWriteContentsToFileOperationCompleted
            End If
            Me.InvokeAsync("WriteContentsToFile", New Object() {contents}, Me.WriteContentsToFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnWriteContentsToFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.WriteContentsToFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WriteContentsToFileCompleted(Me, New WriteContentsToFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt/WriteByteCo"& _ 
            "ntentsToFile", RequestNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", ResponseNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WriteByteContentsToFile(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal contents() As Byte) As String
            Dim results() As Object = Me.Invoke("WriteByteContentsToFile", New Object() {contents})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WriteByteContentsToFileAsync(ByVal contents() As Byte)
            Me.WriteByteContentsToFileAsync(contents, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WriteByteContentsToFileAsync(ByVal contents() As Byte, ByVal userState As Object)
            If (Me.WriteByteContentsToFileOperationCompleted Is Nothing) Then
                Me.WriteByteContentsToFileOperationCompleted = AddressOf Me.OnWriteByteContentsToFileOperationCompleted
            End If
            Me.InvokeAsync("WriteByteContentsToFile", New Object() {contents}, Me.WriteByteContentsToFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnWriteByteContentsToFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.WriteByteContentsToFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WriteByteContentsToFileCompleted(Me, New WriteByteContentsToFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt/WriteConten"& _ 
            "tsToSpecificFile", RequestNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", ResponseNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WriteContentsToSpecificFile(ByVal FileName As String, ByVal contents As String) As String
            Dim results() As Object = Me.Invoke("WriteContentsToSpecificFile", New Object() {FileName, contents})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WriteContentsToSpecificFileAsync(ByVal FileName As String, ByVal contents As String)
            Me.WriteContentsToSpecificFileAsync(FileName, contents, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WriteContentsToSpecificFileAsync(ByVal FileName As String, ByVal contents As String, ByVal userState As Object)
            If (Me.WriteContentsToSpecificFileOperationCompleted Is Nothing) Then
                Me.WriteContentsToSpecificFileOperationCompleted = AddressOf Me.OnWriteContentsToSpecificFileOperationCompleted
            End If
            Me.InvokeAsync("WriteContentsToSpecificFile", New Object() {FileName, contents}, Me.WriteContentsToSpecificFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnWriteContentsToSpecificFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.WriteContentsToSpecificFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WriteContentsToSpecificFileCompleted(Me, New WriteContentsToSpecificFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt/WriteByteCo"& _ 
            "ntentsToSpecificFile", RequestNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", ResponseNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WriteByteContentsToSpecificFile(ByVal FileName As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal contents() As Byte) As String
            Dim results() As Object = Me.Invoke("WriteByteContentsToSpecificFile", New Object() {FileName, contents})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WriteByteContentsToSpecificFileAsync(ByVal FileName As String, ByVal contents() As Byte)
            Me.WriteByteContentsToSpecificFileAsync(FileName, contents, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WriteByteContentsToSpecificFileAsync(ByVal FileName As String, ByVal contents() As Byte, ByVal userState As Object)
            If (Me.WriteByteContentsToSpecificFileOperationCompleted Is Nothing) Then
                Me.WriteByteContentsToSpecificFileOperationCompleted = AddressOf Me.OnWriteByteContentsToSpecificFileOperationCompleted
            End If
            Me.InvokeAsync("WriteByteContentsToSpecificFile", New Object() {FileName, contents}, Me.WriteByteContentsToSpecificFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnWriteByteContentsToSpecificFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.WriteByteContentsToSpecificFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WriteByteContentsToSpecificFileCompleted(Me, New WriteByteContentsToSpecificFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt/DeleteFile", RequestNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", ResponseNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteFile(ByVal HostID As String, ByVal HostFIID As String, ByVal AccessPassword As String, ByVal filename As String) As String
            Dim results() As Object = Me.Invoke("DeleteFile", New Object() {HostID, HostFIID, AccessPassword, filename})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteFileAsync(ByVal HostID As String, ByVal HostFIID As String, ByVal AccessPassword As String, ByVal filename As String)
            Me.DeleteFileAsync(HostID, HostFIID, AccessPassword, filename, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteFileAsync(ByVal HostID As String, ByVal HostFIID As String, ByVal AccessPassword As String, ByVal filename As String, ByVal userState As Object)
            If (Me.DeleteFileOperationCompleted Is Nothing) Then
                Me.DeleteFileOperationCompleted = AddressOf Me.OnDeleteFileOperationCompleted
            End If
            Me.InvokeAsync("DeleteFile", New Object() {HostID, HostFIID, AccessPassword, filename}, Me.DeleteFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteFileCompleted(Me, New DeleteFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt/CreateFileA"& _ 
            "ndReturnURL", RequestNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", ResponseNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateFileAndReturnURL(ByVal HostID As String, ByVal HostFIID As String, ByVal AccessPassword As String, ByVal filename As String, ByVal overwrite As Boolean) As String
            Dim results() As Object = Me.Invoke("CreateFileAndReturnURL", New Object() {HostID, HostFIID, AccessPassword, filename, overwrite})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateFileAndReturnURLAsync(ByVal HostID As String, ByVal HostFIID As String, ByVal AccessPassword As String, ByVal filename As String, ByVal overwrite As Boolean)
            Me.CreateFileAndReturnURLAsync(HostID, HostFIID, AccessPassword, filename, overwrite, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateFileAndReturnURLAsync(ByVal HostID As String, ByVal HostFIID As String, ByVal AccessPassword As String, ByVal filename As String, ByVal overwrite As Boolean, ByVal userState As Object)
            If (Me.CreateFileAndReturnURLOperationCompleted Is Nothing) Then
                Me.CreateFileAndReturnURLOperationCompleted = AddressOf Me.OnCreateFileAndReturnURLOperationCompleted
            End If
            Me.InvokeAsync("CreateFileAndReturnURL", New Object() {HostID, HostFIID, AccessPassword, filename, overwrite}, Me.CreateFileAndReturnURLOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateFileAndReturnURLOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateFileAndReturnURLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateFileAndReturnURLCompleted(Me, New CreateFileAndReturnURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="FileTransferExtSoap", [Namespace]:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt")>  _
    Partial Public Class FileTransferExt
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private CreateFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WriteContentsToFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WriteByteContentsToFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WriteContentsToSpecificFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WriteByteContentsToSpecificFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteFileOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateFileAndReturnURLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_TotaleAtlasService_FileTransferExt
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event CreateFileCompleted As CreateFileCompletedEventHandler
        
        '''<remarks/>
        Public Event WriteContentsToFileCompleted As WriteContentsToFileCompletedEventHandler
        
        '''<remarks/>
        Public Event WriteByteContentsToFileCompleted As WriteByteContentsToFileCompletedEventHandler
        
        '''<remarks/>
        Public Event WriteContentsToSpecificFileCompleted As WriteContentsToSpecificFileCompletedEventHandler
        
        '''<remarks/>
        Public Event WriteByteContentsToSpecificFileCompleted As WriteByteContentsToSpecificFileCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteFileCompleted As DeleteFileCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateFileAndReturnURLCompleted As CreateFileAndReturnURLCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt/CreateFile", RequestNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", ResponseNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateFile(ByVal HostID As String, ByVal HostFIID As String, ByVal AccessPassword As String, ByVal filename As String, ByVal overwrite As Boolean) As String
            Dim results() As Object = Me.Invoke("CreateFile", New Object() {HostID, HostFIID, AccessPassword, filename, overwrite})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateFile(ByVal HostID As String, ByVal HostFIID As String, ByVal AccessPassword As String, ByVal filename As String, ByVal overwrite As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateFile", New Object() {HostID, HostFIID, AccessPassword, filename, overwrite}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateFile(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateFileAsync(ByVal HostID As String, ByVal HostFIID As String, ByVal AccessPassword As String, ByVal filename As String, ByVal overwrite As Boolean)
            Me.CreateFileAsync(HostID, HostFIID, AccessPassword, filename, overwrite, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateFileAsync(ByVal HostID As String, ByVal HostFIID As String, ByVal AccessPassword As String, ByVal filename As String, ByVal overwrite As Boolean, ByVal userState As Object)
            If (Me.CreateFileOperationCompleted Is Nothing) Then
                Me.CreateFileOperationCompleted = AddressOf Me.OnCreateFileOperationCompleted
            End If
            Me.InvokeAsync("CreateFile", New Object() {HostID, HostFIID, AccessPassword, filename, overwrite}, Me.CreateFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateFileCompleted(Me, New CreateFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt/WriteConten"& _ 
            "tsToFile", RequestNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", ResponseNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WriteContentsToFile(ByVal contents As String) As String
            Dim results() As Object = Me.Invoke("WriteContentsToFile", New Object() {contents})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginWriteContentsToFile(ByVal contents As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("WriteContentsToFile", New Object() {contents}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndWriteContentsToFile(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WriteContentsToFileAsync(ByVal contents As String)
            Me.WriteContentsToFileAsync(contents, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WriteContentsToFileAsync(ByVal contents As String, ByVal userState As Object)
            If (Me.WriteContentsToFileOperationCompleted Is Nothing) Then
                Me.WriteContentsToFileOperationCompleted = AddressOf Me.OnWriteContentsToFileOperationCompleted
            End If
            Me.InvokeAsync("WriteContentsToFile", New Object() {contents}, Me.WriteContentsToFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnWriteContentsToFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.WriteContentsToFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WriteContentsToFileCompleted(Me, New WriteContentsToFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt/WriteByteCo"& _ 
            "ntentsToFile", RequestNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", ResponseNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WriteByteContentsToFile(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal contents() As Byte) As String
            Dim results() As Object = Me.Invoke("WriteByteContentsToFile", New Object() {contents})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginWriteByteContentsToFile(ByVal contents() As Byte, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("WriteByteContentsToFile", New Object() {contents}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndWriteByteContentsToFile(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WriteByteContentsToFileAsync(ByVal contents() As Byte)
            Me.WriteByteContentsToFileAsync(contents, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WriteByteContentsToFileAsync(ByVal contents() As Byte, ByVal userState As Object)
            If (Me.WriteByteContentsToFileOperationCompleted Is Nothing) Then
                Me.WriteByteContentsToFileOperationCompleted = AddressOf Me.OnWriteByteContentsToFileOperationCompleted
            End If
            Me.InvokeAsync("WriteByteContentsToFile", New Object() {contents}, Me.WriteByteContentsToFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnWriteByteContentsToFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.WriteByteContentsToFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WriteByteContentsToFileCompleted(Me, New WriteByteContentsToFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt/WriteConten"& _ 
            "tsToSpecificFile", RequestNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", ResponseNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WriteContentsToSpecificFile(ByVal FileName As String, ByVal contents As String) As String
            Dim results() As Object = Me.Invoke("WriteContentsToSpecificFile", New Object() {FileName, contents})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginWriteContentsToSpecificFile(ByVal FileName As String, ByVal contents As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("WriteContentsToSpecificFile", New Object() {FileName, contents}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndWriteContentsToSpecificFile(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WriteContentsToSpecificFileAsync(ByVal FileName As String, ByVal contents As String)
            Me.WriteContentsToSpecificFileAsync(FileName, contents, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WriteContentsToSpecificFileAsync(ByVal FileName As String, ByVal contents As String, ByVal userState As Object)
            If (Me.WriteContentsToSpecificFileOperationCompleted Is Nothing) Then
                Me.WriteContentsToSpecificFileOperationCompleted = AddressOf Me.OnWriteContentsToSpecificFileOperationCompleted
            End If
            Me.InvokeAsync("WriteContentsToSpecificFile", New Object() {FileName, contents}, Me.WriteContentsToSpecificFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnWriteContentsToSpecificFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.WriteContentsToSpecificFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WriteContentsToSpecificFileCompleted(Me, New WriteContentsToSpecificFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt/WriteByteCo"& _ 
            "ntentsToSpecificFile", RequestNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", ResponseNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WriteByteContentsToSpecificFile(ByVal FileName As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal contents() As Byte) As String
            Dim results() As Object = Me.Invoke("WriteByteContentsToSpecificFile", New Object() {FileName, contents})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginWriteByteContentsToSpecificFile(ByVal FileName As String, ByVal contents() As Byte, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("WriteByteContentsToSpecificFile", New Object() {FileName, contents}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndWriteByteContentsToSpecificFile(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WriteByteContentsToSpecificFileAsync(ByVal FileName As String, ByVal contents() As Byte)
            Me.WriteByteContentsToSpecificFileAsync(FileName, contents, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WriteByteContentsToSpecificFileAsync(ByVal FileName As String, ByVal contents() As Byte, ByVal userState As Object)
            If (Me.WriteByteContentsToSpecificFileOperationCompleted Is Nothing) Then
                Me.WriteByteContentsToSpecificFileOperationCompleted = AddressOf Me.OnWriteByteContentsToSpecificFileOperationCompleted
            End If
            Me.InvokeAsync("WriteByteContentsToSpecificFile", New Object() {FileName, contents}, Me.WriteByteContentsToSpecificFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnWriteByteContentsToSpecificFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.WriteByteContentsToSpecificFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WriteByteContentsToSpecificFileCompleted(Me, New WriteByteContentsToSpecificFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt/DeleteFile", RequestNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", ResponseNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteFile(ByVal HostID As String, ByVal HostFIID As String, ByVal AccessPassword As String, ByVal filename As String) As String
            Dim results() As Object = Me.Invoke("DeleteFile", New Object() {HostID, HostFIID, AccessPassword, filename})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteFile(ByVal HostID As String, ByVal HostFIID As String, ByVal AccessPassword As String, ByVal filename As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteFile", New Object() {HostID, HostFIID, AccessPassword, filename}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteFile(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteFileAsync(ByVal HostID As String, ByVal HostFIID As String, ByVal AccessPassword As String, ByVal filename As String)
            Me.DeleteFileAsync(HostID, HostFIID, AccessPassword, filename, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteFileAsync(ByVal HostID As String, ByVal HostFIID As String, ByVal AccessPassword As String, ByVal filename As String, ByVal userState As Object)
            If (Me.DeleteFileOperationCompleted Is Nothing) Then
                Me.DeleteFileOperationCompleted = AddressOf Me.OnDeleteFileOperationCompleted
            End If
            Me.InvokeAsync("DeleteFile", New Object() {HostID, HostFIID, AccessPassword, filename}, Me.DeleteFileOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteFileOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteFileCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteFileCompleted(Me, New DeleteFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt/CreateFileA"& _ 
            "ndReturnURL", RequestNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", ResponseNamespace:="http://IMMOnline.com/IMM.TEAASP.FileTransferExtWebSVC/FileTransferExt", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateFileAndReturnURL(ByVal HostID As String, ByVal HostFIID As String, ByVal AccessPassword As String, ByVal filename As String, ByVal overwrite As Boolean) As String
            Dim results() As Object = Me.Invoke("CreateFileAndReturnURL", New Object() {HostID, HostFIID, AccessPassword, filename, overwrite})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginCreateFileAndReturnURL(ByVal HostID As String, ByVal HostFIID As String, ByVal AccessPassword As String, ByVal filename As String, ByVal overwrite As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CreateFileAndReturnURL", New Object() {HostID, HostFIID, AccessPassword, filename, overwrite}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCreateFileAndReturnURL(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateFileAndReturnURLAsync(ByVal HostID As String, ByVal HostFIID As String, ByVal AccessPassword As String, ByVal filename As String, ByVal overwrite As Boolean)
            Me.CreateFileAndReturnURLAsync(HostID, HostFIID, AccessPassword, filename, overwrite, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateFileAndReturnURLAsync(ByVal HostID As String, ByVal HostFIID As String, ByVal AccessPassword As String, ByVal filename As String, ByVal overwrite As Boolean, ByVal userState As Object)
            If (Me.CreateFileAndReturnURLOperationCompleted Is Nothing) Then
                Me.CreateFileAndReturnURLOperationCompleted = AddressOf Me.OnCreateFileAndReturnURLOperationCompleted
            End If
            Me.InvokeAsync("CreateFileAndReturnURL", New Object() {HostID, HostFIID, AccessPassword, filename, overwrite}, Me.CreateFileAndReturnURLOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateFileAndReturnURLOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateFileAndReturnURLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateFileAndReturnURLCompleted(Me, New CreateFileAndReturnURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub CreateFileCompletedEventHandler(ByVal sender As Object, ByVal e As CreateFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub WriteContentsToFileCompletedEventHandler(ByVal sender As Object, ByVal e As WriteContentsToFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WriteContentsToFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub WriteByteContentsToFileCompletedEventHandler(ByVal sender As Object, ByVal e As WriteByteContentsToFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WriteByteContentsToFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub WriteContentsToSpecificFileCompletedEventHandler(ByVal sender As Object, ByVal e As WriteContentsToSpecificFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WriteContentsToSpecificFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub WriteByteContentsToSpecificFileCompletedEventHandler(ByVal sender As Object, ByVal e As WriteByteContentsToSpecificFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WriteByteContentsToSpecificFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub DeleteFileCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")>  _
    Public Delegate Sub CreateFileAndReturnURLCompletedEventHandler(ByVal sender As Object, ByVal e As CreateFileAndReturnURLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateFileAndReturnURLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
