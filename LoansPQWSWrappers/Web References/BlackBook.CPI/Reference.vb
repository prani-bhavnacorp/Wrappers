'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
'
Namespace BlackBook.CPI
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="CPIWS", [Namespace]:="https://www.blackbookws.com/CPIWS")>  _
    Partial Public Class CPIWSWse
        Inherits Microsoft.Web.Services3.WebServicesClientProtocol
        
        Private userCredentialsValueField As UserCredentials
        
        Private getYearsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getMakesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getModelsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getUVCValuesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getUVCValues1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getValuesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getValues1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getTrendAnalysisValuesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPDFSpecOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_BlackBook_CPI_CPIWS
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Property UserCredentialsValue() As UserCredentials
            Get
                Return Me.userCredentialsValueField
            End Get
            Set
                Me.userCredentialsValueField = value
            End Set
        End Property
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event getYearsCompleted As getYearsCompletedEventHandler
        
        '''<remarks/>
        Public Event getMakesCompleted As getMakesCompletedEventHandler
        
        '''<remarks/>
        Public Event getModelsCompleted As getModelsCompletedEventHandler
        
        '''<remarks/>
        Public Event getUVCValuesCompleted As getUVCValuesCompletedEventHandler
        
        '''<remarks/>
        Public Event getUVCValues1Completed As getUVCValues1CompletedEventHandler
        
        '''<remarks/>
        Public Event getValuesCompleted As getValuesCompletedEventHandler
        
        '''<remarks/>
        Public Event getValues1Completed As getValues1CompletedEventHandler
        
        '''<remarks/>
        Public Event getTrendAnalysisValuesCompleted As getTrendAnalysisValuesCompletedEventHandler
        
        '''<remarks/>
        Public Event getPDFSpecCompleted As getPDFSpecCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.blackbookws.com/CPIWS/Years", RequestElementName:="Years", RequestNamespace:="https://www.blackbookws.com/CPIWS", ResponseElementName:="YearsResponse", ResponseNamespace:="https://www.blackbookws.com/CPIWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getYears() As <System.Xml.Serialization.XmlElementAttribute("YearsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getYears", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getYearsAsync()
            Me.getYearsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getYearsAsync(ByVal userState As Object)
            If (Me.getYearsOperationCompleted Is Nothing) Then
                Me.getYearsOperationCompleted = AddressOf Me.OngetYearsOperationCompleted
            End If
            Me.InvokeAsync("getYears", New Object(-1) {}, Me.getYearsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetYearsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getYearsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getYearsCompleted(Me, New getYearsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.blackbookws.com/CPIWS/Makes", RequestElementName:="Makes", RequestNamespace:="https://www.blackbookws.com/CPIWS", ResponseElementName:="MakesResponse", ResponseNamespace:="https://www.blackbookws.com/CPIWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getMakes(ByVal sYear As String) As <System.Xml.Serialization.XmlElementAttribute("MakesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getMakes", New Object() {sYear})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getMakesAsync(ByVal sYear As String)
            Me.getMakesAsync(sYear, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getMakesAsync(ByVal sYear As String, ByVal userState As Object)
            If (Me.getMakesOperationCompleted Is Nothing) Then
                Me.getMakesOperationCompleted = AddressOf Me.OngetMakesOperationCompleted
            End If
            Me.InvokeAsync("getMakes", New Object() {sYear}, Me.getMakesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetMakesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getMakesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getMakesCompleted(Me, New getMakesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.blackbookws.com/CPIWS/Models", RequestElementName:="Models", RequestNamespace:="https://www.blackbookws.com/CPIWS", ResponseElementName:="ModelsResponse", ResponseNamespace:="https://www.blackbookws.com/CPIWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getModels(ByVal sYear As String, ByVal sMake As String) As <System.Xml.Serialization.XmlElementAttribute("ModelsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getModels", New Object() {sYear, sMake})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getModelsAsync(ByVal sYear As String, ByVal sMake As String)
            Me.getModelsAsync(sYear, sMake, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getModelsAsync(ByVal sYear As String, ByVal sMake As String, ByVal userState As Object)
            If (Me.getModelsOperationCompleted Is Nothing) Then
                Me.getModelsOperationCompleted = AddressOf Me.OngetModelsOperationCompleted
            End If
            Me.InvokeAsync("getModels", New Object() {sYear, sMake}, Me.getModelsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetModelsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getModelsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getModelsCompleted(Me, New getModelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.blackbookws.com/CPIWS/CurrentUVCValues", RequestElementName:="CurrentUVCValues", RequestNamespace:="https://www.blackbookws.com/CPIWS", ResponseElementName:="CurrentUVCValuesResponse", ResponseNamespace:="https://www.blackbookws.com/CPIWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getUVCValues(ByVal sUVC As String, ByVal bFillDrilldown As Boolean) As <System.Xml.Serialization.XmlElementAttribute("CurrentUVCValuesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getUVCValues", New Object() {sUVC, bFillDrilldown})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getUVCValuesAsync(ByVal sUVC As String, ByVal bFillDrilldown As Boolean)
            Me.getUVCValuesAsync(sUVC, bFillDrilldown, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getUVCValuesAsync(ByVal sUVC As String, ByVal bFillDrilldown As Boolean, ByVal userState As Object)
            If (Me.getUVCValuesOperationCompleted Is Nothing) Then
                Me.getUVCValuesOperationCompleted = AddressOf Me.OngetUVCValuesOperationCompleted
            End If
            Me.InvokeAsync("getUVCValues", New Object() {sUVC, bFillDrilldown}, Me.getUVCValuesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetUVCValuesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getUVCValuesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getUVCValuesCompleted(Me, New getUVCValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="getUVCValues1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.blackbookws.com/CPIWS/HistoricalUVCValues", RequestElementName:="HistoricalUVCValues", RequestNamespace:="https://www.blackbookws.com/CPIWS", ResponseElementName:="HistoricalUVCValuesResponse", ResponseNamespace:="https://www.blackbookws.com/CPIWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getUVCValues(ByVal sUVC As String, ByVal bFillDrilldown As Boolean, ByVal dHistoricalDate As Date) As <System.Xml.Serialization.XmlElementAttribute("HistoricalUVCValuesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getUVCValues1", New Object() {sUVC, bFillDrilldown, dHistoricalDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getUVCValues1Async(ByVal sUVC As String, ByVal bFillDrilldown As Boolean, ByVal dHistoricalDate As Date)
            Me.getUVCValues1Async(sUVC, bFillDrilldown, dHistoricalDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getUVCValues1Async(ByVal sUVC As String, ByVal bFillDrilldown As Boolean, ByVal dHistoricalDate As Date, ByVal userState As Object)
            If (Me.getUVCValues1OperationCompleted Is Nothing) Then
                Me.getUVCValues1OperationCompleted = AddressOf Me.OngetUVCValues1OperationCompleted
            End If
            Me.InvokeAsync("getUVCValues1", New Object() {sUVC, bFillDrilldown, dHistoricalDate}, Me.getUVCValues1OperationCompleted, userState)
        End Sub
        
        Private Sub OngetUVCValues1OperationCompleted(ByVal arg As Object)
            If (Not (Me.getUVCValues1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getUVCValues1Completed(Me, New getUVCValues1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.blackbookws.com/CPIWS/CurrentValues", RequestElementName:="CurrentValues", RequestNamespace:="https://www.blackbookws.com/CPIWS", ResponseElementName:="CurrentValuesResponse", ResponseNamespace:="https://www.blackbookws.com/CPIWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getValues(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal bFillDrilldown As Boolean) As <System.Xml.Serialization.XmlElementAttribute("CurrentValuesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getValues", New Object() {sYear, sMake, sModel, bFillDrilldown})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getValuesAsync(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal bFillDrilldown As Boolean)
            Me.getValuesAsync(sYear, sMake, sModel, bFillDrilldown, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getValuesAsync(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal bFillDrilldown As Boolean, ByVal userState As Object)
            If (Me.getValuesOperationCompleted Is Nothing) Then
                Me.getValuesOperationCompleted = AddressOf Me.OngetValuesOperationCompleted
            End If
            Me.InvokeAsync("getValues", New Object() {sYear, sMake, sModel, bFillDrilldown}, Me.getValuesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetValuesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getValuesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getValuesCompleted(Me, New getValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="getValues1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.blackbookws.com/CPIWS/HistoricalValues", RequestElementName:="HistoricalValues", RequestNamespace:="https://www.blackbookws.com/CPIWS", ResponseElementName:="HistoricalValuesResponse", ResponseNamespace:="https://www.blackbookws.com/CPIWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getValues(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal bFillDrilldown As Boolean, ByVal dHistoricalDate As Date) As <System.Xml.Serialization.XmlElementAttribute("HistoricalValuesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getValues1", New Object() {sYear, sMake, sModel, bFillDrilldown, dHistoricalDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getValues1Async(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal bFillDrilldown As Boolean, ByVal dHistoricalDate As Date)
            Me.getValues1Async(sYear, sMake, sModel, bFillDrilldown, dHistoricalDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getValues1Async(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal bFillDrilldown As Boolean, ByVal dHistoricalDate As Date, ByVal userState As Object)
            If (Me.getValues1OperationCompleted Is Nothing) Then
                Me.getValues1OperationCompleted = AddressOf Me.OngetValues1OperationCompleted
            End If
            Me.InvokeAsync("getValues1", New Object() {sYear, sMake, sModel, bFillDrilldown, dHistoricalDate}, Me.getValues1OperationCompleted, userState)
        End Sub
        
        Private Sub OngetValues1OperationCompleted(ByVal arg As Object)
            If (Not (Me.getValues1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getValues1Completed(Me, New getValues1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.blackbookws.com/CPIWS/TrendAnalysis", RequestElementName:="TrendAnalysis", RequestNamespace:="https://www.blackbookws.com/CPIWS", ResponseElementName:="TrendAnalysisResponse", ResponseNamespace:="https://www.blackbookws.com/CPIWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getTrendAnalysisValues(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal sAnnualOrMonthly As String, ByVal dStartDate As Date, ByVal dEndDate As Date) As <System.Xml.Serialization.XmlElementAttribute("TrendAnalysisResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getTrendAnalysisValues", New Object() {sYear, sMake, sModel, sAnnualOrMonthly, dStartDate, dEndDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getTrendAnalysisValuesAsync(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal sAnnualOrMonthly As String, ByVal dStartDate As Date, ByVal dEndDate As Date)
            Me.getTrendAnalysisValuesAsync(sYear, sMake, sModel, sAnnualOrMonthly, dStartDate, dEndDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getTrendAnalysisValuesAsync(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal sAnnualOrMonthly As String, ByVal dStartDate As Date, ByVal dEndDate As Date, ByVal userState As Object)
            If (Me.getTrendAnalysisValuesOperationCompleted Is Nothing) Then
                Me.getTrendAnalysisValuesOperationCompleted = AddressOf Me.OngetTrendAnalysisValuesOperationCompleted
            End If
            Me.InvokeAsync("getTrendAnalysisValues", New Object() {sYear, sMake, sModel, sAnnualOrMonthly, dStartDate, dEndDate}, Me.getTrendAnalysisValuesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetTrendAnalysisValuesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getTrendAnalysisValuesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getTrendAnalysisValuesCompleted(Me, New getTrendAnalysisValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.blackbookws.com/CPIWS/PDF", RequestElementName:="PDF", RequestNamespace:="https://www.blackbookws.com/CPIWS", ResponseElementName:="PDFResponse", ResponseNamespace:="https://www.blackbookws.com/CPIWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPDFSpec(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal sJustCheck As String) As <System.Xml.Serialization.XmlElementAttribute("PDFResult", DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("getPDFSpec", New Object() {sYear, sMake, sModel, sJustCheck})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPDFSpecAsync(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal sJustCheck As String)
            Me.getPDFSpecAsync(sYear, sMake, sModel, sJustCheck, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPDFSpecAsync(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal sJustCheck As String, ByVal userState As Object)
            If (Me.getPDFSpecOperationCompleted Is Nothing) Then
                Me.getPDFSpecOperationCompleted = AddressOf Me.OngetPDFSpecOperationCompleted
            End If
            Me.InvokeAsync("getPDFSpec", New Object() {sYear, sMake, sModel, sJustCheck}, Me.getPDFSpecOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPDFSpecOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPDFSpecCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPDFSpecCompleted(Me, New getPDFSpecCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="CPIWSSoap", [Namespace]:="https://www.blackbookws.com/CPIWS")>  _
    Partial Public Class CPIWSSoapWse
        Inherits Microsoft.Web.Services3.WebServicesClientProtocol
        
        Private getIPAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_BlackBook_CPI_CPIWS
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event getIPAddressCompleted As getIPAddressCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.blackbookws.com/CPIWS/IPAddress", RequestElementName:="IPAddress", RequestNamespace:="https://www.blackbookws.com/CPIWS", ResponseElementName:="IPAddressResponse", ResponseNamespace:="https://www.blackbookws.com/CPIWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getIPAddress() As <System.Xml.Serialization.XmlElementAttribute("IPAddressResult")> String
            Dim results() As Object = Me.Invoke("getIPAddress", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getIPAddressAsync()
            Me.getIPAddressAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getIPAddressAsync(ByVal userState As Object)
            If (Me.getIPAddressOperationCompleted Is Nothing) Then
                Me.getIPAddressOperationCompleted = AddressOf Me.OngetIPAddressOperationCompleted
            End If
            Me.InvokeAsync("getIPAddress", New Object(-1) {}, Me.getIPAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OngetIPAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.getIPAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getIPAddressCompleted(Me, New getIPAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="CPIWS", [Namespace]:="https://www.blackbookws.com/CPIWS")>  _
    Partial Public Class CPIWS
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private userCredentialsValueField As UserCredentials
        
        Private getYearsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getMakesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getModelsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getUVCValuesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getUVCValues1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getValuesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getValues1OperationCompleted As System.Threading.SendOrPostCallback
        
        Private getTrendAnalysisValuesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getPDFSpecOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_BlackBook_CPI_CPIWS
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Property UserCredentialsValue() As UserCredentials
            Get
                Return Me.userCredentialsValueField
            End Get
            Set
                Me.userCredentialsValueField = value
            End Set
        End Property
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event getYearsCompleted As getYearsCompletedEventHandler
        
        '''<remarks/>
        Public Event getMakesCompleted As getMakesCompletedEventHandler
        
        '''<remarks/>
        Public Event getModelsCompleted As getModelsCompletedEventHandler
        
        '''<remarks/>
        Public Event getUVCValuesCompleted As getUVCValuesCompletedEventHandler
        
        '''<remarks/>
        Public Event getUVCValues1Completed As getUVCValues1CompletedEventHandler
        
        '''<remarks/>
        Public Event getValuesCompleted As getValuesCompletedEventHandler
        
        '''<remarks/>
        Public Event getValues1Completed As getValues1CompletedEventHandler
        
        '''<remarks/>
        Public Event getTrendAnalysisValuesCompleted As getTrendAnalysisValuesCompletedEventHandler
        
        '''<remarks/>
        Public Event getPDFSpecCompleted As getPDFSpecCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.blackbookws.com/CPIWS/Years", RequestElementName:="Years", RequestNamespace:="https://www.blackbookws.com/CPIWS", ResponseElementName:="YearsResponse", ResponseNamespace:="https://www.blackbookws.com/CPIWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getYears() As <System.Xml.Serialization.XmlElementAttribute("YearsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getYears", New Object(-1) {})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetYears(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getYears", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetYears(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getYearsAsync()
            Me.getYearsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getYearsAsync(ByVal userState As Object)
            If (Me.getYearsOperationCompleted Is Nothing) Then
                Me.getYearsOperationCompleted = AddressOf Me.OngetYearsOperationCompleted
            End If
            Me.InvokeAsync("getYears", New Object(-1) {}, Me.getYearsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetYearsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getYearsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getYearsCompleted(Me, New getYearsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.blackbookws.com/CPIWS/Makes", RequestElementName:="Makes", RequestNamespace:="https://www.blackbookws.com/CPIWS", ResponseElementName:="MakesResponse", ResponseNamespace:="https://www.blackbookws.com/CPIWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getMakes(ByVal sYear As String) As <System.Xml.Serialization.XmlElementAttribute("MakesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getMakes", New Object() {sYear})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetMakes(ByVal sYear As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getMakes", New Object() {sYear}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetMakes(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getMakesAsync(ByVal sYear As String)
            Me.getMakesAsync(sYear, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getMakesAsync(ByVal sYear As String, ByVal userState As Object)
            If (Me.getMakesOperationCompleted Is Nothing) Then
                Me.getMakesOperationCompleted = AddressOf Me.OngetMakesOperationCompleted
            End If
            Me.InvokeAsync("getMakes", New Object() {sYear}, Me.getMakesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetMakesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getMakesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getMakesCompleted(Me, New getMakesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.blackbookws.com/CPIWS/Models", RequestElementName:="Models", RequestNamespace:="https://www.blackbookws.com/CPIWS", ResponseElementName:="ModelsResponse", ResponseNamespace:="https://www.blackbookws.com/CPIWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getModels(ByVal sYear As String, ByVal sMake As String) As <System.Xml.Serialization.XmlElementAttribute("ModelsResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getModels", New Object() {sYear, sMake})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetModels(ByVal sYear As String, ByVal sMake As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getModels", New Object() {sYear, sMake}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetModels(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getModelsAsync(ByVal sYear As String, ByVal sMake As String)
            Me.getModelsAsync(sYear, sMake, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getModelsAsync(ByVal sYear As String, ByVal sMake As String, ByVal userState As Object)
            If (Me.getModelsOperationCompleted Is Nothing) Then
                Me.getModelsOperationCompleted = AddressOf Me.OngetModelsOperationCompleted
            End If
            Me.InvokeAsync("getModels", New Object() {sYear, sMake}, Me.getModelsOperationCompleted, userState)
        End Sub
        
        Private Sub OngetModelsOperationCompleted(ByVal arg As Object)
            If (Not (Me.getModelsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getModelsCompleted(Me, New getModelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.blackbookws.com/CPIWS/CurrentUVCValues", RequestElementName:="CurrentUVCValues", RequestNamespace:="https://www.blackbookws.com/CPIWS", ResponseElementName:="CurrentUVCValuesResponse", ResponseNamespace:="https://www.blackbookws.com/CPIWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getUVCValues(ByVal sUVC As String, ByVal bFillDrilldown As Boolean) As <System.Xml.Serialization.XmlElementAttribute("CurrentUVCValuesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getUVCValues", New Object() {sUVC, bFillDrilldown})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetUVCValues(ByVal sUVC As String, ByVal bFillDrilldown As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getUVCValues", New Object() {sUVC, bFillDrilldown}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetUVCValues(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getUVCValuesAsync(ByVal sUVC As String, ByVal bFillDrilldown As Boolean)
            Me.getUVCValuesAsync(sUVC, bFillDrilldown, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getUVCValuesAsync(ByVal sUVC As String, ByVal bFillDrilldown As Boolean, ByVal userState As Object)
            If (Me.getUVCValuesOperationCompleted Is Nothing) Then
                Me.getUVCValuesOperationCompleted = AddressOf Me.OngetUVCValuesOperationCompleted
            End If
            Me.InvokeAsync("getUVCValues", New Object() {sUVC, bFillDrilldown}, Me.getUVCValuesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetUVCValuesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getUVCValuesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getUVCValuesCompleted(Me, New getUVCValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="getUVCValues1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.blackbookws.com/CPIWS/HistoricalUVCValues", RequestElementName:="HistoricalUVCValues", RequestNamespace:="https://www.blackbookws.com/CPIWS", ResponseElementName:="HistoricalUVCValuesResponse", ResponseNamespace:="https://www.blackbookws.com/CPIWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getUVCValues(ByVal sUVC As String, ByVal bFillDrilldown As Boolean, ByVal dHistoricalDate As Date) As <System.Xml.Serialization.XmlElementAttribute("HistoricalUVCValuesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getUVCValues1", New Object() {sUVC, bFillDrilldown, dHistoricalDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetUVCValues1(ByVal sUVC As String, ByVal bFillDrilldown As Boolean, ByVal dHistoricalDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getUVCValues1", New Object() {sUVC, bFillDrilldown, dHistoricalDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetUVCValues1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getUVCValues1Async(ByVal sUVC As String, ByVal bFillDrilldown As Boolean, ByVal dHistoricalDate As Date)
            Me.getUVCValues1Async(sUVC, bFillDrilldown, dHistoricalDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getUVCValues1Async(ByVal sUVC As String, ByVal bFillDrilldown As Boolean, ByVal dHistoricalDate As Date, ByVal userState As Object)
            If (Me.getUVCValues1OperationCompleted Is Nothing) Then
                Me.getUVCValues1OperationCompleted = AddressOf Me.OngetUVCValues1OperationCompleted
            End If
            Me.InvokeAsync("getUVCValues1", New Object() {sUVC, bFillDrilldown, dHistoricalDate}, Me.getUVCValues1OperationCompleted, userState)
        End Sub
        
        Private Sub OngetUVCValues1OperationCompleted(ByVal arg As Object)
            If (Not (Me.getUVCValues1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getUVCValues1Completed(Me, New getUVCValues1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.blackbookws.com/CPIWS/CurrentValues", RequestElementName:="CurrentValues", RequestNamespace:="https://www.blackbookws.com/CPIWS", ResponseElementName:="CurrentValuesResponse", ResponseNamespace:="https://www.blackbookws.com/CPIWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getValues(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal bFillDrilldown As Boolean) As <System.Xml.Serialization.XmlElementAttribute("CurrentValuesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getValues", New Object() {sYear, sMake, sModel, bFillDrilldown})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetValues(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal bFillDrilldown As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getValues", New Object() {sYear, sMake, sModel, bFillDrilldown}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetValues(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getValuesAsync(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal bFillDrilldown As Boolean)
            Me.getValuesAsync(sYear, sMake, sModel, bFillDrilldown, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getValuesAsync(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal bFillDrilldown As Boolean, ByVal userState As Object)
            If (Me.getValuesOperationCompleted Is Nothing) Then
                Me.getValuesOperationCompleted = AddressOf Me.OngetValuesOperationCompleted
            End If
            Me.InvokeAsync("getValues", New Object() {sYear, sMake, sModel, bFillDrilldown}, Me.getValuesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetValuesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getValuesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getValuesCompleted(Me, New getValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.WebMethodAttribute(MessageName:="getValues1"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.blackbookws.com/CPIWS/HistoricalValues", RequestElementName:="HistoricalValues", RequestNamespace:="https://www.blackbookws.com/CPIWS", ResponseElementName:="HistoricalValuesResponse", ResponseNamespace:="https://www.blackbookws.com/CPIWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Overloads Function getValues(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal bFillDrilldown As Boolean, ByVal dHistoricalDate As Date) As <System.Xml.Serialization.XmlElementAttribute("HistoricalValuesResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getValues1", New Object() {sYear, sMake, sModel, bFillDrilldown, dHistoricalDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetValues1(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal bFillDrilldown As Boolean, ByVal dHistoricalDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getValues1", New Object() {sYear, sMake, sModel, bFillDrilldown, dHistoricalDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetValues1(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getValues1Async(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal bFillDrilldown As Boolean, ByVal dHistoricalDate As Date)
            Me.getValues1Async(sYear, sMake, sModel, bFillDrilldown, dHistoricalDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getValues1Async(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal bFillDrilldown As Boolean, ByVal dHistoricalDate As Date, ByVal userState As Object)
            If (Me.getValues1OperationCompleted Is Nothing) Then
                Me.getValues1OperationCompleted = AddressOf Me.OngetValues1OperationCompleted
            End If
            Me.InvokeAsync("getValues1", New Object() {sYear, sMake, sModel, bFillDrilldown, dHistoricalDate}, Me.getValues1OperationCompleted, userState)
        End Sub
        
        Private Sub OngetValues1OperationCompleted(ByVal arg As Object)
            If (Not (Me.getValues1CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getValues1Completed(Me, New getValues1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.blackbookws.com/CPIWS/TrendAnalysis", RequestElementName:="TrendAnalysis", RequestNamespace:="https://www.blackbookws.com/CPIWS", ResponseElementName:="TrendAnalysisResponse", ResponseNamespace:="https://www.blackbookws.com/CPIWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getTrendAnalysisValues(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal sAnnualOrMonthly As String, ByVal dStartDate As Date, ByVal dEndDate As Date) As <System.Xml.Serialization.XmlElementAttribute("TrendAnalysisResult")> System.Data.DataSet
            Dim results() As Object = Me.Invoke("getTrendAnalysisValues", New Object() {sYear, sMake, sModel, sAnnualOrMonthly, dStartDate, dEndDate})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BegingetTrendAnalysisValues(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal sAnnualOrMonthly As String, ByVal dStartDate As Date, ByVal dEndDate As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getTrendAnalysisValues", New Object() {sYear, sMake, sModel, sAnnualOrMonthly, dStartDate, dEndDate}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetTrendAnalysisValues(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getTrendAnalysisValuesAsync(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal sAnnualOrMonthly As String, ByVal dStartDate As Date, ByVal dEndDate As Date)
            Me.getTrendAnalysisValuesAsync(sYear, sMake, sModel, sAnnualOrMonthly, dStartDate, dEndDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getTrendAnalysisValuesAsync(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal sAnnualOrMonthly As String, ByVal dStartDate As Date, ByVal dEndDate As Date, ByVal userState As Object)
            If (Me.getTrendAnalysisValuesOperationCompleted Is Nothing) Then
                Me.getTrendAnalysisValuesOperationCompleted = AddressOf Me.OngetTrendAnalysisValuesOperationCompleted
            End If
            Me.InvokeAsync("getTrendAnalysisValues", New Object() {sYear, sMake, sModel, sAnnualOrMonthly, dStartDate, dEndDate}, Me.getTrendAnalysisValuesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetTrendAnalysisValuesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getTrendAnalysisValuesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getTrendAnalysisValuesCompleted(Me, New getTrendAnalysisValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue", Direction:=System.Web.Services.Protocols.SoapHeaderDirection.InOut),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.blackbookws.com/CPIWS/PDF", RequestElementName:="PDF", RequestNamespace:="https://www.blackbookws.com/CPIWS", ResponseElementName:="PDFResponse", ResponseNamespace:="https://www.blackbookws.com/CPIWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getPDFSpec(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal sJustCheck As String) As <System.Xml.Serialization.XmlElementAttribute("PDFResult", DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("getPDFSpec", New Object() {sYear, sMake, sModel, sJustCheck})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Function BegingetPDFSpec(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal sJustCheck As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getPDFSpec", New Object() {sYear, sMake, sModel, sJustCheck}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetPDFSpec(ByVal asyncResult As System.IAsyncResult) As Byte()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getPDFSpecAsync(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal sJustCheck As String)
            Me.getPDFSpecAsync(sYear, sMake, sModel, sJustCheck, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getPDFSpecAsync(ByVal sYear As String, ByVal sMake As String, ByVal sModel As String, ByVal sJustCheck As String, ByVal userState As Object)
            If (Me.getPDFSpecOperationCompleted Is Nothing) Then
                Me.getPDFSpecOperationCompleted = AddressOf Me.OngetPDFSpecOperationCompleted
            End If
            Me.InvokeAsync("getPDFSpec", New Object() {sYear, sMake, sModel, sJustCheck}, Me.getPDFSpecOperationCompleted, userState)
        End Sub
        
        Private Sub OngetPDFSpecOperationCompleted(ByVal arg As Object)
            If (Not (Me.getPDFSpecCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getPDFSpecCompleted(Me, New getPDFSpecCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="CPIWSSoap", [Namespace]:="https://www.blackbookws.com/CPIWS")>  _
    Partial Public Class CPIWSSoap
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private getIPAddressOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_BlackBook_CPI_CPIWS
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event getIPAddressCompleted As getIPAddressCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.blackbookws.com/CPIWS/IPAddress", RequestElementName:="IPAddress", RequestNamespace:="https://www.blackbookws.com/CPIWS", ResponseElementName:="IPAddressResponse", ResponseNamespace:="https://www.blackbookws.com/CPIWS", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getIPAddress() As <System.Xml.Serialization.XmlElementAttribute("IPAddressResult")> String
            Dim results() As Object = Me.Invoke("getIPAddress", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BegingetIPAddress(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("getIPAddress", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndgetIPAddress(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getIPAddressAsync()
            Me.getIPAddressAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getIPAddressAsync(ByVal userState As Object)
            If (Me.getIPAddressOperationCompleted Is Nothing) Then
                Me.getIPAddressOperationCompleted = AddressOf Me.OngetIPAddressOperationCompleted
            End If
            Me.InvokeAsync("getIPAddress", New Object(-1) {}, Me.getIPAddressOperationCompleted, userState)
        End Sub
        
        Private Sub OngetIPAddressOperationCompleted(ByVal arg As Object)
            If (Not (Me.getIPAddressCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getIPAddressCompleted(Me, New getIPAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="https://www.blackbookws.com/CPIWS"),  _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="https://www.blackbookws.com/CPIWS", IsNullable:=false)>  _
    Partial Public Class UserCredentials
        Inherits System.Web.Services.Protocols.SoapHeader
        
        Private useridField As String
        
        Private passwordField As String
        
        Private customerField As String
        
        Private producttypeField As String
        
        Private returncodeField As Integer
        
        Private returnmessageField As String
        
        Private anyAttrField() As System.Xml.XmlAttribute
        
        '''<remarks/>
        Public Property userid() As String
            Get
                Return Me.useridField
            End Get
            Set
                Me.useridField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property password() As String
            Get
                Return Me.passwordField
            End Get
            Set
                Me.passwordField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property customer() As String
            Get
                Return Me.customerField
            End Get
            Set
                Me.customerField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property producttype() As String
            Get
                Return Me.producttypeField
            End Get
            Set
                Me.producttypeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property returncode() As Integer
            Get
                Return Me.returncodeField
            End Get
            Set
                Me.returncodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property returnmessage() As String
            Get
                Return Me.returnmessageField
            End Get
            Set
                Me.returnmessageField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyAttributeAttribute()>  _
        Public Property AnyAttr() As System.Xml.XmlAttribute()
            Get
                Return Me.anyAttrField
            End Get
            Set
                Me.anyAttrField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getYearsCompletedEventHandler(ByVal sender As Object, ByVal e As getYearsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getYearsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getMakesCompletedEventHandler(ByVal sender As Object, ByVal e As getMakesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getMakesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getModelsCompletedEventHandler(ByVal sender As Object, ByVal e As getModelsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getModelsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getUVCValuesCompletedEventHandler(ByVal sender As Object, ByVal e As getUVCValuesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getUVCValuesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getUVCValues1CompletedEventHandler(ByVal sender As Object, ByVal e As getUVCValues1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getUVCValues1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getValuesCompletedEventHandler(ByVal sender As Object, ByVal e As getValuesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getValuesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getValues1CompletedEventHandler(ByVal sender As Object, ByVal e As getValues1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getValues1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getTrendAnalysisValuesCompletedEventHandler(ByVal sender As Object, ByVal e As getTrendAnalysisValuesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getTrendAnalysisValuesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getPDFSpecCompletedEventHandler(ByVal sender As Object, ByVal e As getPDFSpecCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getPDFSpecCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")>  _
    Public Delegate Sub getIPAddressCompletedEventHandler(ByVal sender As Object, ByVal e As getIPAddressCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getIPAddressCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
