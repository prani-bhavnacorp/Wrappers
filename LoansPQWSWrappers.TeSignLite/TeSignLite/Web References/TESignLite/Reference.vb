'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace TESignLite

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),
	 System.Diagnostics.DebuggerStepThroughAttribute(),
	 System.ComponentModel.DesignerCategoryAttribute("code"),
	 System.Web.Services.WebServiceBindingAttribute(Name:="TeSignLiteSoap", [Namespace]:="http://immonline.com/IMM.TEAASP.TeSignLite")>
	Partial Public Class TeSignLite
		Inherits Microsoft.Web.Services3.WebServicesClientProtocol

		Private CloseSessionOperationCompleted As System.Threading.SendOrPostCallback

		Private InitializeSessionOperationCompleted As System.Threading.SendOrPostCallback

		Private SubmitDocumentOperationCompleted As System.Threading.SendOrPostCallback

		Private GetSessionURLOperationCompleted As System.Threading.SendOrPostCallback

		Private GetDEAuthenticationTypesOperationCompleted As System.Threading.SendOrPostCallback

		Private GetDESigningURLOperationCompleted As System.Threading.SendOrPostCallback

		Private GetDESigningStatusOperationCompleted As System.Threading.SendOrPostCallback

		Private WebServiceAvailableOperationCompleted As System.Threading.SendOrPostCallback

		Private useDefaultCredentialsSetExplicitly As Boolean

		'''<remarks/>
		Public Sub New()
			MyBase.New
			Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_TeSignLite_TESignLite_TeSignLite
			If (Me.IsLocalFileSystemWebService(Me.Url) = True) Then
				Me.UseDefaultCredentials = True
				Me.useDefaultCredentialsSetExplicitly = False
			Else
				Me.useDefaultCredentialsSetExplicitly = True
			End If
		End Sub

		Public Shadows Property Url() As String
			Get
				Return MyBase.Url
			End Get
			Set
				If (((Me.IsLocalFileSystemWebService(MyBase.Url) = True) _
							AndAlso (Me.useDefaultCredentialsSetExplicitly = False)) _
							AndAlso (Me.IsLocalFileSystemWebService(Value) = False)) Then
					MyBase.UseDefaultCredentials = False
				End If
				MyBase.Url = Value
			End Set
		End Property

		Public Shadows Property UseDefaultCredentials() As Boolean
			Get
				Return MyBase.UseDefaultCredentials
			End Get
			Set
				MyBase.UseDefaultCredentials = Value
				Me.useDefaultCredentialsSetExplicitly = True
			End Set
		End Property

		'''<remarks/>
		Public Event CloseSessionCompleted As CloseSessionCompletedEventHandler

		'''<remarks/>
		Public Event InitializeSessionCompleted As InitializeSessionCompletedEventHandler

		'''<remarks/>
		Public Event SubmitDocumentCompleted As SubmitDocumentCompletedEventHandler

		'''<remarks/>
		Public Event GetSessionURLCompleted As GetSessionURLCompletedEventHandler

		'''<remarks/>
		Public Event GetDEAuthenticationTypesCompleted As GetDEAuthenticationTypesCompletedEventHandler

		'''<remarks/>
		Public Event GetDESigningURLCompleted As GetDESigningURLCompletedEventHandler

		'''<remarks/>
		Public Event GetDESigningStatusCompleted As GetDESigningStatusCompletedEventHandler

		'''<remarks/>
		Public Event WebServiceAvailableCompleted As WebServiceAvailableCompletedEventHandler

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://immonline.com/IMM.TEAASP.TeSignLite/CloseSession", RequestNamespace:="http://immonline.com/IMM.TEAASP.TeSignLite", ResponseNamespace:="http://immonline.com/IMM.TEAASP.TeSignLite", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function CloseSession(ByVal sSessionID As String) As String
			Dim results() As Object = Me.Invoke("CloseSession", New Object() {sSessionID})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub CloseSessionAsync(ByVal sSessionID As String)
			Me.CloseSessionAsync(sSessionID, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub CloseSessionAsync(ByVal sSessionID As String, ByVal userState As Object)
			If (Me.CloseSessionOperationCompleted Is Nothing) Then
				Me.CloseSessionOperationCompleted = AddressOf Me.OnCloseSessionOperationCompleted
			End If
			Me.InvokeAsync("CloseSession", New Object() {sSessionID}, Me.CloseSessionOperationCompleted, userState)
		End Sub

		Private Sub OnCloseSessionOperationCompleted(ByVal arg As Object)
			If (Not (Me.CloseSessionCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent CloseSessionCompleted(Me, New CloseSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://immonline.com/IMM.TEAASP.TeSignLite/InitializeSession", RequestNamespace:="http://immonline.com/IMM.TEAASP.TeSignLite", ResponseNamespace:="http://immonline.com/IMM.TEAASP.TeSignLite", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function InitializeSession(ByVal sRequest As String, ByVal sPassword As String) As String
			Dim results() As Object = Me.Invoke("InitializeSession", New Object() {sRequest, sPassword})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub InitializeSessionAsync(ByVal sRequest As String, ByVal sPassword As String)
			Me.InitializeSessionAsync(sRequest, sPassword, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub InitializeSessionAsync(ByVal sRequest As String, ByVal sPassword As String, ByVal userState As Object)
			If (Me.InitializeSessionOperationCompleted Is Nothing) Then
				Me.InitializeSessionOperationCompleted = AddressOf Me.OnInitializeSessionOperationCompleted
			End If
			Me.InvokeAsync("InitializeSession", New Object() {sRequest, sPassword}, Me.InitializeSessionOperationCompleted, userState)
		End Sub

		Private Sub OnInitializeSessionOperationCompleted(ByVal arg As Object)
			If (Not (Me.InitializeSessionCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent InitializeSessionCompleted(Me, New InitializeSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://immonline.com/IMM.TEAASP.TeSignLite/SubmitDocument", RequestNamespace:="http://immonline.com/IMM.TEAASP.TeSignLite", ResponseNamespace:="http://immonline.com/IMM.TEAASP.TeSignLite", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function SubmitDocument(ByVal sRequest As String, ByVal sFlattenPDFs As String) As String
			Dim results() As Object = Me.Invoke("SubmitDocument", New Object() {sRequest, sFlattenPDFs})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub SubmitDocumentAsync(ByVal sRequest As String, ByVal sFlattenPDFs As String)
			Me.SubmitDocumentAsync(sRequest, sFlattenPDFs, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub SubmitDocumentAsync(ByVal sRequest As String, ByVal sFlattenPDFs As String, ByVal userState As Object)
			If (Me.SubmitDocumentOperationCompleted Is Nothing) Then
				Me.SubmitDocumentOperationCompleted = AddressOf Me.OnSubmitDocumentOperationCompleted
			End If
			Me.InvokeAsync("SubmitDocument", New Object() {sRequest, sFlattenPDFs}, Me.SubmitDocumentOperationCompleted, userState)
		End Sub

		Private Sub OnSubmitDocumentOperationCompleted(ByVal arg As Object)
			If (Not (Me.SubmitDocumentCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent SubmitDocumentCompleted(Me, New SubmitDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://immonline.com/IMM.TEAASP.TeSignLite/GetSessionURL", RequestNamespace:="http://immonline.com/IMM.TEAASP.TeSignLite", ResponseNamespace:="http://immonline.com/IMM.TEAASP.TeSignLite", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function GetSessionURL(ByVal sRequest As String) As String
			Dim results() As Object = Me.Invoke("GetSessionURL", New Object() {sRequest})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub GetSessionURLAsync(ByVal sRequest As String)
			Me.GetSessionURLAsync(sRequest, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub GetSessionURLAsync(ByVal sRequest As String, ByVal userState As Object)
			If (Me.GetSessionURLOperationCompleted Is Nothing) Then
				Me.GetSessionURLOperationCompleted = AddressOf Me.OnGetSessionURLOperationCompleted
			End If
			Me.InvokeAsync("GetSessionURL", New Object() {sRequest}, Me.GetSessionURLOperationCompleted, userState)
		End Sub

		Private Sub OnGetSessionURLOperationCompleted(ByVal arg As Object)
			If (Not (Me.GetSessionURLCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent GetSessionURLCompleted(Me, New GetSessionURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://immonline.com/IMM.TEAASP.TeSignLite/GetDEAuthenticationTypes", RequestNamespace:="http://immonline.com/IMM.TEAASP.TeSignLite", ResponseNamespace:="http://immonline.com/IMM.TEAASP.TeSignLite", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function GetDEAuthenticationTypes(ByVal sRequest As String) As String
			Dim results() As Object = Me.Invoke("GetDEAuthenticationTypes", New Object() {sRequest})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub GetDEAuthenticationTypesAsync(ByVal sRequest As String)
			Me.GetDEAuthenticationTypesAsync(sRequest, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub GetDEAuthenticationTypesAsync(ByVal sRequest As String, ByVal userState As Object)
			If (Me.GetDEAuthenticationTypesOperationCompleted Is Nothing) Then
				Me.GetDEAuthenticationTypesOperationCompleted = AddressOf Me.OnGetDEAuthenticationTypesOperationCompleted
			End If
			Me.InvokeAsync("GetDEAuthenticationTypes", New Object() {sRequest}, Me.GetDEAuthenticationTypesOperationCompleted, userState)
		End Sub

		Private Sub OnGetDEAuthenticationTypesOperationCompleted(ByVal arg As Object)
			If (Not (Me.GetDEAuthenticationTypesCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent GetDEAuthenticationTypesCompleted(Me, New GetDEAuthenticationTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://immonline.com/IMM.TEAASP.TeSignLite/GetDESigningURL", RequestNamespace:="http://immonline.com/IMM.TEAASP.TeSignLite", ResponseNamespace:="http://immonline.com/IMM.TEAASP.TeSignLite", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function GetDESigningURL(ByVal sRequest As String) As String
			Dim results() As Object = Me.Invoke("GetDESigningURL", New Object() {sRequest})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub GetDESigningURLAsync(ByVal sRequest As String)
			Me.GetDESigningURLAsync(sRequest, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub GetDESigningURLAsync(ByVal sRequest As String, ByVal userState As Object)
			If (Me.GetDESigningURLOperationCompleted Is Nothing) Then
				Me.GetDESigningURLOperationCompleted = AddressOf Me.OnGetDESigningURLOperationCompleted
			End If
			Me.InvokeAsync("GetDESigningURL", New Object() {sRequest}, Me.GetDESigningURLOperationCompleted, userState)
		End Sub

		Private Sub OnGetDESigningURLOperationCompleted(ByVal arg As Object)
			If (Not (Me.GetDESigningURLCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent GetDESigningURLCompleted(Me, New GetDESigningURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://immonline.com/IMM.TEAASP.TeSignLite/GetDESigningStatus", RequestNamespace:="http://immonline.com/IMM.TEAASP.TeSignLite", ResponseNamespace:="http://immonline.com/IMM.TEAASP.TeSignLite", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function GetDESigningStatus(ByVal sRequest As String) As String
			Dim results() As Object = Me.Invoke("GetDESigningStatus", New Object() {sRequest})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub GetDESigningStatusAsync(ByVal sRequest As String)
			Me.GetDESigningStatusAsync(sRequest, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub GetDESigningStatusAsync(ByVal sRequest As String, ByVal userState As Object)
			If (Me.GetDESigningStatusOperationCompleted Is Nothing) Then
				Me.GetDESigningStatusOperationCompleted = AddressOf Me.OnGetDESigningStatusOperationCompleted
			End If
			Me.InvokeAsync("GetDESigningStatus", New Object() {sRequest}, Me.GetDESigningStatusOperationCompleted, userState)
		End Sub

		Private Sub OnGetDESigningStatusOperationCompleted(ByVal arg As Object)
			If (Not (Me.GetDESigningStatusCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent GetDESigningStatusCompleted(Me, New GetDESigningStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://immonline.com/IMM.TEAASP.TeSignLite/WebServiceAvailable", RequestNamespace:="http://immonline.com/IMM.TEAASP.TeSignLite", ResponseNamespace:="http://immonline.com/IMM.TEAASP.TeSignLite", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function WebServiceAvailable() As String
			Dim results() As Object = Me.Invoke("WebServiceAvailable", New Object(-1) {})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub WebServiceAvailableAsync()
			Me.WebServiceAvailableAsync(Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub WebServiceAvailableAsync(ByVal userState As Object)
			If (Me.WebServiceAvailableOperationCompleted Is Nothing) Then
				Me.WebServiceAvailableOperationCompleted = AddressOf Me.OnWebServiceAvailableOperationCompleted
			End If
			Me.InvokeAsync("WebServiceAvailable", New Object(-1) {}, Me.WebServiceAvailableOperationCompleted, userState)
		End Sub

		Private Sub OnWebServiceAvailableOperationCompleted(ByVal arg As Object)
			If (Not (Me.WebServiceAvailableCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent WebServiceAvailableCompleted(Me, New WebServiceAvailableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		Public Shadows Sub CancelAsync(ByVal userState As Object)
			MyBase.CancelAsync(userState)
		End Sub

		Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
			If ((url Is Nothing) _
						OrElse (url Is String.Empty)) Then
				Return False
			End If
			Dim wsUri As System.Uri = New System.Uri(url)
			If ((wsUri.Port >= 1024) _
						AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
				Return True
			End If
			Return False
		End Function
	End Class

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>
	Public Delegate Sub CloseSessionCompletedEventHandler(ByVal sender As Object, ByVal e As CloseSessionCompletedEventArgs)

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),
	 System.Diagnostics.DebuggerStepThroughAttribute(),
	 System.ComponentModel.DesignerCategoryAttribute("code")>
	Partial Public Class CloseSessionCompletedEventArgs
		Inherits System.ComponentModel.AsyncCompletedEventArgs

		Private results() As Object

		Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
			MyBase.New(exception, cancelled, userState)
			Me.results = results
		End Sub

		'''<remarks/>
		Public ReadOnly Property Result() As String
			Get
				Me.RaiseExceptionIfNecessary()
				Return CType(Me.results(0), String)
			End Get
		End Property
	End Class

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>
	Public Delegate Sub InitializeSessionCompletedEventHandler(ByVal sender As Object, ByVal e As InitializeSessionCompletedEventArgs)

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),
	 System.Diagnostics.DebuggerStepThroughAttribute(),
	 System.ComponentModel.DesignerCategoryAttribute("code")>
	Partial Public Class InitializeSessionCompletedEventArgs
		Inherits System.ComponentModel.AsyncCompletedEventArgs

		Private results() As Object

		Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
			MyBase.New(exception, cancelled, userState)
			Me.results = results
		End Sub

		'''<remarks/>
		Public ReadOnly Property Result() As String
			Get
				Me.RaiseExceptionIfNecessary()
				Return CType(Me.results(0), String)
			End Get
		End Property
	End Class

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>
	Public Delegate Sub SubmitDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As SubmitDocumentCompletedEventArgs)

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),
	 System.Diagnostics.DebuggerStepThroughAttribute(),
	 System.ComponentModel.DesignerCategoryAttribute("code")>
	Partial Public Class SubmitDocumentCompletedEventArgs
		Inherits System.ComponentModel.AsyncCompletedEventArgs

		Private results() As Object

		Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
			MyBase.New(exception, cancelled, userState)
			Me.results = results
		End Sub

		'''<remarks/>
		Public ReadOnly Property Result() As String
			Get
				Me.RaiseExceptionIfNecessary()
				Return CType(Me.results(0), String)
			End Get
		End Property
	End Class

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>
	Public Delegate Sub GetSessionURLCompletedEventHandler(ByVal sender As Object, ByVal e As GetSessionURLCompletedEventArgs)

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),
	 System.Diagnostics.DebuggerStepThroughAttribute(),
	 System.ComponentModel.DesignerCategoryAttribute("code")>
	Partial Public Class GetSessionURLCompletedEventArgs
		Inherits System.ComponentModel.AsyncCompletedEventArgs

		Private results() As Object

		Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
			MyBase.New(exception, cancelled, userState)
			Me.results = results
		End Sub

		'''<remarks/>
		Public ReadOnly Property Result() As String
			Get
				Me.RaiseExceptionIfNecessary()
				Return CType(Me.results(0), String)
			End Get
		End Property
	End Class

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>
	Public Delegate Sub GetDEAuthenticationTypesCompletedEventHandler(ByVal sender As Object, ByVal e As GetDEAuthenticationTypesCompletedEventArgs)

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),
	 System.Diagnostics.DebuggerStepThroughAttribute(),
	 System.ComponentModel.DesignerCategoryAttribute("code")>
	Partial Public Class GetDEAuthenticationTypesCompletedEventArgs
		Inherits System.ComponentModel.AsyncCompletedEventArgs

		Private results() As Object

		Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
			MyBase.New(exception, cancelled, userState)
			Me.results = results
		End Sub

		'''<remarks/>
		Public ReadOnly Property Result() As String
			Get
				Me.RaiseExceptionIfNecessary()
				Return CType(Me.results(0), String)
			End Get
		End Property
	End Class

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>
	Public Delegate Sub GetDESigningURLCompletedEventHandler(ByVal sender As Object, ByVal e As GetDESigningURLCompletedEventArgs)

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),
	 System.Diagnostics.DebuggerStepThroughAttribute(),
	 System.ComponentModel.DesignerCategoryAttribute("code")>
	Partial Public Class GetDESigningURLCompletedEventArgs
		Inherits System.ComponentModel.AsyncCompletedEventArgs

		Private results() As Object

		Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
			MyBase.New(exception, cancelled, userState)
			Me.results = results
		End Sub

		'''<remarks/>
		Public ReadOnly Property Result() As String
			Get
				Me.RaiseExceptionIfNecessary()
				Return CType(Me.results(0), String)
			End Get
		End Property
	End Class

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>
	Public Delegate Sub GetDESigningStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetDESigningStatusCompletedEventArgs)

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),
	 System.Diagnostics.DebuggerStepThroughAttribute(),
	 System.ComponentModel.DesignerCategoryAttribute("code")>
	Partial Public Class GetDESigningStatusCompletedEventArgs
		Inherits System.ComponentModel.AsyncCompletedEventArgs

		Private results() As Object

		Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
			MyBase.New(exception, cancelled, userState)
			Me.results = results
		End Sub

		'''<remarks/>
		Public ReadOnly Property Result() As String
			Get
				Me.RaiseExceptionIfNecessary()
				Return CType(Me.results(0), String)
			End Get
		End Property
	End Class

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>
	Public Delegate Sub WebServiceAvailableCompletedEventHandler(ByVal sender As Object, ByVal e As WebServiceAvailableCompletedEventArgs)

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),
	 System.Diagnostics.DebuggerStepThroughAttribute(),
	 System.ComponentModel.DesignerCategoryAttribute("code")>
	Partial Public Class WebServiceAvailableCompletedEventArgs
		Inherits System.ComponentModel.AsyncCompletedEventArgs

		Private results() As Object

		Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
			MyBase.New(exception, cancelled, userState)
			Me.results = results
		End Sub

		'''<remarks/>
		Public ReadOnly Property Result() As String
			Get
				Me.RaiseExceptionIfNecessary()
				Return CType(Me.results(0), String)
			End Get
		End Property
	End Class
End Namespace
