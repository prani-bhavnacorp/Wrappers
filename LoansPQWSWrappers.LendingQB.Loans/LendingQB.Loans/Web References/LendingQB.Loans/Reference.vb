'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace LendingQB.Loans
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),
	 System.Web.Services.WebServiceBindingAttribute(Name:="LoanSoap", [Namespace]:="http://www.lendersoffice.com/los/webservices/")>
	Partial Public Class LoanWse
		Inherits Microsoft.Web.Services3.WebServicesClientProtocol

		Private DocumentFrameworkGetFormsListOperationCompleted As System.Threading.SendOrPostCallback

		Private DocumentFrameworkGenerateDocsOperationCompleted As System.Threading.SendOrPostCallback

		Private DocumentFrameworkDownloadGeneratedDocumentOperationCompleted As System.Threading.SendOrPostCallback

		Private GenerateClosestCounselingOrganizationOperationCompleted As System.Threading.SendOrPostCallback

		Private RecordInitialDisclosureEventWithPartnerKeyOperationCompleted As System.Threading.SendOrPostCallback

		Private CreateClosingDisclosureArchiveByReferenceNumberOperationCompleted As System.Threading.SendOrPostCallback

		Private CreateClosingDisclosureArchiveOperationCompleted As System.Threading.SendOrPostCallback

		Private ConvertLeadToLoanOperationCompleted As System.Threading.SendOrPostCallback

		Private LoadOperationCompleted As System.Threading.SendOrPostCallback

		Private LoadByRefNumberOperationCompleted As System.Threading.SendOrPostCallback

		Private DeleteApplicantOperationCompleted As System.Threading.SendOrPostCallback

		Private TransferLegacyApplicationOperationCompleted As System.Threading.SendOrPostCallback

		Private RemoveBorrowerOperationCompleted As System.Threading.SendOrPostCallback

		Private AddBorrowerOperationCompleted As System.Threading.SendOrPostCallback

		Private ParseFnma32ToLoXmlOperationCompleted As System.Threading.SendOrPostCallback

		Private UploadPDFDocumentOperationCompleted As System.Threading.SendOrPostCallback

		Private UploadPDFDocumentToAppOperationCompleted As System.Threading.SendOrPostCallback

		Private UploadPDFDocumentAsServiceOperationCompleted As System.Threading.SendOrPostCallback

		Private UploadPDFDocumentToAppAsServiceOperationCompleted As System.Threading.SendOrPostCallback

		Private SaveOperationCompleted As System.Threading.SendOrPostCallback

		Private SaveByRefNumberOperationCompleted As System.Threading.SendOrPostCallback

		Private IsLoanExistedOperationCompleted As System.Threading.SendOrPostCallback

		Private RetrieveCustomReportOperationCompleted As System.Threading.SendOrPostCallback

		Private DeleteLoanOperationCompleted As System.Threading.SendOrPostCallback

		Private CreateWithOptionsOperationCompleted As System.Threading.SendOrPostCallback

		Private CreateOperationCompleted As System.Threading.SendOrPostCallback

		Private CreateLeadOperationCompleted As System.Threading.SendOrPostCallback

		Private RegisterLoanProgramWithRateOptionIdOperationCompleted As System.Threading.SendOrPostCallback

		Private RegisterLoanProgramOperationCompleted As System.Threading.SendOrPostCallback

		Private RegisterLoanProgramAndSkipDuplicateCheckOperationCompleted As System.Threading.SendOrPostCallback

		Private RegisterLoanProgramWithRateOptionIdAndSkipDuplicateCheckOperationCompleted As System.Threading.SendOrPostCallback

		Private RegisterLoanProgramWithOptionsOperationCompleted As System.Threading.SendOrPostCallback

		Private LockLoanProgramWithRateOptionIdOperationCompleted As System.Threading.SendOrPostCallback

		Private LockLoanProgramOperationCompleted As System.Threading.SendOrPostCallback

		Private LockLoanProgramAndSkipDuplicateCheckOperationCompleted As System.Threading.SendOrPostCallback

		Private LockLoanProgramWithRateOptionIdAndSkipDuplicateCheckOperationCompleted As System.Threading.SendOrPostCallback

		Private LockLoanProgramWithOptionsOperationCompleted As System.Threading.SendOrPostCallback

		Private BreakBrokerRateLockOperationCompleted As System.Threading.SendOrPostCallback

		Private RemoveRequestedRateOperationCompleted As System.Threading.SendOrPostCallback

		Private ListEdocsByLoanNumberOperationCompleted As System.Threading.SendOrPostCallback

		Private DownloadEdocsPdfByIdOperationCompleted As System.Threading.SendOrPostCallback

		Private DownloadEdocsByShippingTemplateOperationCompleted As System.Threading.SendOrPostCallback

		Private PrepareLoanForResubmissionOperationCompleted As System.Threading.SendOrPostCallback

		Private CreateWithULDDOperationCompleted As System.Threading.SendOrPostCallback

		Private CreateWithFannieMaeFileOperationCompleted As System.Threading.SendOrPostCallback

		Private CreateWithCalyxPointFileOperationCompleted As System.Threading.SendOrPostCallback

		Private ListClosingCostTemplateNameOperationCompleted As System.Threading.SendOrPostCallback

		Private RetrieveClosingCostTemplateFeeListOperationCompleted As System.Threading.SendOrPostCallback

		Private ListModifiedLoansOperationCompleted As System.Threading.SendOrPostCallback

		Private ListModifiedLoansByAppCodeOperationCompleted As System.Threading.SendOrPostCallback

		Private ListModifiedEDocsByAppCodeOperationCompleted As System.Threading.SendOrPostCallback

		Private ClearModifiedLoansListOperationCompleted As System.Threading.SendOrPostCallback

		Private ClearModifiedLoansListByAppCodeOperationCompleted As System.Threading.SendOrPostCallback

		Private ClearModifiedLoanByNameOperationCompleted As System.Threading.SendOrPostCallback

		Private ClearModifiedLoanByNameByAppCodeOperationCompleted As System.Threading.SendOrPostCallback

		Private ListMyActiveTaskListOperationCompleted As System.Threading.SendOrPostCallback

		Private RetrieveTaskByIdOperationCompleted As System.Threading.SendOrPostCallback

		Private RetrieveUsersAssignedToLoanOperationCompleted As System.Threading.SendOrPostCallback

		Private TaskEditOperationCompleted As System.Threading.SendOrPostCallback

		Private TaskResolveOperationCompleted As System.Threading.SendOrPostCallback

		Private SaveMismo23OperationCompleted As System.Threading.SendOrPostCallback

		Private LoadMismo23ByLoanNameOperationCompleted As System.Threading.SendOrPostCallback

		Private GetPdfByLoanNameOperationCompleted As System.Threading.SendOrPostCallback

		Private UploadLONXmlOperationCompleted As System.Threading.SendOrPostCallback

		Private SearchOperationCompleted As System.Threading.SendOrPostCallback

		Private RunInternalPricingOperationCompleted As System.Threading.SendOrPostCallback

		Private RunQuickPricerOperationCompleted As System.Threading.SendOrPostCallback

		Private RunQuickPricerForLockDeskOperationCompleted As System.Threading.SendOrPostCallback

		Private SubmitTotalScorecardOperationCompleted As System.Threading.SendOrPostCallback

		Private SubmitToFannieMaeEarlyCheckOperationCompleted As System.Threading.SendOrPostCallback

		Private SubmitToDesktopUnderwriterSeamlessOperationCompleted As System.Threading.SendOrPostCallback

		Private SubmitToDesktopUnderwriterSeamless_OptionalCreditOperationCompleted As System.Threading.SendOrPostCallback

		Private SubmitToDesktopUnderwriterSeamlessReissueCreditOperationCompleted As System.Threading.SendOrPostCallback

		Private SubmitToDesktopUnderwriterSeamlessReissueCredit_OptionalCreditImportOperationCompleted As System.Threading.SendOrPostCallback

		Private SubmitToDesktopOriginatorSeamlessOperationCompleted As System.Threading.SendOrPostCallback

		Private SubmitToDesktopUnderwriterWithInstituteIdOperationCompleted As System.Threading.SendOrPostCallback

		Private SubmitToDesktopUnderwriterOperationCompleted As System.Threading.SendOrPostCallback

		Private ImportFromFreddieMacOperationCompleted As System.Threading.SendOrPostCallback

		Private CreateWithDesktopUnderwriterOperationCompleted As System.Threading.SendOrPostCallback

		Private ImportFromFannieMaeWithInstitutionIdOperationCompleted As System.Threading.SendOrPostCallback

		Private ImportFromFannieMaeOperationCompleted As System.Threading.SendOrPostCallback

		Private GetDesktopUnderwriterCasefileStatusByLoanFileOperationCompleted As System.Threading.SendOrPostCallback

		Private GetDesktopUnderwriterCasefileStatusOperationCompleted As System.Threading.SendOrPostCallback

		Private SubmitToDesktopOriginatorOperationCompleted As System.Threading.SendOrPostCallback

		Private RetrieveRecentActiveLoanListOperationCompleted As System.Threading.SendOrPostCallback

		Private RetrieveLoanActivityListOperationCompleted As System.Threading.SendOrPostCallback

		Private RetrievePmlLoanListOperationCompleted As System.Threading.SendOrPostCallback

		Private CheckValidAppStatusOperationCompleted As System.Threading.SendOrPostCallback

		Private RecievePdfOperationCompleted As System.Threading.SendOrPostCallback

		Private CreateConsumerDocumentRequestOperationCompleted As System.Threading.SendOrPostCallback

		Private RetrieveConsumerDocumentRequestsOperationCompleted As System.Threading.SendOrPostCallback

		Private UploadConsumerDocumentRequestDocumentOperationCompleted As System.Threading.SendOrPostCallback

		Private RetrieveConsumerDocumentRequestDocumentOperationCompleted As System.Threading.SendOrPostCallback

		Private GetAuditLogOperationCompleted As System.Threading.SendOrPostCallback

		Private DocumentFrameworkGetAvailableDocPackagesAndPlanCodesOperationCompleted As System.Threading.SendOrPostCallback

		Private DocumentFrameworkPerformAuditOperationCompleted As System.Threading.SendOrPostCallback

		Private useDefaultCredentialsSetExplicitly As Boolean

		'''<remarks/>
		Public Sub New()
			MyBase.New
			Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LendingQB_Loans_LendingQB_Loans_Loan
			If (Me.IsLocalFileSystemWebService(Me.Url) = True) Then
				Me.UseDefaultCredentials = True
				Me.useDefaultCredentialsSetExplicitly = False
			Else
				Me.useDefaultCredentialsSetExplicitly = True
			End If
		End Sub

		Public Shadows Property Url() As String
			Get
				Return MyBase.Url
			End Get
			Set
				If (((Me.IsLocalFileSystemWebService(MyBase.Url) = True) _
							AndAlso (Me.useDefaultCredentialsSetExplicitly = False)) _
							AndAlso (Me.IsLocalFileSystemWebService(Value) = False)) Then
					MyBase.UseDefaultCredentials = False
				End If
				MyBase.Url = Value
			End Set
		End Property

		Public Shadows Property UseDefaultCredentials() As Boolean
			Get
				Return MyBase.UseDefaultCredentials
			End Get
			Set
				MyBase.UseDefaultCredentials = Value
				Me.useDefaultCredentialsSetExplicitly = True
			End Set
		End Property

		'''<remarks/>
		Public Event DocumentFrameworkGetFormsListCompleted As DocumentFrameworkGetFormsListCompletedEventHandler

		'''<remarks/>
		Public Event DocumentFrameworkGenerateDocsCompleted As DocumentFrameworkGenerateDocsCompletedEventHandler

		'''<remarks/>
		Public Event DocumentFrameworkDownloadGeneratedDocumentCompleted As DocumentFrameworkDownloadGeneratedDocumentCompletedEventHandler

		'''<remarks/>
		Public Event GenerateClosestCounselingOrganizationCompleted As GenerateClosestCounselingOrganizationCompletedEventHandler

		'''<remarks/>
		Public Event RecordInitialDisclosureEventWithPartnerKeyCompleted As RecordInitialDisclosureEventWithPartnerKeyCompletedEventHandler

		'''<remarks/>
		Public Event CreateClosingDisclosureArchiveByReferenceNumberCompleted As CreateClosingDisclosureArchiveByReferenceNumberCompletedEventHandler

		'''<remarks/>
		Public Event CreateClosingDisclosureArchiveCompleted As CreateClosingDisclosureArchiveCompletedEventHandler

		'''<remarks/>
		Public Event ConvertLeadToLoanCompleted As ConvertLeadToLoanCompletedEventHandler

		'''<remarks/>
		Public Event LoadCompleted As LoadCompletedEventHandler

		'''<remarks/>
		Public Event LoadByRefNumberCompleted As LoadByRefNumberCompletedEventHandler

		'''<remarks/>
		Public Event DeleteApplicantCompleted As DeleteApplicantCompletedEventHandler

		'''<remarks/>
		Public Event TransferLegacyApplicationCompleted As TransferLegacyApplicationCompletedEventHandler

		'''<remarks/>
		Public Event RemoveBorrowerCompleted As RemoveBorrowerCompletedEventHandler

		'''<remarks/>
		Public Event AddBorrowerCompleted As AddBorrowerCompletedEventHandler

		'''<remarks/>
		Public Event ParseFnma32ToLoXmlCompleted As ParseFnma32ToLoXmlCompletedEventHandler

		'''<remarks/>
		Public Event UploadPDFDocumentCompleted As UploadPDFDocumentCompletedEventHandler

		'''<remarks/>
		Public Event UploadPDFDocumentToAppCompleted As UploadPDFDocumentToAppCompletedEventHandler

		'''<remarks/>
		Public Event UploadPDFDocumentAsServiceCompleted As UploadPDFDocumentAsServiceCompletedEventHandler

		'''<remarks/>
		Public Event UploadPDFDocumentToAppAsServiceCompleted As UploadPDFDocumentToAppAsServiceCompletedEventHandler

		'''<remarks/>
		Public Event SaveCompleted As SaveCompletedEventHandler

		'''<remarks/>
		Public Event SaveByRefNumberCompleted As SaveByRefNumberCompletedEventHandler

		'''<remarks/>
		Public Event IsLoanExistedCompleted As IsLoanExistedCompletedEventHandler

		'''<remarks/>
		Public Event RetrieveCustomReportCompleted As RetrieveCustomReportCompletedEventHandler

		'''<remarks/>
		Public Event DeleteLoanCompleted As DeleteLoanCompletedEventHandler

		'''<remarks/>
		Public Event CreateWithOptionsCompleted As CreateWithOptionsCompletedEventHandler

		'''<remarks/>
		Public Event CreateCompleted As CreateCompletedEventHandler

		'''<remarks/>
		Public Event CreateLeadCompleted As CreateLeadCompletedEventHandler

		'''<remarks/>
		Public Event RegisterLoanProgramWithRateOptionIdCompleted As RegisterLoanProgramWithRateOptionIdCompletedEventHandler

		'''<remarks/>
		Public Event RegisterLoanProgramCompleted As RegisterLoanProgramCompletedEventHandler

		'''<remarks/>
		Public Event RegisterLoanProgramAndSkipDuplicateCheckCompleted As RegisterLoanProgramAndSkipDuplicateCheckCompletedEventHandler

		'''<remarks/>
		Public Event RegisterLoanProgramWithRateOptionIdAndSkipDuplicateCheckCompleted As RegisterLoanProgramWithRateOptionIdAndSkipDuplicateCheckCompletedEventHandler

		'''<remarks/>
		Public Event RegisterLoanProgramWithOptionsCompleted As RegisterLoanProgramWithOptionsCompletedEventHandler

		'''<remarks/>
		Public Event LockLoanProgramWithRateOptionIdCompleted As LockLoanProgramWithRateOptionIdCompletedEventHandler

		'''<remarks/>
		Public Event LockLoanProgramCompleted As LockLoanProgramCompletedEventHandler

		'''<remarks/>
		Public Event LockLoanProgramAndSkipDuplicateCheckCompleted As LockLoanProgramAndSkipDuplicateCheckCompletedEventHandler

		'''<remarks/>
		Public Event LockLoanProgramWithRateOptionIdAndSkipDuplicateCheckCompleted As LockLoanProgramWithRateOptionIdAndSkipDuplicateCheckCompletedEventHandler

		'''<remarks/>
		Public Event LockLoanProgramWithOptionsCompleted As LockLoanProgramWithOptionsCompletedEventHandler

		'''<remarks/>
		Public Event BreakBrokerRateLockCompleted As BreakBrokerRateLockCompletedEventHandler

		'''<remarks/>
		Public Event RemoveRequestedRateCompleted As RemoveRequestedRateCompletedEventHandler

		'''<remarks/>
		Public Event ListEdocsByLoanNumberCompleted As ListEdocsByLoanNumberCompletedEventHandler

		'''<remarks/>
		Public Event DownloadEdocsPdfByIdCompleted As DownloadEdocsPdfByIdCompletedEventHandler

		'''<remarks/>
		Public Event DownloadEdocsByShippingTemplateCompleted As DownloadEdocsByShippingTemplateCompletedEventHandler

		'''<remarks/>
		Public Event PrepareLoanForResubmissionCompleted As PrepareLoanForResubmissionCompletedEventHandler

		'''<remarks/>
		Public Event CreateWithULDDCompleted As CreateWithULDDCompletedEventHandler

		'''<remarks/>
		Public Event CreateWithFannieMaeFileCompleted As CreateWithFannieMaeFileCompletedEventHandler

		'''<remarks/>
		Public Event CreateWithCalyxPointFileCompleted As CreateWithCalyxPointFileCompletedEventHandler

		'''<remarks/>
		Public Event ListClosingCostTemplateNameCompleted As ListClosingCostTemplateNameCompletedEventHandler

		'''<remarks/>
		Public Event RetrieveClosingCostTemplateFeeListCompleted As RetrieveClosingCostTemplateFeeListCompletedEventHandler

		'''<remarks/>
		Public Event ListModifiedLoansCompleted As ListModifiedLoansCompletedEventHandler

		'''<remarks/>
		Public Event ListModifiedLoansByAppCodeCompleted As ListModifiedLoansByAppCodeCompletedEventHandler

		'''<remarks/>
		Public Event ListModifiedEDocsByAppCodeCompleted As ListModifiedEDocsByAppCodeCompletedEventHandler

		'''<remarks/>
		Public Event ClearModifiedLoansListCompleted As ClearModifiedLoansListCompletedEventHandler

		'''<remarks/>
		Public Event ClearModifiedLoansListByAppCodeCompleted As ClearModifiedLoansListByAppCodeCompletedEventHandler

		'''<remarks/>
		Public Event ClearModifiedLoanByNameCompleted As ClearModifiedLoanByNameCompletedEventHandler

		'''<remarks/>
		Public Event ClearModifiedLoanByNameByAppCodeCompleted As ClearModifiedLoanByNameByAppCodeCompletedEventHandler

		'''<remarks/>
		Public Event ListMyActiveTaskListCompleted As ListMyActiveTaskListCompletedEventHandler

		'''<remarks/>
		Public Event RetrieveTaskByIdCompleted As RetrieveTaskByIdCompletedEventHandler

		'''<remarks/>
		Public Event RetrieveUsersAssignedToLoanCompleted As RetrieveUsersAssignedToLoanCompletedEventHandler

		'''<remarks/>
		Public Event TaskEditCompleted As TaskEditCompletedEventHandler

		'''<remarks/>
		Public Event TaskResolveCompleted As TaskResolveCompletedEventHandler

		'''<remarks/>
		Public Event SaveMismo23Completed As SaveMismo23CompletedEventHandler

		'''<remarks/>
		Public Event LoadMismo23ByLoanNameCompleted As LoadMismo23ByLoanNameCompletedEventHandler

		'''<remarks/>
		Public Event GetPdfByLoanNameCompleted As GetPdfByLoanNameCompletedEventHandler

		'''<remarks/>
		Public Event UploadLONXmlCompleted As UploadLONXmlCompletedEventHandler

		'''<remarks/>
		Public Event SearchCompleted As SearchCompletedEventHandler

		'''<remarks/>
		Public Event RunInternalPricingCompleted As RunInternalPricingCompletedEventHandler

		'''<remarks/>
		Public Event RunQuickPricerCompleted As RunQuickPricerCompletedEventHandler

		'''<remarks/>
		Public Event RunQuickPricerForLockDeskCompleted As RunQuickPricerForLockDeskCompletedEventHandler

		'''<remarks/>
		Public Event SubmitTotalScorecardCompleted As SubmitTotalScorecardCompletedEventHandler

		'''<remarks/>
		Public Event SubmitToFannieMaeEarlyCheckCompleted As SubmitToFannieMaeEarlyCheckCompletedEventHandler

		'''<remarks/>
		Public Event SubmitToDesktopUnderwriterSeamlessCompleted As SubmitToDesktopUnderwriterSeamlessCompletedEventHandler

		'''<remarks/>
		Public Event SubmitToDesktopUnderwriterSeamless_OptionalCreditCompleted As SubmitToDesktopUnderwriterSeamless_OptionalCreditCompletedEventHandler

		'''<remarks/>
		Public Event SubmitToDesktopUnderwriterSeamlessReissueCreditCompleted As SubmitToDesktopUnderwriterSeamlessReissueCreditCompletedEventHandler

		'''<remarks/>
		Public Event SubmitToDesktopUnderwriterSeamlessReissueCredit_OptionalCreditImportCompleted As SubmitToDesktopUnderwriterSeamlessReissueCredit_OptionalCreditImportCompletedEventHandler

		'''<remarks/>
		Public Event SubmitToDesktopOriginatorSeamlessCompleted As SubmitToDesktopOriginatorSeamlessCompletedEventHandler

		'''<remarks/>
		Public Event SubmitToDesktopUnderwriterWithInstituteIdCompleted As SubmitToDesktopUnderwriterWithInstituteIdCompletedEventHandler

		'''<remarks/>
		Public Event SubmitToDesktopUnderwriterCompleted As SubmitToDesktopUnderwriterCompletedEventHandler

		'''<remarks/>
		Public Event ImportFromFreddieMacCompleted As ImportFromFreddieMacCompletedEventHandler

		'''<remarks/>
		Public Event CreateWithDesktopUnderwriterCompleted As CreateWithDesktopUnderwriterCompletedEventHandler

		'''<remarks/>
		Public Event ImportFromFannieMaeWithInstitutionIdCompleted As ImportFromFannieMaeWithInstitutionIdCompletedEventHandler

		'''<remarks/>
		Public Event ImportFromFannieMaeCompleted As ImportFromFannieMaeCompletedEventHandler

		'''<remarks/>
		Public Event GetDesktopUnderwriterCasefileStatusByLoanFileCompleted As GetDesktopUnderwriterCasefileStatusByLoanFileCompletedEventHandler

		'''<remarks/>
		Public Event GetDesktopUnderwriterCasefileStatusCompleted As GetDesktopUnderwriterCasefileStatusCompletedEventHandler

		'''<remarks/>
		Public Event SubmitToDesktopOriginatorCompleted As SubmitToDesktopOriginatorCompletedEventHandler

		'''<remarks/>
		Public Event RetrieveRecentActiveLoanListCompleted As RetrieveRecentActiveLoanListCompletedEventHandler

		'''<remarks/>
		Public Event RetrieveLoanActivityListCompleted As RetrieveLoanActivityListCompletedEventHandler

		'''<remarks/>
		Public Event RetrievePmlLoanListCompleted As RetrievePmlLoanListCompletedEventHandler

		'''<remarks/>
		Public Event CheckValidAppStatusCompleted As CheckValidAppStatusCompletedEventHandler

		'''<remarks/>
		Public Event RecievePdfCompleted As RecievePdfCompletedEventHandler

		'''<remarks/>
		Public Event CreateConsumerDocumentRequestCompleted As CreateConsumerDocumentRequestCompletedEventHandler

		'''<remarks/>
		Public Event RetrieveConsumerDocumentRequestsCompleted As RetrieveConsumerDocumentRequestsCompletedEventHandler

		'''<remarks/>
		Public Event UploadConsumerDocumentRequestDocumentCompleted As UploadConsumerDocumentRequestDocumentCompletedEventHandler

		'''<remarks/>
		Public Event RetrieveConsumerDocumentRequestDocumentCompleted As RetrieveConsumerDocumentRequestDocumentCompletedEventHandler

		'''<remarks/>
		Public Event GetAuditLogCompleted As GetAuditLogCompletedEventHandler

		'''<remarks/>
		Public Event DocumentFrameworkGetAvailableDocPackagesAndPlanCodesCompleted As DocumentFrameworkGetAvailableDocPackagesAndPlanCodesCompletedEventHandler

		'''<remarks/>
		Public Event DocumentFrameworkPerformAuditCompleted As DocumentFrameworkPerformAuditCompletedEventHandler

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/DocumentFrameworkGetFormsList", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function DocumentFrameworkGetFormsList(ByVal sTicket As String, ByVal sLNm As String, ByVal vendorId As String, ByVal userName As String, ByVal password As String, ByVal accountId As String, ByVal packageId As String, ByVal planCodeId As String) As String
			Dim results() As Object = Me.Invoke("DocumentFrameworkGetFormsList", New Object() {sTicket, sLNm, vendorId, userName, password, accountId, packageId, planCodeId})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub DocumentFrameworkGetFormsListAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal vendorId As String, ByVal userName As String, ByVal password As String, ByVal accountId As String, ByVal packageId As String, ByVal planCodeId As String)
			Me.DocumentFrameworkGetFormsListAsync(sTicket, sLNm, vendorId, userName, password, accountId, packageId, planCodeId, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub DocumentFrameworkGetFormsListAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal vendorId As String, ByVal userName As String, ByVal password As String, ByVal accountId As String, ByVal packageId As String, ByVal planCodeId As String, ByVal userState As Object)
			If (Me.DocumentFrameworkGetFormsListOperationCompleted Is Nothing) Then
				Me.DocumentFrameworkGetFormsListOperationCompleted = AddressOf Me.OnDocumentFrameworkGetFormsListOperationCompleted
			End If
			Me.InvokeAsync("DocumentFrameworkGetFormsList", New Object() {sTicket, sLNm, vendorId, userName, password, accountId, packageId, planCodeId}, Me.DocumentFrameworkGetFormsListOperationCompleted, userState)
		End Sub

		Private Sub OnDocumentFrameworkGetFormsListOperationCompleted(ByVal arg As Object)
			If (Not (Me.DocumentFrameworkGetFormsListCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent DocumentFrameworkGetFormsListCompleted(Me, New DocumentFrameworkGetFormsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/DocumentFrameworkGenerateDocs", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function DocumentFrameworkGenerateDocs(ByVal sTicket As String, ByVal sLNm As String, ByVal token As String, ByVal optionsXml As String) As String
			Dim results() As Object = Me.Invoke("DocumentFrameworkGenerateDocs", New Object() {sTicket, sLNm, token, optionsXml})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub DocumentFrameworkGenerateDocsAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal token As String, ByVal optionsXml As String)
			Me.DocumentFrameworkGenerateDocsAsync(sTicket, sLNm, token, optionsXml, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub DocumentFrameworkGenerateDocsAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal token As String, ByVal optionsXml As String, ByVal userState As Object)
			If (Me.DocumentFrameworkGenerateDocsOperationCompleted Is Nothing) Then
				Me.DocumentFrameworkGenerateDocsOperationCompleted = AddressOf Me.OnDocumentFrameworkGenerateDocsOperationCompleted
			End If
			Me.InvokeAsync("DocumentFrameworkGenerateDocs", New Object() {sTicket, sLNm, token, optionsXml}, Me.DocumentFrameworkGenerateDocsOperationCompleted, userState)
		End Sub

		Private Sub OnDocumentFrameworkGenerateDocsOperationCompleted(ByVal arg As Object)
			If (Not (Me.DocumentFrameworkGenerateDocsCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent DocumentFrameworkGenerateDocsCompleted(Me, New DocumentFrameworkGenerateDocsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/DocumentFrameworkDownloadGeneratedDo" &
			"cument", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function DocumentFrameworkDownloadGeneratedDocument(ByVal sTicket As String, ByVal sLNm As String, ByVal downloadKey As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
			Dim results() As Object = Me.Invoke("DocumentFrameworkDownloadGeneratedDocument", New Object() {sTicket, sLNm, downloadKey})
			Return CType(results(0), Byte())
		End Function

		'''<remarks/>
		Public Overloads Sub DocumentFrameworkDownloadGeneratedDocumentAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal downloadKey As String)
			Me.DocumentFrameworkDownloadGeneratedDocumentAsync(sTicket, sLNm, downloadKey, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub DocumentFrameworkDownloadGeneratedDocumentAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal downloadKey As String, ByVal userState As Object)
			If (Me.DocumentFrameworkDownloadGeneratedDocumentOperationCompleted Is Nothing) Then
				Me.DocumentFrameworkDownloadGeneratedDocumentOperationCompleted = AddressOf Me.OnDocumentFrameworkDownloadGeneratedDocumentOperationCompleted
			End If
			Me.InvokeAsync("DocumentFrameworkDownloadGeneratedDocument", New Object() {sTicket, sLNm, downloadKey}, Me.DocumentFrameworkDownloadGeneratedDocumentOperationCompleted, userState)
		End Sub

		Private Sub OnDocumentFrameworkDownloadGeneratedDocumentOperationCompleted(ByVal arg As Object)
			If (Not (Me.DocumentFrameworkDownloadGeneratedDocumentCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent DocumentFrameworkDownloadGeneratedDocumentCompleted(Me, New DocumentFrameworkDownloadGeneratedDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/GenerateClosestCounselingOrganizatio" &
			"n", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function GenerateClosestCounselingOrganization(ByVal sTicket As String, ByVal sLNm As String) As String
			Dim results() As Object = Me.Invoke("GenerateClosestCounselingOrganization", New Object() {sTicket, sLNm})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub GenerateClosestCounselingOrganizationAsync(ByVal sTicket As String, ByVal sLNm As String)
			Me.GenerateClosestCounselingOrganizationAsync(sTicket, sLNm, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub GenerateClosestCounselingOrganizationAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal userState As Object)
			If (Me.GenerateClosestCounselingOrganizationOperationCompleted Is Nothing) Then
				Me.GenerateClosestCounselingOrganizationOperationCompleted = AddressOf Me.OnGenerateClosestCounselingOrganizationOperationCompleted
			End If
			Me.InvokeAsync("GenerateClosestCounselingOrganization", New Object() {sTicket, sLNm}, Me.GenerateClosestCounselingOrganizationOperationCompleted, userState)
		End Sub

		Private Sub OnGenerateClosestCounselingOrganizationOperationCompleted(ByVal arg As Object)
			If (Not (Me.GenerateClosestCounselingOrganizationCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent GenerateClosestCounselingOrganizationCompleted(Me, New GenerateClosestCounselingOrganizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RecordInitialDisclosureEventWithPart" &
			"nerKey", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RecordInitialDisclosureEventWithPartnerKey(ByVal sTicket As String, ByVal loanNumber As String, ByVal dataXml As String, ByVal secretKey As String) As String
			Dim results() As Object = Me.Invoke("RecordInitialDisclosureEventWithPartnerKey", New Object() {sTicket, loanNumber, dataXml, secretKey})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub RecordInitialDisclosureEventWithPartnerKeyAsync(ByVal sTicket As String, ByVal loanNumber As String, ByVal dataXml As String, ByVal secretKey As String)
			Me.RecordInitialDisclosureEventWithPartnerKeyAsync(sTicket, loanNumber, dataXml, secretKey, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RecordInitialDisclosureEventWithPartnerKeyAsync(ByVal sTicket As String, ByVal loanNumber As String, ByVal dataXml As String, ByVal secretKey As String, ByVal userState As Object)
			If (Me.RecordInitialDisclosureEventWithPartnerKeyOperationCompleted Is Nothing) Then
				Me.RecordInitialDisclosureEventWithPartnerKeyOperationCompleted = AddressOf Me.OnRecordInitialDisclosureEventWithPartnerKeyOperationCompleted
			End If
			Me.InvokeAsync("RecordInitialDisclosureEventWithPartnerKey", New Object() {sTicket, loanNumber, dataXml, secretKey}, Me.RecordInitialDisclosureEventWithPartnerKeyOperationCompleted, userState)
		End Sub

		Private Sub OnRecordInitialDisclosureEventWithPartnerKeyOperationCompleted(ByVal arg As Object)
			If (Not (Me.RecordInitialDisclosureEventWithPartnerKeyCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RecordInitialDisclosureEventWithPartnerKeyCompleted(Me, New RecordInitialDisclosureEventWithPartnerKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/CreateClosingDisclosureArchiveByRefe" &
			"renceNumber", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function CreateClosingDisclosureArchiveByReferenceNumber(ByVal authTicket As String, ByVal loanRefNumber As String, ByVal dataXml As String, ByVal secretKey As String) As String
			Dim results() As Object = Me.Invoke("CreateClosingDisclosureArchiveByReferenceNumber", New Object() {authTicket, loanRefNumber, dataXml, secretKey})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub CreateClosingDisclosureArchiveByReferenceNumberAsync(ByVal authTicket As String, ByVal loanRefNumber As String, ByVal dataXml As String, ByVal secretKey As String)
			Me.CreateClosingDisclosureArchiveByReferenceNumberAsync(authTicket, loanRefNumber, dataXml, secretKey, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub CreateClosingDisclosureArchiveByReferenceNumberAsync(ByVal authTicket As String, ByVal loanRefNumber As String, ByVal dataXml As String, ByVal secretKey As String, ByVal userState As Object)
			If (Me.CreateClosingDisclosureArchiveByReferenceNumberOperationCompleted Is Nothing) Then
				Me.CreateClosingDisclosureArchiveByReferenceNumberOperationCompleted = AddressOf Me.OnCreateClosingDisclosureArchiveByReferenceNumberOperationCompleted
			End If
			Me.InvokeAsync("CreateClosingDisclosureArchiveByReferenceNumber", New Object() {authTicket, loanRefNumber, dataXml, secretKey}, Me.CreateClosingDisclosureArchiveByReferenceNumberOperationCompleted, userState)
		End Sub

		Private Sub OnCreateClosingDisclosureArchiveByReferenceNumberOperationCompleted(ByVal arg As Object)
			If (Not (Me.CreateClosingDisclosureArchiveByReferenceNumberCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent CreateClosingDisclosureArchiveByReferenceNumberCompleted(Me, New CreateClosingDisclosureArchiveByReferenceNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/CreateClosingDisclosureArchive", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function CreateClosingDisclosureArchive(ByVal authTicket As String, ByVal loanNumber As String, ByVal dataXml As String, ByVal secretKey As String) As String
			Dim results() As Object = Me.Invoke("CreateClosingDisclosureArchive", New Object() {authTicket, loanNumber, dataXml, secretKey})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub CreateClosingDisclosureArchiveAsync(ByVal authTicket As String, ByVal loanNumber As String, ByVal dataXml As String, ByVal secretKey As String)
			Me.CreateClosingDisclosureArchiveAsync(authTicket, loanNumber, dataXml, secretKey, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub CreateClosingDisclosureArchiveAsync(ByVal authTicket As String, ByVal loanNumber As String, ByVal dataXml As String, ByVal secretKey As String, ByVal userState As Object)
			If (Me.CreateClosingDisclosureArchiveOperationCompleted Is Nothing) Then
				Me.CreateClosingDisclosureArchiveOperationCompleted = AddressOf Me.OnCreateClosingDisclosureArchiveOperationCompleted
			End If
			Me.InvokeAsync("CreateClosingDisclosureArchive", New Object() {authTicket, loanNumber, dataXml, secretKey}, Me.CreateClosingDisclosureArchiveOperationCompleted, userState)
		End Sub

		Private Sub OnCreateClosingDisclosureArchiveOperationCompleted(ByVal arg As Object)
			If (Not (Me.CreateClosingDisclosureArchiveCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent CreateClosingDisclosureArchiveCompleted(Me, New CreateClosingDisclosureArchiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/ConvertLeadToLoan", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function ConvertLeadToLoan(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlData As String) As String
			Dim results() As Object = Me.Invoke("ConvertLeadToLoan", New Object() {sTicket, sLNm, sXmlData})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub ConvertLeadToLoanAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlData As String)
			Me.ConvertLeadToLoanAsync(sTicket, sLNm, sXmlData, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub ConvertLeadToLoanAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlData As String, ByVal userState As Object)
			If (Me.ConvertLeadToLoanOperationCompleted Is Nothing) Then
				Me.ConvertLeadToLoanOperationCompleted = AddressOf Me.OnConvertLeadToLoanOperationCompleted
			End If
			Me.InvokeAsync("ConvertLeadToLoan", New Object() {sTicket, sLNm, sXmlData}, Me.ConvertLeadToLoanOperationCompleted, userState)
		End Sub

		Private Sub OnConvertLeadToLoanOperationCompleted(ByVal arg As Object)
			If (Not (Me.ConvertLeadToLoanCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent ConvertLeadToLoanCompleted(Me, New ConvertLeadToLoanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/Load", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function Load(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlQuery As String, ByVal format As Integer) As String
			Dim results() As Object = Me.Invoke("Load", New Object() {sTicket, sLNm, sXmlQuery, format})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub LoadAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlQuery As String, ByVal format As Integer)
			Me.LoadAsync(sTicket, sLNm, sXmlQuery, format, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub LoadAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlQuery As String, ByVal format As Integer, ByVal userState As Object)
			If (Me.LoadOperationCompleted Is Nothing) Then
				Me.LoadOperationCompleted = AddressOf Me.OnLoadOperationCompleted
			End If
			Me.InvokeAsync("Load", New Object() {sTicket, sLNm, sXmlQuery, format}, Me.LoadOperationCompleted, userState)
		End Sub

		Private Sub OnLoadOperationCompleted(ByVal arg As Object)
			If (Not (Me.LoadCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent LoadCompleted(Me, New LoadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/LoadByRefNumber", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function LoadByRefNumber(ByVal sTicket As String, ByVal sLRefNm As String, ByVal sXmlQuery As String, ByVal format As Integer) As String
			Dim results() As Object = Me.Invoke("LoadByRefNumber", New Object() {sTicket, sLRefNm, sXmlQuery, format})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub LoadByRefNumberAsync(ByVal sTicket As String, ByVal sLRefNm As String, ByVal sXmlQuery As String, ByVal format As Integer)
			Me.LoadByRefNumberAsync(sTicket, sLRefNm, sXmlQuery, format, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub LoadByRefNumberAsync(ByVal sTicket As String, ByVal sLRefNm As String, ByVal sXmlQuery As String, ByVal format As Integer, ByVal userState As Object)
			If (Me.LoadByRefNumberOperationCompleted Is Nothing) Then
				Me.LoadByRefNumberOperationCompleted = AddressOf Me.OnLoadByRefNumberOperationCompleted
			End If
			Me.InvokeAsync("LoadByRefNumber", New Object() {sTicket, sLRefNm, sXmlQuery, format}, Me.LoadByRefNumberOperationCompleted, userState)
		End Sub

		Private Sub OnLoadByRefNumberOperationCompleted(ByVal arg As Object)
			If (Not (Me.LoadByRefNumberCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent LoadByRefNumberCompleted(Me, New LoadByRefNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/DeleteApplicant", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function DeleteApplicant(ByVal sTicket As String, ByVal sLNm As String, ByVal applicantSSN As String) As String
			Dim results() As Object = Me.Invoke("DeleteApplicant", New Object() {sTicket, sLNm, applicantSSN})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub DeleteApplicantAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal applicantSSN As String)
			Me.DeleteApplicantAsync(sTicket, sLNm, applicantSSN, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub DeleteApplicantAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal applicantSSN As String, ByVal userState As Object)
			If (Me.DeleteApplicantOperationCompleted Is Nothing) Then
				Me.DeleteApplicantOperationCompleted = AddressOf Me.OnDeleteApplicantOperationCompleted
			End If
			Me.InvokeAsync("DeleteApplicant", New Object() {sTicket, sLNm, applicantSSN}, Me.DeleteApplicantOperationCompleted, userState)
		End Sub

		Private Sub OnDeleteApplicantOperationCompleted(ByVal arg As Object)
			If (Not (Me.DeleteApplicantCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent DeleteApplicantCompleted(Me, New DeleteApplicantCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/TransferLegacyApplication", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function TransferLegacyApplication(ByVal sTicket As String, ByVal optionsXml As String) As String
			Dim results() As Object = Me.Invoke("TransferLegacyApplication", New Object() {sTicket, optionsXml})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub TransferLegacyApplicationAsync(ByVal sTicket As String, ByVal optionsXml As String)
			Me.TransferLegacyApplicationAsync(sTicket, optionsXml, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub TransferLegacyApplicationAsync(ByVal sTicket As String, ByVal optionsXml As String, ByVal userState As Object)
			If (Me.TransferLegacyApplicationOperationCompleted Is Nothing) Then
				Me.TransferLegacyApplicationOperationCompleted = AddressOf Me.OnTransferLegacyApplicationOperationCompleted
			End If
			Me.InvokeAsync("TransferLegacyApplication", New Object() {sTicket, optionsXml}, Me.TransferLegacyApplicationOperationCompleted, userState)
		End Sub

		Private Sub OnTransferLegacyApplicationOperationCompleted(ByVal arg As Object)
			If (Not (Me.TransferLegacyApplicationCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent TransferLegacyApplicationCompleted(Me, New TransferLegacyApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RemoveBorrower", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RemoveBorrower(ByVal sTicket As String, ByVal optionsXml As String) As String
			Dim results() As Object = Me.Invoke("RemoveBorrower", New Object() {sTicket, optionsXml})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub RemoveBorrowerAsync(ByVal sTicket As String, ByVal optionsXml As String)
			Me.RemoveBorrowerAsync(sTicket, optionsXml, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RemoveBorrowerAsync(ByVal sTicket As String, ByVal optionsXml As String, ByVal userState As Object)
			If (Me.RemoveBorrowerOperationCompleted Is Nothing) Then
				Me.RemoveBorrowerOperationCompleted = AddressOf Me.OnRemoveBorrowerOperationCompleted
			End If
			Me.InvokeAsync("RemoveBorrower", New Object() {sTicket, optionsXml}, Me.RemoveBorrowerOperationCompleted, userState)
		End Sub

		Private Sub OnRemoveBorrowerOperationCompleted(ByVal arg As Object)
			If (Not (Me.RemoveBorrowerCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RemoveBorrowerCompleted(Me, New RemoveBorrowerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/AddBorrower", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function AddBorrower(ByVal sTicket As String, ByVal optionsXml As String) As String
			Dim results() As Object = Me.Invoke("AddBorrower", New Object() {sTicket, optionsXml})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub AddBorrowerAsync(ByVal sTicket As String, ByVal optionsXml As String)
			Me.AddBorrowerAsync(sTicket, optionsXml, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub AddBorrowerAsync(ByVal sTicket As String, ByVal optionsXml As String, ByVal userState As Object)
			If (Me.AddBorrowerOperationCompleted Is Nothing) Then
				Me.AddBorrowerOperationCompleted = AddressOf Me.OnAddBorrowerOperationCompleted
			End If
			Me.InvokeAsync("AddBorrower", New Object() {sTicket, optionsXml}, Me.AddBorrowerOperationCompleted, userState)
		End Sub

		Private Sub OnAddBorrowerOperationCompleted(ByVal arg As Object)
			If (Not (Me.AddBorrowerCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent AddBorrowerCompleted(Me, New AddBorrowerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/ParseFnma32ToLoXml", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function ParseFnma32ToLoXml(ByVal sTicket As String, ByVal fnma32Content As String, ByVal sXmlQuery As String) As String
			Dim results() As Object = Me.Invoke("ParseFnma32ToLoXml", New Object() {sTicket, fnma32Content, sXmlQuery})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub ParseFnma32ToLoXmlAsync(ByVal sTicket As String, ByVal fnma32Content As String, ByVal sXmlQuery As String)
			Me.ParseFnma32ToLoXmlAsync(sTicket, fnma32Content, sXmlQuery, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub ParseFnma32ToLoXmlAsync(ByVal sTicket As String, ByVal fnma32Content As String, ByVal sXmlQuery As String, ByVal userState As Object)
			If (Me.ParseFnma32ToLoXmlOperationCompleted Is Nothing) Then
				Me.ParseFnma32ToLoXmlOperationCompleted = AddressOf Me.OnParseFnma32ToLoXmlOperationCompleted
			End If
			Me.InvokeAsync("ParseFnma32ToLoXml", New Object() {sTicket, fnma32Content, sXmlQuery}, Me.ParseFnma32ToLoXmlOperationCompleted, userState)
		End Sub

		Private Sub OnParseFnma32ToLoXmlOperationCompleted(ByVal arg As Object)
			If (Not (Me.ParseFnma32ToLoXmlCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent ParseFnma32ToLoXmlCompleted(Me, New ParseFnma32ToLoXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/UploadPDFDocument", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function UploadPDFDocument(ByVal sTicket As String, ByVal sLNm As String, ByVal documentType As String, ByVal notes As String, ByVal sDataContent As String) As String
			Dim results() As Object = Me.Invoke("UploadPDFDocument", New Object() {sTicket, sLNm, documentType, notes, sDataContent})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub UploadPDFDocumentAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal documentType As String, ByVal notes As String, ByVal sDataContent As String)
			Me.UploadPDFDocumentAsync(sTicket, sLNm, documentType, notes, sDataContent, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub UploadPDFDocumentAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal documentType As String, ByVal notes As String, ByVal sDataContent As String, ByVal userState As Object)
			If (Me.UploadPDFDocumentOperationCompleted Is Nothing) Then
				Me.UploadPDFDocumentOperationCompleted = AddressOf Me.OnUploadPDFDocumentOperationCompleted
			End If
			Me.InvokeAsync("UploadPDFDocument", New Object() {sTicket, sLNm, documentType, notes, sDataContent}, Me.UploadPDFDocumentOperationCompleted, userState)
		End Sub

		Private Sub OnUploadPDFDocumentOperationCompleted(ByVal arg As Object)
			If (Not (Me.UploadPDFDocumentCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent UploadPDFDocumentCompleted(Me, New UploadPDFDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/UploadPDFDocumentToApp", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function UploadPDFDocumentToApp(ByVal sTicket As String, ByVal sLNm As String, ByVal aAppId As System.Guid, ByVal documentType As String, ByVal notes As String, ByVal sDataContent As String) As String
			Dim results() As Object = Me.Invoke("UploadPDFDocumentToApp", New Object() {sTicket, sLNm, aAppId, documentType, notes, sDataContent})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub UploadPDFDocumentToAppAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal aAppId As System.Guid, ByVal documentType As String, ByVal notes As String, ByVal sDataContent As String)
			Me.UploadPDFDocumentToAppAsync(sTicket, sLNm, aAppId, documentType, notes, sDataContent, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub UploadPDFDocumentToAppAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal aAppId As System.Guid, ByVal documentType As String, ByVal notes As String, ByVal sDataContent As String, ByVal userState As Object)
			If (Me.UploadPDFDocumentToAppOperationCompleted Is Nothing) Then
				Me.UploadPDFDocumentToAppOperationCompleted = AddressOf Me.OnUploadPDFDocumentToAppOperationCompleted
			End If
			Me.InvokeAsync("UploadPDFDocumentToApp", New Object() {sTicket, sLNm, aAppId, documentType, notes, sDataContent}, Me.UploadPDFDocumentToAppOperationCompleted, userState)
		End Sub

		Private Sub OnUploadPDFDocumentToAppOperationCompleted(ByVal arg As Object)
			If (Not (Me.UploadPDFDocumentToAppCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent UploadPDFDocumentToAppCompleted(Me, New UploadPDFDocumentToAppCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/UploadPDFDocumentAsService", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function UploadPDFDocumentAsService(ByVal sTicket As String, ByVal sLNm As String, ByVal documentType As String, ByVal notes As String, ByVal sDataContent As String, ByVal serviceType As TypeOfService) As String
			Dim results() As Object = Me.Invoke("UploadPDFDocumentAsService", New Object() {sTicket, sLNm, documentType, notes, sDataContent, serviceType})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub UploadPDFDocumentAsServiceAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal documentType As String, ByVal notes As String, ByVal sDataContent As String, ByVal serviceType As TypeOfService)
			Me.UploadPDFDocumentAsServiceAsync(sTicket, sLNm, documentType, notes, sDataContent, serviceType, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub UploadPDFDocumentAsServiceAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal documentType As String, ByVal notes As String, ByVal sDataContent As String, ByVal serviceType As TypeOfService, ByVal userState As Object)
			If (Me.UploadPDFDocumentAsServiceOperationCompleted Is Nothing) Then
				Me.UploadPDFDocumentAsServiceOperationCompleted = AddressOf Me.OnUploadPDFDocumentAsServiceOperationCompleted
			End If
			Me.InvokeAsync("UploadPDFDocumentAsService", New Object() {sTicket, sLNm, documentType, notes, sDataContent, serviceType}, Me.UploadPDFDocumentAsServiceOperationCompleted, userState)
		End Sub

		Private Sub OnUploadPDFDocumentAsServiceOperationCompleted(ByVal arg As Object)
			If (Not (Me.UploadPDFDocumentAsServiceCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent UploadPDFDocumentAsServiceCompleted(Me, New UploadPDFDocumentAsServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/UploadPDFDocumentToAppAsService", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function UploadPDFDocumentToAppAsService(ByVal sTicket As String, ByVal sLNm As String, ByVal aAppId As System.Guid, ByVal documentType As String, ByVal notes As String, ByVal sDataContent As String, ByVal serviceType As TypeOfService) As String
			Dim results() As Object = Me.Invoke("UploadPDFDocumentToAppAsService", New Object() {sTicket, sLNm, aAppId, documentType, notes, sDataContent, serviceType})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub UploadPDFDocumentToAppAsServiceAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal aAppId As System.Guid, ByVal documentType As String, ByVal notes As String, ByVal sDataContent As String, ByVal serviceType As TypeOfService)
			Me.UploadPDFDocumentToAppAsServiceAsync(sTicket, sLNm, aAppId, documentType, notes, sDataContent, serviceType, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub UploadPDFDocumentToAppAsServiceAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal aAppId As System.Guid, ByVal documentType As String, ByVal notes As String, ByVal sDataContent As String, ByVal serviceType As TypeOfService, ByVal userState As Object)
			If (Me.UploadPDFDocumentToAppAsServiceOperationCompleted Is Nothing) Then
				Me.UploadPDFDocumentToAppAsServiceOperationCompleted = AddressOf Me.OnUploadPDFDocumentToAppAsServiceOperationCompleted
			End If
			Me.InvokeAsync("UploadPDFDocumentToAppAsService", New Object() {sTicket, sLNm, aAppId, documentType, notes, sDataContent, serviceType}, Me.UploadPDFDocumentToAppAsServiceOperationCompleted, userState)
		End Sub

		Private Sub OnUploadPDFDocumentToAppAsServiceOperationCompleted(ByVal arg As Object)
			If (Not (Me.UploadPDFDocumentToAppAsServiceCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent UploadPDFDocumentToAppAsServiceCompleted(Me, New UploadPDFDocumentToAppAsServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/Save", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function Save(ByVal sTicket As String, ByVal sLNm As String, ByVal sDataContent As String, ByVal format As Integer) As String
			Dim results() As Object = Me.Invoke("Save", New Object() {sTicket, sLNm, sDataContent, format})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub SaveAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sDataContent As String, ByVal format As Integer)
			Me.SaveAsync(sTicket, sLNm, sDataContent, format, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub SaveAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sDataContent As String, ByVal format As Integer, ByVal userState As Object)
			If (Me.SaveOperationCompleted Is Nothing) Then
				Me.SaveOperationCompleted = AddressOf Me.OnSaveOperationCompleted
			End If
			Me.InvokeAsync("Save", New Object() {sTicket, sLNm, sDataContent, format}, Me.SaveOperationCompleted, userState)
		End Sub

		Private Sub OnSaveOperationCompleted(ByVal arg As Object)
			If (Not (Me.SaveCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent SaveCompleted(Me, New SaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/SaveByRefNumber", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function SaveByRefNumber(ByVal sTicket As String, ByVal sLRefNm As String, ByVal sDataContent As String, ByVal format As Integer) As String
			Dim results() As Object = Me.Invoke("SaveByRefNumber", New Object() {sTicket, sLRefNm, sDataContent, format})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub SaveByRefNumberAsync(ByVal sTicket As String, ByVal sLRefNm As String, ByVal sDataContent As String, ByVal format As Integer)
			Me.SaveByRefNumberAsync(sTicket, sLRefNm, sDataContent, format, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub SaveByRefNumberAsync(ByVal sTicket As String, ByVal sLRefNm As String, ByVal sDataContent As String, ByVal format As Integer, ByVal userState As Object)
			If (Me.SaveByRefNumberOperationCompleted Is Nothing) Then
				Me.SaveByRefNumberOperationCompleted = AddressOf Me.OnSaveByRefNumberOperationCompleted
			End If
			Me.InvokeAsync("SaveByRefNumber", New Object() {sTicket, sLRefNm, sDataContent, format}, Me.SaveByRefNumberOperationCompleted, userState)
		End Sub

		Private Sub OnSaveByRefNumberOperationCompleted(ByVal arg As Object)
			If (Not (Me.SaveByRefNumberCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent SaveByRefNumberCompleted(Me, New SaveByRefNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/IsLoanExisted", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function IsLoanExisted(ByVal sTicket As String, ByVal sLNm As String) As Boolean
			Dim results() As Object = Me.Invoke("IsLoanExisted", New Object() {sTicket, sLNm})
			Return CType(results(0), Boolean)
		End Function

		'''<remarks/>
		Public Overloads Sub IsLoanExistedAsync(ByVal sTicket As String, ByVal sLNm As String)
			Me.IsLoanExistedAsync(sTicket, sLNm, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub IsLoanExistedAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal userState As Object)
			If (Me.IsLoanExistedOperationCompleted Is Nothing) Then
				Me.IsLoanExistedOperationCompleted = AddressOf Me.OnIsLoanExistedOperationCompleted
			End If
			Me.InvokeAsync("IsLoanExisted", New Object() {sTicket, sLNm}, Me.IsLoanExistedOperationCompleted, userState)
		End Sub

		Private Sub OnIsLoanExistedOperationCompleted(ByVal arg As Object)
			If (Not (Me.IsLoanExistedCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent IsLoanExistedCompleted(Me, New IsLoanExistedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RetrieveCustomReport", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RetrieveCustomReport(ByVal sTicket As String, ByVal sQueryNm As String, ByVal includeAllWithAccess As Boolean) As String
			Dim results() As Object = Me.Invoke("RetrieveCustomReport", New Object() {sTicket, sQueryNm, includeAllWithAccess})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub RetrieveCustomReportAsync(ByVal sTicket As String, ByVal sQueryNm As String, ByVal includeAllWithAccess As Boolean)
			Me.RetrieveCustomReportAsync(sTicket, sQueryNm, includeAllWithAccess, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RetrieveCustomReportAsync(ByVal sTicket As String, ByVal sQueryNm As String, ByVal includeAllWithAccess As Boolean, ByVal userState As Object)
			If (Me.RetrieveCustomReportOperationCompleted Is Nothing) Then
				Me.RetrieveCustomReportOperationCompleted = AddressOf Me.OnRetrieveCustomReportOperationCompleted
			End If
			Me.InvokeAsync("RetrieveCustomReport", New Object() {sTicket, sQueryNm, includeAllWithAccess}, Me.RetrieveCustomReportOperationCompleted, userState)
		End Sub

		Private Sub OnRetrieveCustomReportOperationCompleted(ByVal arg As Object)
			If (Not (Me.RetrieveCustomReportCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RetrieveCustomReportCompleted(Me, New RetrieveCustomReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/DeleteLoan", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function DeleteLoan(ByVal sTicket As String, ByVal sLNm As String) As String
			Dim results() As Object = Me.Invoke("DeleteLoan", New Object() {sTicket, sLNm})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub DeleteLoanAsync(ByVal sTicket As String, ByVal sLNm As String)
			Me.DeleteLoanAsync(sTicket, sLNm, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub DeleteLoanAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal userState As Object)
			If (Me.DeleteLoanOperationCompleted Is Nothing) Then
				Me.DeleteLoanOperationCompleted = AddressOf Me.OnDeleteLoanOperationCompleted
			End If
			Me.InvokeAsync("DeleteLoan", New Object() {sTicket, sLNm}, Me.DeleteLoanOperationCompleted, userState)
		End Sub

		Private Sub OnDeleteLoanOperationCompleted(ByVal arg As Object)
			If (Not (Me.DeleteLoanCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent DeleteLoanCompleted(Me, New DeleteLoanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/CreateWithOptions", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function CreateWithOptions(ByVal sTicket As String, ByVal optionsXml As String) As String
			Dim results() As Object = Me.Invoke("CreateWithOptions", New Object() {sTicket, optionsXml})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub CreateWithOptionsAsync(ByVal sTicket As String, ByVal optionsXml As String)
			Me.CreateWithOptionsAsync(sTicket, optionsXml, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub CreateWithOptionsAsync(ByVal sTicket As String, ByVal optionsXml As String, ByVal userState As Object)
			If (Me.CreateWithOptionsOperationCompleted Is Nothing) Then
				Me.CreateWithOptionsOperationCompleted = AddressOf Me.OnCreateWithOptionsOperationCompleted
			End If
			Me.InvokeAsync("CreateWithOptions", New Object() {sTicket, optionsXml}, Me.CreateWithOptionsOperationCompleted, userState)
		End Sub

		Private Sub OnCreateWithOptionsOperationCompleted(ByVal arg As Object)
			If (Not (Me.CreateWithOptionsCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent CreateWithOptionsCompleted(Me, New CreateWithOptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/Create", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function Create(ByVal sTicket As String, ByVal sTemplateNm As String) As String
			Dim results() As Object = Me.Invoke("Create", New Object() {sTicket, sTemplateNm})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub CreateAsync(ByVal sTicket As String, ByVal sTemplateNm As String)
			Me.CreateAsync(sTicket, sTemplateNm, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub CreateAsync(ByVal sTicket As String, ByVal sTemplateNm As String, ByVal userState As Object)
			If (Me.CreateOperationCompleted Is Nothing) Then
				Me.CreateOperationCompleted = AddressOf Me.OnCreateOperationCompleted
			End If
			Me.InvokeAsync("Create", New Object() {sTicket, sTemplateNm}, Me.CreateOperationCompleted, userState)
		End Sub

		Private Sub OnCreateOperationCompleted(ByVal arg As Object)
			If (Not (Me.CreateCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent CreateCompleted(Me, New CreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/CreateLead", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function CreateLead(ByVal sTicket As String, ByVal sTemplateNm As String) As String
			Dim results() As Object = Me.Invoke("CreateLead", New Object() {sTicket, sTemplateNm})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub CreateLeadAsync(ByVal sTicket As String, ByVal sTemplateNm As String)
			Me.CreateLeadAsync(sTicket, sTemplateNm, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub CreateLeadAsync(ByVal sTicket As String, ByVal sTemplateNm As String, ByVal userState As Object)
			If (Me.CreateLeadOperationCompleted Is Nothing) Then
				Me.CreateLeadOperationCompleted = AddressOf Me.OnCreateLeadOperationCompleted
			End If
			Me.InvokeAsync("CreateLead", New Object() {sTicket, sTemplateNm}, Me.CreateLeadOperationCompleted, userState)
		End Sub

		Private Sub OnCreateLeadOperationCompleted(ByVal arg As Object)
			If (Not (Me.CreateLeadCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent CreateLeadCompleted(Me, New CreateLeadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RegisterLoanProgramWithRateOptionId", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RegisterLoanProgramWithRateOptionId(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal, ByVal rateOptionId As String) As String
			Dim results() As Object = Me.Invoke("RegisterLoanProgramWithRateOptionId", New Object() {sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee, rateOptionId})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub RegisterLoanProgramWithRateOptionIdAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal, ByVal rateOptionId As String)
			Me.RegisterLoanProgramWithRateOptionIdAsync(sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee, rateOptionId, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RegisterLoanProgramWithRateOptionIdAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal, ByVal rateOptionId As String, ByVal userState As Object)
			If (Me.RegisterLoanProgramWithRateOptionIdOperationCompleted Is Nothing) Then
				Me.RegisterLoanProgramWithRateOptionIdOperationCompleted = AddressOf Me.OnRegisterLoanProgramWithRateOptionIdOperationCompleted
			End If
			Me.InvokeAsync("RegisterLoanProgramWithRateOptionId", New Object() {sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee, rateOptionId}, Me.RegisterLoanProgramWithRateOptionIdOperationCompleted, userState)
		End Sub

		Private Sub OnRegisterLoanProgramWithRateOptionIdOperationCompleted(ByVal arg As Object)
			If (Not (Me.RegisterLoanProgramWithRateOptionIdCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RegisterLoanProgramWithRateOptionIdCompleted(Me, New RegisterLoanProgramWithRateOptionIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RegisterLoanProgram", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RegisterLoanProgram(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal) As String
			Dim results() As Object = Me.Invoke("RegisterLoanProgram", New Object() {sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub RegisterLoanProgramAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal)
			Me.RegisterLoanProgramAsync(sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RegisterLoanProgramAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal, ByVal userState As Object)
			If (Me.RegisterLoanProgramOperationCompleted Is Nothing) Then
				Me.RegisterLoanProgramOperationCompleted = AddressOf Me.OnRegisterLoanProgramOperationCompleted
			End If
			Me.InvokeAsync("RegisterLoanProgram", New Object() {sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee}, Me.RegisterLoanProgramOperationCompleted, userState)
		End Sub

		Private Sub OnRegisterLoanProgramOperationCompleted(ByVal arg As Object)
			If (Not (Me.RegisterLoanProgramCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RegisterLoanProgramCompleted(Me, New RegisterLoanProgramCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RegisterLoanProgramAndSkipDuplicateC" &
			"heck", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RegisterLoanProgramAndSkipDuplicateCheck(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal, ByVal skipDuplicateCheck As Boolean) As String
			Dim results() As Object = Me.Invoke("RegisterLoanProgramAndSkipDuplicateCheck", New Object() {sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee, skipDuplicateCheck})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub RegisterLoanProgramAndSkipDuplicateCheckAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal, ByVal skipDuplicateCheck As Boolean)
			Me.RegisterLoanProgramAndSkipDuplicateCheckAsync(sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee, skipDuplicateCheck, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RegisterLoanProgramAndSkipDuplicateCheckAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal, ByVal skipDuplicateCheck As Boolean, ByVal userState As Object)
			If (Me.RegisterLoanProgramAndSkipDuplicateCheckOperationCompleted Is Nothing) Then
				Me.RegisterLoanProgramAndSkipDuplicateCheckOperationCompleted = AddressOf Me.OnRegisterLoanProgramAndSkipDuplicateCheckOperationCompleted
			End If
			Me.InvokeAsync("RegisterLoanProgramAndSkipDuplicateCheck", New Object() {sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee, skipDuplicateCheck}, Me.RegisterLoanProgramAndSkipDuplicateCheckOperationCompleted, userState)
		End Sub

		Private Sub OnRegisterLoanProgramAndSkipDuplicateCheckOperationCompleted(ByVal arg As Object)
			If (Not (Me.RegisterLoanProgramAndSkipDuplicateCheckCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RegisterLoanProgramAndSkipDuplicateCheckCompleted(Me, New RegisterLoanProgramAndSkipDuplicateCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RegisterLoanProgramWithRateOptionIdA" &
			"ndSkipDuplicateCheck", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RegisterLoanProgramWithRateOptionIdAndSkipDuplicateCheck(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal, ByVal rateOptionId As String, ByVal skipDuplicateCheck As Boolean) As String
			Dim results() As Object = Me.Invoke("RegisterLoanProgramWithRateOptionIdAndSkipDuplicateCheck", New Object() {sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee, rateOptionId, skipDuplicateCheck})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub RegisterLoanProgramWithRateOptionIdAndSkipDuplicateCheckAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal, ByVal rateOptionId As String, ByVal skipDuplicateCheck As Boolean)
			Me.RegisterLoanProgramWithRateOptionIdAndSkipDuplicateCheckAsync(sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee, rateOptionId, skipDuplicateCheck, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RegisterLoanProgramWithRateOptionIdAndSkipDuplicateCheckAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal, ByVal rateOptionId As String, ByVal skipDuplicateCheck As Boolean, ByVal userState As Object)
			If (Me.RegisterLoanProgramWithRateOptionIdAndSkipDuplicateCheckOperationCompleted Is Nothing) Then
				Me.RegisterLoanProgramWithRateOptionIdAndSkipDuplicateCheckOperationCompleted = AddressOf Me.OnRegisterLoanProgramWithRateOptionIdAndSkipDuplicateCheckOperationCompleted
			End If
			Me.InvokeAsync("RegisterLoanProgramWithRateOptionIdAndSkipDuplicateCheck", New Object() {sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee, rateOptionId, skipDuplicateCheck}, Me.RegisterLoanProgramWithRateOptionIdAndSkipDuplicateCheckOperationCompleted, userState)
		End Sub

		Private Sub OnRegisterLoanProgramWithRateOptionIdAndSkipDuplicateCheckOperationCompleted(ByVal arg As Object)
			If (Not (Me.RegisterLoanProgramWithRateOptionIdAndSkipDuplicateCheckCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RegisterLoanProgramWithRateOptionIdAndSkipDuplicateCheckCompleted(Me, New RegisterLoanProgramWithRateOptionIdAndSkipDuplicateCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RegisterLoanProgramWithOptions", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RegisterLoanProgramWithOptions(ByVal sTicket As String, ByVal sLNm As String, ByVal optionsXml As String) As String
			Dim results() As Object = Me.Invoke("RegisterLoanProgramWithOptions", New Object() {sTicket, sLNm, optionsXml})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub RegisterLoanProgramWithOptionsAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal optionsXml As String)
			Me.RegisterLoanProgramWithOptionsAsync(sTicket, sLNm, optionsXml, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RegisterLoanProgramWithOptionsAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal optionsXml As String, ByVal userState As Object)
			If (Me.RegisterLoanProgramWithOptionsOperationCompleted Is Nothing) Then
				Me.RegisterLoanProgramWithOptionsOperationCompleted = AddressOf Me.OnRegisterLoanProgramWithOptionsOperationCompleted
			End If
			Me.InvokeAsync("RegisterLoanProgramWithOptions", New Object() {sTicket, sLNm, optionsXml}, Me.RegisterLoanProgramWithOptionsOperationCompleted, userState)
		End Sub

		Private Sub OnRegisterLoanProgramWithOptionsOperationCompleted(ByVal arg As Object)
			If (Not (Me.RegisterLoanProgramWithOptionsCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RegisterLoanProgramWithOptionsCompleted(Me, New RegisterLoanProgramWithOptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/LockLoanProgramWithRateOptionId", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function LockLoanProgramWithRateOptionId(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal, ByVal rateOptionId As String) As String
			Dim results() As Object = Me.Invoke("LockLoanProgramWithRateOptionId", New Object() {sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee, rateOptionId})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub LockLoanProgramWithRateOptionIdAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal, ByVal rateOptionId As String)
			Me.LockLoanProgramWithRateOptionIdAsync(sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee, rateOptionId, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub LockLoanProgramWithRateOptionIdAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal, ByVal rateOptionId As String, ByVal userState As Object)
			If (Me.LockLoanProgramWithRateOptionIdOperationCompleted Is Nothing) Then
				Me.LockLoanProgramWithRateOptionIdOperationCompleted = AddressOf Me.OnLockLoanProgramWithRateOptionIdOperationCompleted
			End If
			Me.InvokeAsync("LockLoanProgramWithRateOptionId", New Object() {sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee, rateOptionId}, Me.LockLoanProgramWithRateOptionIdOperationCompleted, userState)
		End Sub

		Private Sub OnLockLoanProgramWithRateOptionIdOperationCompleted(ByVal arg As Object)
			If (Not (Me.LockLoanProgramWithRateOptionIdCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent LockLoanProgramWithRateOptionIdCompleted(Me, New LockLoanProgramWithRateOptionIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/LockLoanProgram", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function LockLoanProgram(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal) As String
			Dim results() As Object = Me.Invoke("LockLoanProgram", New Object() {sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub LockLoanProgramAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal)
			Me.LockLoanProgramAsync(sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub LockLoanProgramAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal, ByVal userState As Object)
			If (Me.LockLoanProgramOperationCompleted Is Nothing) Then
				Me.LockLoanProgramOperationCompleted = AddressOf Me.OnLockLoanProgramOperationCompleted
			End If
			Me.InvokeAsync("LockLoanProgram", New Object() {sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee}, Me.LockLoanProgramOperationCompleted, userState)
		End Sub

		Private Sub OnLockLoanProgramOperationCompleted(ByVal arg As Object)
			If (Not (Me.LockLoanProgramCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent LockLoanProgramCompleted(Me, New LockLoanProgramCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/LockLoanProgramAndSkipDuplicateCheck" &
			"", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function LockLoanProgramAndSkipDuplicateCheck(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal, ByVal skipDuplicateCheck As Boolean) As String
			Dim results() As Object = Me.Invoke("LockLoanProgramAndSkipDuplicateCheck", New Object() {sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee, skipDuplicateCheck})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub LockLoanProgramAndSkipDuplicateCheckAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal, ByVal skipDuplicateCheck As Boolean)
			Me.LockLoanProgramAndSkipDuplicateCheckAsync(sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee, skipDuplicateCheck, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub LockLoanProgramAndSkipDuplicateCheckAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal, ByVal skipDuplicateCheck As Boolean, ByVal userState As Object)
			If (Me.LockLoanProgramAndSkipDuplicateCheckOperationCompleted Is Nothing) Then
				Me.LockLoanProgramAndSkipDuplicateCheckOperationCompleted = AddressOf Me.OnLockLoanProgramAndSkipDuplicateCheckOperationCompleted
			End If
			Me.InvokeAsync("LockLoanProgramAndSkipDuplicateCheck", New Object() {sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee, skipDuplicateCheck}, Me.LockLoanProgramAndSkipDuplicateCheckOperationCompleted, userState)
		End Sub

		Private Sub OnLockLoanProgramAndSkipDuplicateCheckOperationCompleted(ByVal arg As Object)
			If (Not (Me.LockLoanProgramAndSkipDuplicateCheckCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent LockLoanProgramAndSkipDuplicateCheckCompleted(Me, New LockLoanProgramAndSkipDuplicateCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/LockLoanProgramWithRateOptionIdAndSk" &
			"ipDuplicateCheck", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function LockLoanProgramWithRateOptionIdAndSkipDuplicateCheck(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal, ByVal rateOptionId As String, ByVal skipDuplicateCheck As Boolean) As String
			Dim results() As Object = Me.Invoke("LockLoanProgramWithRateOptionIdAndSkipDuplicateCheck", New Object() {sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee, rateOptionId, skipDuplicateCheck})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub LockLoanProgramWithRateOptionIdAndSkipDuplicateCheckAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal, ByVal rateOptionId As String, ByVal skipDuplicateCheck As Boolean)
			Me.LockLoanProgramWithRateOptionIdAndSkipDuplicateCheckAsync(sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee, rateOptionId, skipDuplicateCheck, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub LockLoanProgramWithRateOptionIdAndSkipDuplicateCheckAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal lLpTemplateId As String, ByVal requestedRate As Decimal, ByVal requestedFee As Decimal, ByVal rateOptionId As String, ByVal skipDuplicateCheck As Boolean, ByVal userState As Object)
			If (Me.LockLoanProgramWithRateOptionIdAndSkipDuplicateCheckOperationCompleted Is Nothing) Then
				Me.LockLoanProgramWithRateOptionIdAndSkipDuplicateCheckOperationCompleted = AddressOf Me.OnLockLoanProgramWithRateOptionIdAndSkipDuplicateCheckOperationCompleted
			End If
			Me.InvokeAsync("LockLoanProgramWithRateOptionIdAndSkipDuplicateCheck", New Object() {sTicket, sLNm, lLpTemplateId, requestedRate, requestedFee, rateOptionId, skipDuplicateCheck}, Me.LockLoanProgramWithRateOptionIdAndSkipDuplicateCheckOperationCompleted, userState)
		End Sub

		Private Sub OnLockLoanProgramWithRateOptionIdAndSkipDuplicateCheckOperationCompleted(ByVal arg As Object)
			If (Not (Me.LockLoanProgramWithRateOptionIdAndSkipDuplicateCheckCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent LockLoanProgramWithRateOptionIdAndSkipDuplicateCheckCompleted(Me, New LockLoanProgramWithRateOptionIdAndSkipDuplicateCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/LockLoanProgramWithOptions", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function LockLoanProgramWithOptions(ByVal sTicket As String, ByVal sLNm As String, ByVal optionsXml As String) As String
			Dim results() As Object = Me.Invoke("LockLoanProgramWithOptions", New Object() {sTicket, sLNm, optionsXml})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub LockLoanProgramWithOptionsAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal optionsXml As String)
			Me.LockLoanProgramWithOptionsAsync(sTicket, sLNm, optionsXml, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub LockLoanProgramWithOptionsAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal optionsXml As String, ByVal userState As Object)
			If (Me.LockLoanProgramWithOptionsOperationCompleted Is Nothing) Then
				Me.LockLoanProgramWithOptionsOperationCompleted = AddressOf Me.OnLockLoanProgramWithOptionsOperationCompleted
			End If
			Me.InvokeAsync("LockLoanProgramWithOptions", New Object() {sTicket, sLNm, optionsXml}, Me.LockLoanProgramWithOptionsOperationCompleted, userState)
		End Sub

		Private Sub OnLockLoanProgramWithOptionsOperationCompleted(ByVal arg As Object)
			If (Not (Me.LockLoanProgramWithOptionsCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent LockLoanProgramWithOptionsCompleted(Me, New LockLoanProgramWithOptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/BreakBrokerRateLock", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function BreakBrokerRateLock(ByVal sTicket As String, ByVal sLNm As String, ByVal reason As String) As String
			Dim results() As Object = Me.Invoke("BreakBrokerRateLock", New Object() {sTicket, sLNm, reason})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub BreakBrokerRateLockAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal reason As String)
			Me.BreakBrokerRateLockAsync(sTicket, sLNm, reason, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub BreakBrokerRateLockAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal reason As String, ByVal userState As Object)
			If (Me.BreakBrokerRateLockOperationCompleted Is Nothing) Then
				Me.BreakBrokerRateLockOperationCompleted = AddressOf Me.OnBreakBrokerRateLockOperationCompleted
			End If
			Me.InvokeAsync("BreakBrokerRateLock", New Object() {sTicket, sLNm, reason}, Me.BreakBrokerRateLockOperationCompleted, userState)
		End Sub

		Private Sub OnBreakBrokerRateLockOperationCompleted(ByVal arg As Object)
			If (Not (Me.BreakBrokerRateLockCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent BreakBrokerRateLockCompleted(Me, New BreakBrokerRateLockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RemoveRequestedRate", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RemoveRequestedRate(ByVal sTicket As String, ByVal sLNm As String) As String
			Dim results() As Object = Me.Invoke("RemoveRequestedRate", New Object() {sTicket, sLNm})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub RemoveRequestedRateAsync(ByVal sTicket As String, ByVal sLNm As String)
			Me.RemoveRequestedRateAsync(sTicket, sLNm, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RemoveRequestedRateAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal userState As Object)
			If (Me.RemoveRequestedRateOperationCompleted Is Nothing) Then
				Me.RemoveRequestedRateOperationCompleted = AddressOf Me.OnRemoveRequestedRateOperationCompleted
			End If
			Me.InvokeAsync("RemoveRequestedRate", New Object() {sTicket, sLNm}, Me.RemoveRequestedRateOperationCompleted, userState)
		End Sub

		Private Sub OnRemoveRequestedRateOperationCompleted(ByVal arg As Object)
			If (Not (Me.RemoveRequestedRateCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RemoveRequestedRateCompleted(Me, New RemoveRequestedRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/ListEdocsByLoanNumber", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function ListEdocsByLoanNumber(ByVal sTicket As String, ByVal sLNm As String) As String
			Dim results() As Object = Me.Invoke("ListEdocsByLoanNumber", New Object() {sTicket, sLNm})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub ListEdocsByLoanNumberAsync(ByVal sTicket As String, ByVal sLNm As String)
			Me.ListEdocsByLoanNumberAsync(sTicket, sLNm, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub ListEdocsByLoanNumberAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal userState As Object)
			If (Me.ListEdocsByLoanNumberOperationCompleted Is Nothing) Then
				Me.ListEdocsByLoanNumberOperationCompleted = AddressOf Me.OnListEdocsByLoanNumberOperationCompleted
			End If
			Me.InvokeAsync("ListEdocsByLoanNumber", New Object() {sTicket, sLNm}, Me.ListEdocsByLoanNumberOperationCompleted, userState)
		End Sub

		Private Sub OnListEdocsByLoanNumberOperationCompleted(ByVal arg As Object)
			If (Not (Me.ListEdocsByLoanNumberCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent ListEdocsByLoanNumberCompleted(Me, New ListEdocsByLoanNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/DownloadEdocsPdfById", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function DownloadEdocsPdfById(ByVal sTicket As String, ByVal docId As System.Guid) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
			Dim results() As Object = Me.Invoke("DownloadEdocsPdfById", New Object() {sTicket, docId})
			Return CType(results(0), Byte())
		End Function

		'''<remarks/>
		Public Overloads Sub DownloadEdocsPdfByIdAsync(ByVal sTicket As String, ByVal docId As System.Guid)
			Me.DownloadEdocsPdfByIdAsync(sTicket, docId, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub DownloadEdocsPdfByIdAsync(ByVal sTicket As String, ByVal docId As System.Guid, ByVal userState As Object)
			If (Me.DownloadEdocsPdfByIdOperationCompleted Is Nothing) Then
				Me.DownloadEdocsPdfByIdOperationCompleted = AddressOf Me.OnDownloadEdocsPdfByIdOperationCompleted
			End If
			Me.InvokeAsync("DownloadEdocsPdfById", New Object() {sTicket, docId}, Me.DownloadEdocsPdfByIdOperationCompleted, userState)
		End Sub

		Private Sub OnDownloadEdocsPdfByIdOperationCompleted(ByVal arg As Object)
			If (Not (Me.DownloadEdocsPdfByIdCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent DownloadEdocsPdfByIdCompleted(Me, New DownloadEdocsPdfByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/DownloadEdocsByShippingTemplate", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function DownloadEdocsByShippingTemplate(ByVal sTicket As String, ByVal sShippingTemplateName As String, ByVal sLNm As String, ByVal includeScreenedDocs As Boolean, ByVal includeDocsWithoutStatus As Boolean) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
			Dim results() As Object = Me.Invoke("DownloadEdocsByShippingTemplate", New Object() {sTicket, sShippingTemplateName, sLNm, includeScreenedDocs, includeDocsWithoutStatus})
			Return CType(results(0), Byte())
		End Function

		'''<remarks/>
		Public Overloads Sub DownloadEdocsByShippingTemplateAsync(ByVal sTicket As String, ByVal sShippingTemplateName As String, ByVal sLNm As String, ByVal includeScreenedDocs As Boolean, ByVal includeDocsWithoutStatus As Boolean)
			Me.DownloadEdocsByShippingTemplateAsync(sTicket, sShippingTemplateName, sLNm, includeScreenedDocs, includeDocsWithoutStatus, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub DownloadEdocsByShippingTemplateAsync(ByVal sTicket As String, ByVal sShippingTemplateName As String, ByVal sLNm As String, ByVal includeScreenedDocs As Boolean, ByVal includeDocsWithoutStatus As Boolean, ByVal userState As Object)
			If (Me.DownloadEdocsByShippingTemplateOperationCompleted Is Nothing) Then
				Me.DownloadEdocsByShippingTemplateOperationCompleted = AddressOf Me.OnDownloadEdocsByShippingTemplateOperationCompleted
			End If
			Me.InvokeAsync("DownloadEdocsByShippingTemplate", New Object() {sTicket, sShippingTemplateName, sLNm, includeScreenedDocs, includeDocsWithoutStatus}, Me.DownloadEdocsByShippingTemplateOperationCompleted, userState)
		End Sub

		Private Sub OnDownloadEdocsByShippingTemplateOperationCompleted(ByVal arg As Object)
			If (Not (Me.DownloadEdocsByShippingTemplateCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent DownloadEdocsByShippingTemplateCompleted(Me, New DownloadEdocsByShippingTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/PrepareLoanForResubmission", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function PrepareLoanForResubmission(ByVal sTicket As String, ByVal sLNm As String) As String
			Dim results() As Object = Me.Invoke("PrepareLoanForResubmission", New Object() {sTicket, sLNm})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub PrepareLoanForResubmissionAsync(ByVal sTicket As String, ByVal sLNm As String)
			Me.PrepareLoanForResubmissionAsync(sTicket, sLNm, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub PrepareLoanForResubmissionAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal userState As Object)
			If (Me.PrepareLoanForResubmissionOperationCompleted Is Nothing) Then
				Me.PrepareLoanForResubmissionOperationCompleted = AddressOf Me.OnPrepareLoanForResubmissionOperationCompleted
			End If
			Me.InvokeAsync("PrepareLoanForResubmission", New Object() {sTicket, sLNm}, Me.PrepareLoanForResubmissionOperationCompleted, userState)
		End Sub

		Private Sub OnPrepareLoanForResubmissionOperationCompleted(ByVal arg As Object)
			If (Not (Me.PrepareLoanForResubmissionCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent PrepareLoanForResubmissionCompleted(Me, New PrepareLoanForResubmissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/CreateWithULDD", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function CreateWithULDD(ByVal sTicket As String, ByVal xml As String) As String
			Dim results() As Object = Me.Invoke("CreateWithULDD", New Object() {sTicket, xml})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub CreateWithULDDAsync(ByVal sTicket As String, ByVal xml As String)
			Me.CreateWithULDDAsync(sTicket, xml, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub CreateWithULDDAsync(ByVal sTicket As String, ByVal xml As String, ByVal userState As Object)
			If (Me.CreateWithULDDOperationCompleted Is Nothing) Then
				Me.CreateWithULDDOperationCompleted = AddressOf Me.OnCreateWithULDDOperationCompleted
			End If
			Me.InvokeAsync("CreateWithULDD", New Object() {sTicket, xml}, Me.CreateWithULDDOperationCompleted, userState)
		End Sub

		Private Sub OnCreateWithULDDOperationCompleted(ByVal arg As Object)
			If (Not (Me.CreateWithULDDCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent CreateWithULDDCompleted(Me, New CreateWithULDDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/CreateWithFannieMaeFile", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function CreateWithFannieMaeFile(ByVal sTicket As String, ByVal content As String) As String
			Dim results() As Object = Me.Invoke("CreateWithFannieMaeFile", New Object() {sTicket, content})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub CreateWithFannieMaeFileAsync(ByVal sTicket As String, ByVal content As String)
			Me.CreateWithFannieMaeFileAsync(sTicket, content, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub CreateWithFannieMaeFileAsync(ByVal sTicket As String, ByVal content As String, ByVal userState As Object)
			If (Me.CreateWithFannieMaeFileOperationCompleted Is Nothing) Then
				Me.CreateWithFannieMaeFileOperationCompleted = AddressOf Me.OnCreateWithFannieMaeFileOperationCompleted
			End If
			Me.InvokeAsync("CreateWithFannieMaeFile", New Object() {sTicket, content}, Me.CreateWithFannieMaeFileOperationCompleted, userState)
		End Sub

		Private Sub OnCreateWithFannieMaeFileOperationCompleted(ByVal arg As Object)
			If (Not (Me.CreateWithFannieMaeFileCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent CreateWithFannieMaeFileCompleted(Me, New CreateWithFannieMaeFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/CreateWithCalyxPointFile", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function CreateWithCalyxPointFile(ByVal sTicket As String, ByVal base64content As String) As String
			Dim results() As Object = Me.Invoke("CreateWithCalyxPointFile", New Object() {sTicket, base64content})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub CreateWithCalyxPointFileAsync(ByVal sTicket As String, ByVal base64content As String)
			Me.CreateWithCalyxPointFileAsync(sTicket, base64content, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub CreateWithCalyxPointFileAsync(ByVal sTicket As String, ByVal base64content As String, ByVal userState As Object)
			If (Me.CreateWithCalyxPointFileOperationCompleted Is Nothing) Then
				Me.CreateWithCalyxPointFileOperationCompleted = AddressOf Me.OnCreateWithCalyxPointFileOperationCompleted
			End If
			Me.InvokeAsync("CreateWithCalyxPointFile", New Object() {sTicket, base64content}, Me.CreateWithCalyxPointFileOperationCompleted, userState)
		End Sub

		Private Sub OnCreateWithCalyxPointFileOperationCompleted(ByVal arg As Object)
			If (Not (Me.CreateWithCalyxPointFileCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent CreateWithCalyxPointFileCompleted(Me, New CreateWithCalyxPointFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/ListClosingCostTemplateName", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function ListClosingCostTemplateName(ByVal sTicket As String) As String
			Dim results() As Object = Me.Invoke("ListClosingCostTemplateName", New Object() {sTicket})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub ListClosingCostTemplateNameAsync(ByVal sTicket As String)
			Me.ListClosingCostTemplateNameAsync(sTicket, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub ListClosingCostTemplateNameAsync(ByVal sTicket As String, ByVal userState As Object)
			If (Me.ListClosingCostTemplateNameOperationCompleted Is Nothing) Then
				Me.ListClosingCostTemplateNameOperationCompleted = AddressOf Me.OnListClosingCostTemplateNameOperationCompleted
			End If
			Me.InvokeAsync("ListClosingCostTemplateName", New Object() {sTicket}, Me.ListClosingCostTemplateNameOperationCompleted, userState)
		End Sub

		Private Sub OnListClosingCostTemplateNameOperationCompleted(ByVal arg As Object)
			If (Not (Me.ListClosingCostTemplateNameCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent ListClosingCostTemplateNameCompleted(Me, New ListClosingCostTemplateNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RetrieveClosingCostTemplateFeeList", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RetrieveClosingCostTemplateFeeList(ByVal sTicket As String, ByVal closingCostName As String) As String
			Dim results() As Object = Me.Invoke("RetrieveClosingCostTemplateFeeList", New Object() {sTicket, closingCostName})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub RetrieveClosingCostTemplateFeeListAsync(ByVal sTicket As String, ByVal closingCostName As String)
			Me.RetrieveClosingCostTemplateFeeListAsync(sTicket, closingCostName, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RetrieveClosingCostTemplateFeeListAsync(ByVal sTicket As String, ByVal closingCostName As String, ByVal userState As Object)
			If (Me.RetrieveClosingCostTemplateFeeListOperationCompleted Is Nothing) Then
				Me.RetrieveClosingCostTemplateFeeListOperationCompleted = AddressOf Me.OnRetrieveClosingCostTemplateFeeListOperationCompleted
			End If
			Me.InvokeAsync("RetrieveClosingCostTemplateFeeList", New Object() {sTicket, closingCostName}, Me.RetrieveClosingCostTemplateFeeListOperationCompleted, userState)
		End Sub

		Private Sub OnRetrieveClosingCostTemplateFeeListOperationCompleted(ByVal arg As Object)
			If (Not (Me.RetrieveClosingCostTemplateFeeListCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RetrieveClosingCostTemplateFeeListCompleted(Me, New RetrieveClosingCostTemplateFeeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/ListModifiedLoans", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function ListModifiedLoans(ByVal sTicket As String) As String
			Dim results() As Object = Me.Invoke("ListModifiedLoans", New Object() {sTicket})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub ListModifiedLoansAsync(ByVal sTicket As String)
			Me.ListModifiedLoansAsync(sTicket, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub ListModifiedLoansAsync(ByVal sTicket As String, ByVal userState As Object)
			If (Me.ListModifiedLoansOperationCompleted Is Nothing) Then
				Me.ListModifiedLoansOperationCompleted = AddressOf Me.OnListModifiedLoansOperationCompleted
			End If
			Me.InvokeAsync("ListModifiedLoans", New Object() {sTicket}, Me.ListModifiedLoansOperationCompleted, userState)
		End Sub

		Private Sub OnListModifiedLoansOperationCompleted(ByVal arg As Object)
			If (Not (Me.ListModifiedLoansCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent ListModifiedLoansCompleted(Me, New ListModifiedLoansCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/ListModifiedLoansByAppCode", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function ListModifiedLoansByAppCode(ByVal sTicket As String, ByVal appCode As String) As String
			Dim results() As Object = Me.Invoke("ListModifiedLoansByAppCode", New Object() {sTicket, appCode})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub ListModifiedLoansByAppCodeAsync(ByVal sTicket As String, ByVal appCode As String)
			Me.ListModifiedLoansByAppCodeAsync(sTicket, appCode, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub ListModifiedLoansByAppCodeAsync(ByVal sTicket As String, ByVal appCode As String, ByVal userState As Object)
			If (Me.ListModifiedLoansByAppCodeOperationCompleted Is Nothing) Then
				Me.ListModifiedLoansByAppCodeOperationCompleted = AddressOf Me.OnListModifiedLoansByAppCodeOperationCompleted
			End If
			Me.InvokeAsync("ListModifiedLoansByAppCode", New Object() {sTicket, appCode}, Me.ListModifiedLoansByAppCodeOperationCompleted, userState)
		End Sub

		Private Sub OnListModifiedLoansByAppCodeOperationCompleted(ByVal arg As Object)
			If (Not (Me.ListModifiedLoansByAppCodeCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent ListModifiedLoansByAppCodeCompleted(Me, New ListModifiedLoansByAppCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/ListModifiedEDocsByAppCode", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function ListModifiedEDocsByAppCode(ByVal sTicket As String, ByVal appCode As String, ByVal modifiedDate As String) As String
			Dim results() As Object = Me.Invoke("ListModifiedEDocsByAppCode", New Object() {sTicket, appCode, modifiedDate})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub ListModifiedEDocsByAppCodeAsync(ByVal sTicket As String, ByVal appCode As String, ByVal modifiedDate As String)
			Me.ListModifiedEDocsByAppCodeAsync(sTicket, appCode, modifiedDate, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub ListModifiedEDocsByAppCodeAsync(ByVal sTicket As String, ByVal appCode As String, ByVal modifiedDate As String, ByVal userState As Object)
			If (Me.ListModifiedEDocsByAppCodeOperationCompleted Is Nothing) Then
				Me.ListModifiedEDocsByAppCodeOperationCompleted = AddressOf Me.OnListModifiedEDocsByAppCodeOperationCompleted
			End If
			Me.InvokeAsync("ListModifiedEDocsByAppCode", New Object() {sTicket, appCode, modifiedDate}, Me.ListModifiedEDocsByAppCodeOperationCompleted, userState)
		End Sub

		Private Sub OnListModifiedEDocsByAppCodeOperationCompleted(ByVal arg As Object)
			If (Not (Me.ListModifiedEDocsByAppCodeCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent ListModifiedEDocsByAppCodeCompleted(Me, New ListModifiedEDocsByAppCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/ClearModifiedLoansList", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Sub ClearModifiedLoansList(ByVal sTicket As String, ByVal lastModifiedDate As Date)
			Me.Invoke("ClearModifiedLoansList", New Object() {sTicket, lastModifiedDate})
		End Sub

		'''<remarks/>
		Public Overloads Sub ClearModifiedLoansListAsync(ByVal sTicket As String, ByVal lastModifiedDate As Date)
			Me.ClearModifiedLoansListAsync(sTicket, lastModifiedDate, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub ClearModifiedLoansListAsync(ByVal sTicket As String, ByVal lastModifiedDate As Date, ByVal userState As Object)
			If (Me.ClearModifiedLoansListOperationCompleted Is Nothing) Then
				Me.ClearModifiedLoansListOperationCompleted = AddressOf Me.OnClearModifiedLoansListOperationCompleted
			End If
			Me.InvokeAsync("ClearModifiedLoansList", New Object() {sTicket, lastModifiedDate}, Me.ClearModifiedLoansListOperationCompleted, userState)
		End Sub

		Private Sub OnClearModifiedLoansListOperationCompleted(ByVal arg As Object)
			If (Not (Me.ClearModifiedLoansListCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent ClearModifiedLoansListCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/ClearModifiedLoansListByAppCode", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Sub ClearModifiedLoansListByAppCode(ByVal sTicket As String, ByVal lastModifiedDate As Date, ByVal appCode As String)
			Me.Invoke("ClearModifiedLoansListByAppCode", New Object() {sTicket, lastModifiedDate, appCode})
		End Sub

		'''<remarks/>
		Public Overloads Sub ClearModifiedLoansListByAppCodeAsync(ByVal sTicket As String, ByVal lastModifiedDate As Date, ByVal appCode As String)
			Me.ClearModifiedLoansListByAppCodeAsync(sTicket, lastModifiedDate, appCode, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub ClearModifiedLoansListByAppCodeAsync(ByVal sTicket As String, ByVal lastModifiedDate As Date, ByVal appCode As String, ByVal userState As Object)
			If (Me.ClearModifiedLoansListByAppCodeOperationCompleted Is Nothing) Then
				Me.ClearModifiedLoansListByAppCodeOperationCompleted = AddressOf Me.OnClearModifiedLoansListByAppCodeOperationCompleted
			End If
			Me.InvokeAsync("ClearModifiedLoansListByAppCode", New Object() {sTicket, lastModifiedDate, appCode}, Me.ClearModifiedLoansListByAppCodeOperationCompleted, userState)
		End Sub

		Private Sub OnClearModifiedLoansListByAppCodeOperationCompleted(ByVal arg As Object)
			If (Not (Me.ClearModifiedLoansListByAppCodeCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent ClearModifiedLoansListByAppCodeCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/ClearModifiedLoanByName", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Sub ClearModifiedLoanByName(ByVal sTicket As String, ByVal loanName As String)
			Me.Invoke("ClearModifiedLoanByName", New Object() {sTicket, loanName})
		End Sub

		'''<remarks/>
		Public Overloads Sub ClearModifiedLoanByNameAsync(ByVal sTicket As String, ByVal loanName As String)
			Me.ClearModifiedLoanByNameAsync(sTicket, loanName, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub ClearModifiedLoanByNameAsync(ByVal sTicket As String, ByVal loanName As String, ByVal userState As Object)
			If (Me.ClearModifiedLoanByNameOperationCompleted Is Nothing) Then
				Me.ClearModifiedLoanByNameOperationCompleted = AddressOf Me.OnClearModifiedLoanByNameOperationCompleted
			End If
			Me.InvokeAsync("ClearModifiedLoanByName", New Object() {sTicket, loanName}, Me.ClearModifiedLoanByNameOperationCompleted, userState)
		End Sub

		Private Sub OnClearModifiedLoanByNameOperationCompleted(ByVal arg As Object)
			If (Not (Me.ClearModifiedLoanByNameCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent ClearModifiedLoanByNameCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/ClearModifiedLoanByNameByAppCode", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Sub ClearModifiedLoanByNameByAppCode(ByVal sTicket As String, ByVal loanName As String, ByVal appCode As String)
			Me.Invoke("ClearModifiedLoanByNameByAppCode", New Object() {sTicket, loanName, appCode})
		End Sub

		'''<remarks/>
		Public Overloads Sub ClearModifiedLoanByNameByAppCodeAsync(ByVal sTicket As String, ByVal loanName As String, ByVal appCode As String)
			Me.ClearModifiedLoanByNameByAppCodeAsync(sTicket, loanName, appCode, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub ClearModifiedLoanByNameByAppCodeAsync(ByVal sTicket As String, ByVal loanName As String, ByVal appCode As String, ByVal userState As Object)
			If (Me.ClearModifiedLoanByNameByAppCodeOperationCompleted Is Nothing) Then
				Me.ClearModifiedLoanByNameByAppCodeOperationCompleted = AddressOf Me.OnClearModifiedLoanByNameByAppCodeOperationCompleted
			End If
			Me.InvokeAsync("ClearModifiedLoanByNameByAppCode", New Object() {sTicket, loanName, appCode}, Me.ClearModifiedLoanByNameByAppCodeOperationCompleted, userState)
		End Sub

		Private Sub OnClearModifiedLoanByNameByAppCodeOperationCompleted(ByVal arg As Object)
			If (Not (Me.ClearModifiedLoanByNameByAppCodeCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent ClearModifiedLoanByNameByAppCodeCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/ListMyActiveTaskList", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function ListMyActiveTaskList(ByVal sTicket As String) As String
			Dim results() As Object = Me.Invoke("ListMyActiveTaskList", New Object() {sTicket})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub ListMyActiveTaskListAsync(ByVal sTicket As String)
			Me.ListMyActiveTaskListAsync(sTicket, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub ListMyActiveTaskListAsync(ByVal sTicket As String, ByVal userState As Object)
			If (Me.ListMyActiveTaskListOperationCompleted Is Nothing) Then
				Me.ListMyActiveTaskListOperationCompleted = AddressOf Me.OnListMyActiveTaskListOperationCompleted
			End If
			Me.InvokeAsync("ListMyActiveTaskList", New Object() {sTicket}, Me.ListMyActiveTaskListOperationCompleted, userState)
		End Sub

		Private Sub OnListMyActiveTaskListOperationCompleted(ByVal arg As Object)
			If (Not (Me.ListMyActiveTaskListCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent ListMyActiveTaskListCompleted(Me, New ListMyActiveTaskListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RetrieveTaskById", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RetrieveTaskById(ByVal sTicket As String, ByVal taskId As String) As String
			Dim results() As Object = Me.Invoke("RetrieveTaskById", New Object() {sTicket, taskId})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub RetrieveTaskByIdAsync(ByVal sTicket As String, ByVal taskId As String)
			Me.RetrieveTaskByIdAsync(sTicket, taskId, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RetrieveTaskByIdAsync(ByVal sTicket As String, ByVal taskId As String, ByVal userState As Object)
			If (Me.RetrieveTaskByIdOperationCompleted Is Nothing) Then
				Me.RetrieveTaskByIdOperationCompleted = AddressOf Me.OnRetrieveTaskByIdOperationCompleted
			End If
			Me.InvokeAsync("RetrieveTaskById", New Object() {sTicket, taskId}, Me.RetrieveTaskByIdOperationCompleted, userState)
		End Sub

		Private Sub OnRetrieveTaskByIdOperationCompleted(ByVal arg As Object)
			If (Not (Me.RetrieveTaskByIdCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RetrieveTaskByIdCompleted(Me, New RetrieveTaskByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RetrieveUsersAssignedToLoan", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RetrieveUsersAssignedToLoan(ByVal sTicket As String, ByVal sLNm As String) As String
			Dim results() As Object = Me.Invoke("RetrieveUsersAssignedToLoan", New Object() {sTicket, sLNm})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub RetrieveUsersAssignedToLoanAsync(ByVal sTicket As String, ByVal sLNm As String)
			Me.RetrieveUsersAssignedToLoanAsync(sTicket, sLNm, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RetrieveUsersAssignedToLoanAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal userState As Object)
			If (Me.RetrieveUsersAssignedToLoanOperationCompleted Is Nothing) Then
				Me.RetrieveUsersAssignedToLoanOperationCompleted = AddressOf Me.OnRetrieveUsersAssignedToLoanOperationCompleted
			End If
			Me.InvokeAsync("RetrieveUsersAssignedToLoan", New Object() {sTicket, sLNm}, Me.RetrieveUsersAssignedToLoanOperationCompleted, userState)
		End Sub

		Private Sub OnRetrieveUsersAssignedToLoanOperationCompleted(ByVal arg As Object)
			If (Not (Me.RetrieveUsersAssignedToLoanCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RetrieveUsersAssignedToLoanCompleted(Me, New RetrieveUsersAssignedToLoanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/TaskEdit", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function TaskEdit(ByVal sTicket As String, ByVal taskId As String, ByVal subject As String, ByVal comment As String, ByVal dueDate As String, ByVal assignedTo As String) As String
			Dim results() As Object = Me.Invoke("TaskEdit", New Object() {sTicket, taskId, subject, comment, dueDate, assignedTo})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub TaskEditAsync(ByVal sTicket As String, ByVal taskId As String, ByVal subject As String, ByVal comment As String, ByVal dueDate As String, ByVal assignedTo As String)
			Me.TaskEditAsync(sTicket, taskId, subject, comment, dueDate, assignedTo, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub TaskEditAsync(ByVal sTicket As String, ByVal taskId As String, ByVal subject As String, ByVal comment As String, ByVal dueDate As String, ByVal assignedTo As String, ByVal userState As Object)
			If (Me.TaskEditOperationCompleted Is Nothing) Then
				Me.TaskEditOperationCompleted = AddressOf Me.OnTaskEditOperationCompleted
			End If
			Me.InvokeAsync("TaskEdit", New Object() {sTicket, taskId, subject, comment, dueDate, assignedTo}, Me.TaskEditOperationCompleted, userState)
		End Sub

		Private Sub OnTaskEditOperationCompleted(ByVal arg As Object)
			If (Not (Me.TaskEditCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent TaskEditCompleted(Me, New TaskEditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/TaskResolve", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function TaskResolve(ByVal sTicket As String, ByVal taskId As String, ByVal subject As String, ByVal comment As String, ByVal dueDate As String, ByVal assignedTo As String) As String
			Dim results() As Object = Me.Invoke("TaskResolve", New Object() {sTicket, taskId, subject, comment, dueDate, assignedTo})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub TaskResolveAsync(ByVal sTicket As String, ByVal taskId As String, ByVal subject As String, ByVal comment As String, ByVal dueDate As String, ByVal assignedTo As String)
			Me.TaskResolveAsync(sTicket, taskId, subject, comment, dueDate, assignedTo, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub TaskResolveAsync(ByVal sTicket As String, ByVal taskId As String, ByVal subject As String, ByVal comment As String, ByVal dueDate As String, ByVal assignedTo As String, ByVal userState As Object)
			If (Me.TaskResolveOperationCompleted Is Nothing) Then
				Me.TaskResolveOperationCompleted = AddressOf Me.OnTaskResolveOperationCompleted
			End If
			Me.InvokeAsync("TaskResolve", New Object() {sTicket, taskId, subject, comment, dueDate, assignedTo}, Me.TaskResolveOperationCompleted, userState)
		End Sub

		Private Sub OnTaskResolveOperationCompleted(ByVal arg As Object)
			If (Not (Me.TaskResolveCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent TaskResolveCompleted(Me, New TaskResolveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/SaveMismo23", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function SaveMismo23(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String) As System.Guid
			Dim results() As Object = Me.Invoke("SaveMismo23", New Object() {sTicket, loanId, sXmlData})
			Return CType(results(0), System.Guid)
		End Function

		'''<remarks/>
		Public Overloads Sub SaveMismo23Async(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String)
			Me.SaveMismo23Async(sTicket, loanId, sXmlData, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub SaveMismo23Async(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String, ByVal userState As Object)
			If (Me.SaveMismo23OperationCompleted Is Nothing) Then
				Me.SaveMismo23OperationCompleted = AddressOf Me.OnSaveMismo23OperationCompleted
			End If
			Me.InvokeAsync("SaveMismo23", New Object() {sTicket, loanId, sXmlData}, Me.SaveMismo23OperationCompleted, userState)
		End Sub

		Private Sub OnSaveMismo23OperationCompleted(ByVal arg As Object)
			If (Not (Me.SaveMismo23CompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent SaveMismo23Completed(Me, New SaveMismo23CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/LoadMismo23ByLoanName", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function LoadMismo23ByLoanName(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlQuery As String) As String
			Dim results() As Object = Me.Invoke("LoadMismo23ByLoanName", New Object() {sTicket, sLNm, sXmlQuery})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub LoadMismo23ByLoanNameAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlQuery As String)
			Me.LoadMismo23ByLoanNameAsync(sTicket, sLNm, sXmlQuery, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub LoadMismo23ByLoanNameAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlQuery As String, ByVal userState As Object)
			If (Me.LoadMismo23ByLoanNameOperationCompleted Is Nothing) Then
				Me.LoadMismo23ByLoanNameOperationCompleted = AddressOf Me.OnLoadMismo23ByLoanNameOperationCompleted
			End If
			Me.InvokeAsync("LoadMismo23ByLoanName", New Object() {sTicket, sLNm, sXmlQuery}, Me.LoadMismo23ByLoanNameOperationCompleted, userState)
		End Sub

		Private Sub OnLoadMismo23ByLoanNameOperationCompleted(ByVal arg As Object)
			If (Not (Me.LoadMismo23ByLoanNameCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent LoadMismo23ByLoanNameCompleted(Me, New LoadMismo23ByLoanNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/GetPdfByLoanName", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function GetPdfByLoanName(ByVal sTicket As String, ByVal sLNm As String, ByVal sPdfName As String) As String
			Dim results() As Object = Me.Invoke("GetPdfByLoanName", New Object() {sTicket, sLNm, sPdfName})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub GetPdfByLoanNameAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sPdfName As String)
			Me.GetPdfByLoanNameAsync(sTicket, sLNm, sPdfName, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub GetPdfByLoanNameAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sPdfName As String, ByVal userState As Object)
			If (Me.GetPdfByLoanNameOperationCompleted Is Nothing) Then
				Me.GetPdfByLoanNameOperationCompleted = AddressOf Me.OnGetPdfByLoanNameOperationCompleted
			End If
			Me.InvokeAsync("GetPdfByLoanName", New Object() {sTicket, sLNm, sPdfName}, Me.GetPdfByLoanNameOperationCompleted, userState)
		End Sub

		Private Sub OnGetPdfByLoanNameOperationCompleted(ByVal arg As Object)
			If (Not (Me.GetPdfByLoanNameCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent GetPdfByLoanNameCompleted(Me, New GetPdfByLoanNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/UploadLONXml", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function UploadLONXml(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String) As System.Guid
			Dim results() As Object = Me.Invoke("UploadLONXml", New Object() {sTicket, loanId, sXmlData})
			Return CType(results(0), System.Guid)
		End Function

		'''<remarks/>
		Public Overloads Sub UploadLONXmlAsync(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String)
			Me.UploadLONXmlAsync(sTicket, loanId, sXmlData, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub UploadLONXmlAsync(ByVal sTicket As String, ByVal loanId As System.Guid, ByVal sXmlData As String, ByVal userState As Object)
			If (Me.UploadLONXmlOperationCompleted Is Nothing) Then
				Me.UploadLONXmlOperationCompleted = AddressOf Me.OnUploadLONXmlOperationCompleted
			End If
			Me.InvokeAsync("UploadLONXml", New Object() {sTicket, loanId, sXmlData}, Me.UploadLONXmlOperationCompleted, userState)
		End Sub

		Private Sub OnUploadLONXmlOperationCompleted(ByVal arg As Object)
			If (Not (Me.UploadLONXmlCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent UploadLONXmlCompleted(Me, New UploadLONXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/Search", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function Search(ByVal sTicket As String, ByVal sSearchFilterXml As String) As String
			Dim results() As Object = Me.Invoke("Search", New Object() {sTicket, sSearchFilterXml})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub SearchAsync(ByVal sTicket As String, ByVal sSearchFilterXml As String)
			Me.SearchAsync(sTicket, sSearchFilterXml, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub SearchAsync(ByVal sTicket As String, ByVal sSearchFilterXml As String, ByVal userState As Object)
			If (Me.SearchOperationCompleted Is Nothing) Then
				Me.SearchOperationCompleted = AddressOf Me.OnSearchOperationCompleted
			End If
			Me.InvokeAsync("Search", New Object() {sTicket, sSearchFilterXml}, Me.SearchOperationCompleted, userState)
		End Sub

		Private Sub OnSearchOperationCompleted(ByVal arg As Object)
			If (Not (Me.SearchCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent SearchCompleted(Me, New SearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RunInternalPricing", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RunInternalPricing(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlData As String) As String
			Dim results() As Object = Me.Invoke("RunInternalPricing", New Object() {sTicket, sLNm, sXmlData})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub RunInternalPricingAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlData As String)
			Me.RunInternalPricingAsync(sTicket, sLNm, sXmlData, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RunInternalPricingAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal sXmlData As String, ByVal userState As Object)
			If (Me.RunInternalPricingOperationCompleted Is Nothing) Then
				Me.RunInternalPricingOperationCompleted = AddressOf Me.OnRunInternalPricingOperationCompleted
			End If
			Me.InvokeAsync("RunInternalPricing", New Object() {sTicket, sLNm, sXmlData}, Me.RunInternalPricingOperationCompleted, userState)
		End Sub

		Private Sub OnRunInternalPricingOperationCompleted(ByVal arg As Object)
			If (Not (Me.RunInternalPricingCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RunInternalPricingCompleted(Me, New RunInternalPricingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RunQuickPricer", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RunQuickPricer(ByVal sTicket As String, ByVal sXmlData As String) As String
			Dim results() As Object = Me.Invoke("RunQuickPricer", New Object() {sTicket, sXmlData})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub RunQuickPricerAsync(ByVal sTicket As String, ByVal sXmlData As String)
			Me.RunQuickPricerAsync(sTicket, sXmlData, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RunQuickPricerAsync(ByVal sTicket As String, ByVal sXmlData As String, ByVal userState As Object)
			If (Me.RunQuickPricerOperationCompleted Is Nothing) Then
				Me.RunQuickPricerOperationCompleted = AddressOf Me.OnRunQuickPricerOperationCompleted
			End If
			Me.InvokeAsync("RunQuickPricer", New Object() {sTicket, sXmlData}, Me.RunQuickPricerOperationCompleted, userState)
		End Sub

		Private Sub OnRunQuickPricerOperationCompleted(ByVal arg As Object)
			If (Not (Me.RunQuickPricerCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RunQuickPricerCompleted(Me, New RunQuickPricerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RunQuickPricerForLockDesk", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RunQuickPricerForLockDesk(ByVal sTicket As String, ByVal sXmlData As String) As String
			Dim results() As Object = Me.Invoke("RunQuickPricerForLockDesk", New Object() {sTicket, sXmlData})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub RunQuickPricerForLockDeskAsync(ByVal sTicket As String, ByVal sXmlData As String)
			Me.RunQuickPricerForLockDeskAsync(sTicket, sXmlData, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RunQuickPricerForLockDeskAsync(ByVal sTicket As String, ByVal sXmlData As String, ByVal userState As Object)
			If (Me.RunQuickPricerForLockDeskOperationCompleted Is Nothing) Then
				Me.RunQuickPricerForLockDeskOperationCompleted = AddressOf Me.OnRunQuickPricerForLockDeskOperationCompleted
			End If
			Me.InvokeAsync("RunQuickPricerForLockDesk", New Object() {sTicket, sXmlData}, Me.RunQuickPricerForLockDeskOperationCompleted, userState)
		End Sub

		Private Sub OnRunQuickPricerForLockDeskOperationCompleted(ByVal arg As Object)
			If (Not (Me.RunQuickPricerForLockDeskCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RunQuickPricerForLockDeskCompleted(Me, New RunQuickPricerForLockDeskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/SubmitTotalScorecard", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function SubmitTotalScorecard(ByVal sTicket As String, ByVal sLNm As String) As String
			Dim results() As Object = Me.Invoke("SubmitTotalScorecard", New Object() {sTicket, sLNm})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub SubmitTotalScorecardAsync(ByVal sTicket As String, ByVal sLNm As String)
			Me.SubmitTotalScorecardAsync(sTicket, sLNm, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub SubmitTotalScorecardAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal userState As Object)
			If (Me.SubmitTotalScorecardOperationCompleted Is Nothing) Then
				Me.SubmitTotalScorecardOperationCompleted = AddressOf Me.OnSubmitTotalScorecardOperationCompleted
			End If
			Me.InvokeAsync("SubmitTotalScorecard", New Object() {sTicket, sLNm}, Me.SubmitTotalScorecardOperationCompleted, userState)
		End Sub

		Private Sub OnSubmitTotalScorecardOperationCompleted(ByVal arg As Object)
			If (Not (Me.SubmitTotalScorecardCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent SubmitTotalScorecardCompleted(Me, New SubmitTotalScorecardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/SubmitToFannieMaeEarlyCheck", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function SubmitToFannieMaeEarlyCheck(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String, ByVal institutionId As String) As String
			Dim results() As Object = Me.Invoke("SubmitToFannieMaeEarlyCheck", New Object() {sTicket, sLNm, duUserName, duPassword, institutionId})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub SubmitToFannieMaeEarlyCheckAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String, ByVal institutionId As String)
			Me.SubmitToFannieMaeEarlyCheckAsync(sTicket, sLNm, duUserName, duPassword, institutionId, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub SubmitToFannieMaeEarlyCheckAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String, ByVal institutionId As String, ByVal userState As Object)
			If (Me.SubmitToFannieMaeEarlyCheckOperationCompleted Is Nothing) Then
				Me.SubmitToFannieMaeEarlyCheckOperationCompleted = AddressOf Me.OnSubmitToFannieMaeEarlyCheckOperationCompleted
			End If
			Me.InvokeAsync("SubmitToFannieMaeEarlyCheck", New Object() {sTicket, sLNm, duUserName, duPassword, institutionId}, Me.SubmitToFannieMaeEarlyCheckOperationCompleted, userState)
		End Sub

		Private Sub OnSubmitToFannieMaeEarlyCheckOperationCompleted(ByVal arg As Object)
			If (Not (Me.SubmitToFannieMaeEarlyCheckCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent SubmitToFannieMaeEarlyCheckCompleted(Me, New SubmitToFannieMaeEarlyCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/SubmitToDesktopUnderwriterSeamless", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function SubmitToDesktopUnderwriterSeamless(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String, ByVal institutionId As String, ByVal craProvider As String, ByVal craLoginName As String, ByVal craPassword As String, ByVal isCopyLiabilities As Boolean) As String
			Dim results() As Object = Me.Invoke("SubmitToDesktopUnderwriterSeamless", New Object() {sTicket, sLNm, duUserName, duPassword, institutionId, craProvider, craLoginName, craPassword, isCopyLiabilities})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub SubmitToDesktopUnderwriterSeamlessAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String, ByVal institutionId As String, ByVal craProvider As String, ByVal craLoginName As String, ByVal craPassword As String, ByVal isCopyLiabilities As Boolean)
			Me.SubmitToDesktopUnderwriterSeamlessAsync(sTicket, sLNm, duUserName, duPassword, institutionId, craProvider, craLoginName, craPassword, isCopyLiabilities, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub SubmitToDesktopUnderwriterSeamlessAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String, ByVal institutionId As String, ByVal craProvider As String, ByVal craLoginName As String, ByVal craPassword As String, ByVal isCopyLiabilities As Boolean, ByVal userState As Object)
			If (Me.SubmitToDesktopUnderwriterSeamlessOperationCompleted Is Nothing) Then
				Me.SubmitToDesktopUnderwriterSeamlessOperationCompleted = AddressOf Me.OnSubmitToDesktopUnderwriterSeamlessOperationCompleted
			End If
			Me.InvokeAsync("SubmitToDesktopUnderwriterSeamless", New Object() {sTicket, sLNm, duUserName, duPassword, institutionId, craProvider, craLoginName, craPassword, isCopyLiabilities}, Me.SubmitToDesktopUnderwriterSeamlessOperationCompleted, userState)
		End Sub

		Private Sub OnSubmitToDesktopUnderwriterSeamlessOperationCompleted(ByVal arg As Object)
			If (Not (Me.SubmitToDesktopUnderwriterSeamlessCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent SubmitToDesktopUnderwriterSeamlessCompleted(Me, New SubmitToDesktopUnderwriterSeamlessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/SubmitToDesktopUnderwriterSeamless_O" &
			"ptionalCredit", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function SubmitToDesktopUnderwriterSeamless_OptionalCredit(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String, ByVal institutionId As String, ByVal craProvider As String, ByVal craLoginName As String, ByVal craPassword As String, ByVal isCopyLiabilities As Boolean, ByVal importCreditReport As Boolean) As String
			Dim results() As Object = Me.Invoke("SubmitToDesktopUnderwriterSeamless_OptionalCredit", New Object() {sTicket, sLNm, duUserName, duPassword, institutionId, craProvider, craLoginName, craPassword, isCopyLiabilities, importCreditReport})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub SubmitToDesktopUnderwriterSeamless_OptionalCreditAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String, ByVal institutionId As String, ByVal craProvider As String, ByVal craLoginName As String, ByVal craPassword As String, ByVal isCopyLiabilities As Boolean, ByVal importCreditReport As Boolean)
			Me.SubmitToDesktopUnderwriterSeamless_OptionalCreditAsync(sTicket, sLNm, duUserName, duPassword, institutionId, craProvider, craLoginName, craPassword, isCopyLiabilities, importCreditReport, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub SubmitToDesktopUnderwriterSeamless_OptionalCreditAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String, ByVal institutionId As String, ByVal craProvider As String, ByVal craLoginName As String, ByVal craPassword As String, ByVal isCopyLiabilities As Boolean, ByVal importCreditReport As Boolean, ByVal userState As Object)
			If (Me.SubmitToDesktopUnderwriterSeamless_OptionalCreditOperationCompleted Is Nothing) Then
				Me.SubmitToDesktopUnderwriterSeamless_OptionalCreditOperationCompleted = AddressOf Me.OnSubmitToDesktopUnderwriterSeamless_OptionalCreditOperationCompleted
			End If
			Me.InvokeAsync("SubmitToDesktopUnderwriterSeamless_OptionalCredit", New Object() {sTicket, sLNm, duUserName, duPassword, institutionId, craProvider, craLoginName, craPassword, isCopyLiabilities, importCreditReport}, Me.SubmitToDesktopUnderwriterSeamless_OptionalCreditOperationCompleted, userState)
		End Sub

		Private Sub OnSubmitToDesktopUnderwriterSeamless_OptionalCreditOperationCompleted(ByVal arg As Object)
			If (Not (Me.SubmitToDesktopUnderwriterSeamless_OptionalCreditCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent SubmitToDesktopUnderwriterSeamless_OptionalCreditCompleted(Me, New SubmitToDesktopUnderwriterSeamless_OptionalCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/SubmitToDesktopUnderwriterSeamlessRe" &
			"issueCredit", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function SubmitToDesktopUnderwriterSeamlessReissueCredit(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String, ByVal institutionId As String, ByVal craProvider As String, ByVal craLoginName As String, ByVal craPassword As String, ByVal isCopyLiabilities As Boolean, ByVal creditXml As String) As String
			Dim results() As Object = Me.Invoke("SubmitToDesktopUnderwriterSeamlessReissueCredit", New Object() {sTicket, sLNm, duUserName, duPassword, institutionId, craProvider, craLoginName, craPassword, isCopyLiabilities, creditXml})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub SubmitToDesktopUnderwriterSeamlessReissueCreditAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String, ByVal institutionId As String, ByVal craProvider As String, ByVal craLoginName As String, ByVal craPassword As String, ByVal isCopyLiabilities As Boolean, ByVal creditXml As String)
			Me.SubmitToDesktopUnderwriterSeamlessReissueCreditAsync(sTicket, sLNm, duUserName, duPassword, institutionId, craProvider, craLoginName, craPassword, isCopyLiabilities, creditXml, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub SubmitToDesktopUnderwriterSeamlessReissueCreditAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String, ByVal institutionId As String, ByVal craProvider As String, ByVal craLoginName As String, ByVal craPassword As String, ByVal isCopyLiabilities As Boolean, ByVal creditXml As String, ByVal userState As Object)
			If (Me.SubmitToDesktopUnderwriterSeamlessReissueCreditOperationCompleted Is Nothing) Then
				Me.SubmitToDesktopUnderwriterSeamlessReissueCreditOperationCompleted = AddressOf Me.OnSubmitToDesktopUnderwriterSeamlessReissueCreditOperationCompleted
			End If
			Me.InvokeAsync("SubmitToDesktopUnderwriterSeamlessReissueCredit", New Object() {sTicket, sLNm, duUserName, duPassword, institutionId, craProvider, craLoginName, craPassword, isCopyLiabilities, creditXml}, Me.SubmitToDesktopUnderwriterSeamlessReissueCreditOperationCompleted, userState)
		End Sub

		Private Sub OnSubmitToDesktopUnderwriterSeamlessReissueCreditOperationCompleted(ByVal arg As Object)
			If (Not (Me.SubmitToDesktopUnderwriterSeamlessReissueCreditCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent SubmitToDesktopUnderwriterSeamlessReissueCreditCompleted(Me, New SubmitToDesktopUnderwriterSeamlessReissueCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/SubmitToDesktopUnderwriterSeamlessRe" &
			"issueCredit_OptionalCreditImport", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function SubmitToDesktopUnderwriterSeamlessReissueCredit_OptionalCreditImport(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String, ByVal institutionId As String, ByVal craProvider As String, ByVal craLoginName As String, ByVal craPassword As String, ByVal isCopyLiabilities As Boolean, ByVal creditXml As String, ByVal importCreditReport As Boolean) As String
			Dim results() As Object = Me.Invoke("SubmitToDesktopUnderwriterSeamlessReissueCredit_OptionalCreditImport", New Object() {sTicket, sLNm, duUserName, duPassword, institutionId, craProvider, craLoginName, craPassword, isCopyLiabilities, creditXml, importCreditReport})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub SubmitToDesktopUnderwriterSeamlessReissueCredit_OptionalCreditImportAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String, ByVal institutionId As String, ByVal craProvider As String, ByVal craLoginName As String, ByVal craPassword As String, ByVal isCopyLiabilities As Boolean, ByVal creditXml As String, ByVal importCreditReport As Boolean)
			Me.SubmitToDesktopUnderwriterSeamlessReissueCredit_OptionalCreditImportAsync(sTicket, sLNm, duUserName, duPassword, institutionId, craProvider, craLoginName, craPassword, isCopyLiabilities, creditXml, importCreditReport, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub SubmitToDesktopUnderwriterSeamlessReissueCredit_OptionalCreditImportAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String, ByVal institutionId As String, ByVal craProvider As String, ByVal craLoginName As String, ByVal craPassword As String, ByVal isCopyLiabilities As Boolean, ByVal creditXml As String, ByVal importCreditReport As Boolean, ByVal userState As Object)
			If (Me.SubmitToDesktopUnderwriterSeamlessReissueCredit_OptionalCreditImportOperationCompleted Is Nothing) Then
				Me.SubmitToDesktopUnderwriterSeamlessReissueCredit_OptionalCreditImportOperationCompleted = AddressOf Me.OnSubmitToDesktopUnderwriterSeamlessReissueCredit_OptionalCreditImportOperationCompleted
			End If
			Me.InvokeAsync("SubmitToDesktopUnderwriterSeamlessReissueCredit_OptionalCreditImport", New Object() {sTicket, sLNm, duUserName, duPassword, institutionId, craProvider, craLoginName, craPassword, isCopyLiabilities, creditXml, importCreditReport}, Me.SubmitToDesktopUnderwriterSeamlessReissueCredit_OptionalCreditImportOperationCompleted, userState)
		End Sub

		Private Sub OnSubmitToDesktopUnderwriterSeamlessReissueCredit_OptionalCreditImportOperationCompleted(ByVal arg As Object)
			If (Not (Me.SubmitToDesktopUnderwriterSeamlessReissueCredit_OptionalCreditImportCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent SubmitToDesktopUnderwriterSeamlessReissueCredit_OptionalCreditImportCompleted(Me, New SubmitToDesktopUnderwriterSeamlessReissueCredit_OptionalCreditImportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/SubmitToDesktopOriginatorSeamless", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function SubmitToDesktopOriginatorSeamless(ByVal authTicket As String, ByVal optionsXml As String) As String
			Dim results() As Object = Me.Invoke("SubmitToDesktopOriginatorSeamless", New Object() {authTicket, optionsXml})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub SubmitToDesktopOriginatorSeamlessAsync(ByVal authTicket As String, ByVal optionsXml As String)
			Me.SubmitToDesktopOriginatorSeamlessAsync(authTicket, optionsXml, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub SubmitToDesktopOriginatorSeamlessAsync(ByVal authTicket As String, ByVal optionsXml As String, ByVal userState As Object)
			If (Me.SubmitToDesktopOriginatorSeamlessOperationCompleted Is Nothing) Then
				Me.SubmitToDesktopOriginatorSeamlessOperationCompleted = AddressOf Me.OnSubmitToDesktopOriginatorSeamlessOperationCompleted
			End If
			Me.InvokeAsync("SubmitToDesktopOriginatorSeamless", New Object() {authTicket, optionsXml}, Me.SubmitToDesktopOriginatorSeamlessOperationCompleted, userState)
		End Sub

		Private Sub OnSubmitToDesktopOriginatorSeamlessOperationCompleted(ByVal arg As Object)
			If (Not (Me.SubmitToDesktopOriginatorSeamlessCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent SubmitToDesktopOriginatorSeamlessCompleted(Me, New SubmitToDesktopOriginatorSeamlessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/SubmitToDesktopUnderwriterWithInstit" &
			"uteId", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function SubmitToDesktopUnderwriterWithInstituteId(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String, ByVal institutionId As String) As String
			Dim results() As Object = Me.Invoke("SubmitToDesktopUnderwriterWithInstituteId", New Object() {sTicket, sLNm, duUserName, duPassword, institutionId})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub SubmitToDesktopUnderwriterWithInstituteIdAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String, ByVal institutionId As String)
			Me.SubmitToDesktopUnderwriterWithInstituteIdAsync(sTicket, sLNm, duUserName, duPassword, institutionId, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub SubmitToDesktopUnderwriterWithInstituteIdAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String, ByVal institutionId As String, ByVal userState As Object)
			If (Me.SubmitToDesktopUnderwriterWithInstituteIdOperationCompleted Is Nothing) Then
				Me.SubmitToDesktopUnderwriterWithInstituteIdOperationCompleted = AddressOf Me.OnSubmitToDesktopUnderwriterWithInstituteIdOperationCompleted
			End If
			Me.InvokeAsync("SubmitToDesktopUnderwriterWithInstituteId", New Object() {sTicket, sLNm, duUserName, duPassword, institutionId}, Me.SubmitToDesktopUnderwriterWithInstituteIdOperationCompleted, userState)
		End Sub

		Private Sub OnSubmitToDesktopUnderwriterWithInstituteIdOperationCompleted(ByVal arg As Object)
			If (Not (Me.SubmitToDesktopUnderwriterWithInstituteIdCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent SubmitToDesktopUnderwriterWithInstituteIdCompleted(Me, New SubmitToDesktopUnderwriterWithInstituteIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/SubmitToDesktopUnderwriter", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function SubmitToDesktopUnderwriter(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String) As String
			Dim results() As Object = Me.Invoke("SubmitToDesktopUnderwriter", New Object() {sTicket, sLNm, duUserName, duPassword})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub SubmitToDesktopUnderwriterAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String)
			Me.SubmitToDesktopUnderwriterAsync(sTicket, sLNm, duUserName, duPassword, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub SubmitToDesktopUnderwriterAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String, ByVal userState As Object)
			If (Me.SubmitToDesktopUnderwriterOperationCompleted Is Nothing) Then
				Me.SubmitToDesktopUnderwriterOperationCompleted = AddressOf Me.OnSubmitToDesktopUnderwriterOperationCompleted
			End If
			Me.InvokeAsync("SubmitToDesktopUnderwriter", New Object() {sTicket, sLNm, duUserName, duPassword}, Me.SubmitToDesktopUnderwriterOperationCompleted, userState)
		End Sub

		Private Sub OnSubmitToDesktopUnderwriterOperationCompleted(ByVal arg As Object)
			If (Not (Me.SubmitToDesktopUnderwriterCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent SubmitToDesktopUnderwriterCompleted(Me, New SubmitToDesktopUnderwriterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/ImportFromFreddieMac", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function ImportFromFreddieMac(ByVal sTicket As String, ByVal optionsXml As String) As String
			Dim results() As Object = Me.Invoke("ImportFromFreddieMac", New Object() {sTicket, optionsXml})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub ImportFromFreddieMacAsync(ByVal sTicket As String, ByVal optionsXml As String)
			Me.ImportFromFreddieMacAsync(sTicket, optionsXml, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub ImportFromFreddieMacAsync(ByVal sTicket As String, ByVal optionsXml As String, ByVal userState As Object)
			If (Me.ImportFromFreddieMacOperationCompleted Is Nothing) Then
				Me.ImportFromFreddieMacOperationCompleted = AddressOf Me.OnImportFromFreddieMacOperationCompleted
			End If
			Me.InvokeAsync("ImportFromFreddieMac", New Object() {sTicket, optionsXml}, Me.ImportFromFreddieMacOperationCompleted, userState)
		End Sub

		Private Sub OnImportFromFreddieMacOperationCompleted(ByVal arg As Object)
			If (Not (Me.ImportFromFreddieMacCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent ImportFromFreddieMacCompleted(Me, New ImportFromFreddieMacCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/CreateWithDesktopUnderwriter", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function CreateWithDesktopUnderwriter(ByVal sTicket As String, ByVal doUserName As String, ByVal doPassword As String, ByVal sDuCaseId As String, ByVal isImportCredit As Boolean) As String
			Dim results() As Object = Me.Invoke("CreateWithDesktopUnderwriter", New Object() {sTicket, doUserName, doPassword, sDuCaseId, isImportCredit})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub CreateWithDesktopUnderwriterAsync(ByVal sTicket As String, ByVal doUserName As String, ByVal doPassword As String, ByVal sDuCaseId As String, ByVal isImportCredit As Boolean)
			Me.CreateWithDesktopUnderwriterAsync(sTicket, doUserName, doPassword, sDuCaseId, isImportCredit, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub CreateWithDesktopUnderwriterAsync(ByVal sTicket As String, ByVal doUserName As String, ByVal doPassword As String, ByVal sDuCaseId As String, ByVal isImportCredit As Boolean, ByVal userState As Object)
			If (Me.CreateWithDesktopUnderwriterOperationCompleted Is Nothing) Then
				Me.CreateWithDesktopUnderwriterOperationCompleted = AddressOf Me.OnCreateWithDesktopUnderwriterOperationCompleted
			End If
			Me.InvokeAsync("CreateWithDesktopUnderwriter", New Object() {sTicket, doUserName, doPassword, sDuCaseId, isImportCredit}, Me.CreateWithDesktopUnderwriterOperationCompleted, userState)
		End Sub

		Private Sub OnCreateWithDesktopUnderwriterOperationCompleted(ByVal arg As Object)
			If (Not (Me.CreateWithDesktopUnderwriterCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent CreateWithDesktopUnderwriterCompleted(Me, New CreateWithDesktopUnderwriterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/ImportFromFannieMaeWithInstitutionId" &
			"", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function ImportFromFannieMaeWithInstitutionId(ByVal sTicket As String, ByVal sLNm As String, ByVal doUserName As String, ByVal doPassword As String, ByVal lenderInstitutionIdentifer As String, ByVal isImportCredit As Boolean) As String
			Dim results() As Object = Me.Invoke("ImportFromFannieMaeWithInstitutionId", New Object() {sTicket, sLNm, doUserName, doPassword, lenderInstitutionIdentifer, isImportCredit})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub ImportFromFannieMaeWithInstitutionIdAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal doUserName As String, ByVal doPassword As String, ByVal lenderInstitutionIdentifer As String, ByVal isImportCredit As Boolean)
			Me.ImportFromFannieMaeWithInstitutionIdAsync(sTicket, sLNm, doUserName, doPassword, lenderInstitutionIdentifer, isImportCredit, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub ImportFromFannieMaeWithInstitutionIdAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal doUserName As String, ByVal doPassword As String, ByVal lenderInstitutionIdentifer As String, ByVal isImportCredit As Boolean, ByVal userState As Object)
			If (Me.ImportFromFannieMaeWithInstitutionIdOperationCompleted Is Nothing) Then
				Me.ImportFromFannieMaeWithInstitutionIdOperationCompleted = AddressOf Me.OnImportFromFannieMaeWithInstitutionIdOperationCompleted
			End If
			Me.InvokeAsync("ImportFromFannieMaeWithInstitutionId", New Object() {sTicket, sLNm, doUserName, doPassword, lenderInstitutionIdentifer, isImportCredit}, Me.ImportFromFannieMaeWithInstitutionIdOperationCompleted, userState)
		End Sub

		Private Sub OnImportFromFannieMaeWithInstitutionIdOperationCompleted(ByVal arg As Object)
			If (Not (Me.ImportFromFannieMaeWithInstitutionIdCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent ImportFromFannieMaeWithInstitutionIdCompleted(Me, New ImportFromFannieMaeWithInstitutionIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/ImportFromFannieMae", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function ImportFromFannieMae(ByVal sTicket As String, ByVal sLNm As String, ByVal doUserName As String, ByVal doPassword As String, ByVal isImportCredit As Boolean) As String
			Dim results() As Object = Me.Invoke("ImportFromFannieMae", New Object() {sTicket, sLNm, doUserName, doPassword, isImportCredit})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub ImportFromFannieMaeAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal doUserName As String, ByVal doPassword As String, ByVal isImportCredit As Boolean)
			Me.ImportFromFannieMaeAsync(sTicket, sLNm, doUserName, doPassword, isImportCredit, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub ImportFromFannieMaeAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal doUserName As String, ByVal doPassword As String, ByVal isImportCredit As Boolean, ByVal userState As Object)
			If (Me.ImportFromFannieMaeOperationCompleted Is Nothing) Then
				Me.ImportFromFannieMaeOperationCompleted = AddressOf Me.OnImportFromFannieMaeOperationCompleted
			End If
			Me.InvokeAsync("ImportFromFannieMae", New Object() {sTicket, sLNm, doUserName, doPassword, isImportCredit}, Me.ImportFromFannieMaeOperationCompleted, userState)
		End Sub

		Private Sub OnImportFromFannieMaeOperationCompleted(ByVal arg As Object)
			If (Not (Me.ImportFromFannieMaeCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent ImportFromFannieMaeCompleted(Me, New ImportFromFannieMaeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/GetDesktopUnderwriterCasefileStatusB" &
			"yLoanFile", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function GetDesktopUnderwriterCasefileStatusByLoanFile(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String, ByVal isDo As Boolean) As String
			Dim results() As Object = Me.Invoke("GetDesktopUnderwriterCasefileStatusByLoanFile", New Object() {sTicket, sLNm, duUserName, duPassword, isDo})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub GetDesktopUnderwriterCasefileStatusByLoanFileAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String, ByVal isDo As Boolean)
			Me.GetDesktopUnderwriterCasefileStatusByLoanFileAsync(sTicket, sLNm, duUserName, duPassword, isDo, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub GetDesktopUnderwriterCasefileStatusByLoanFileAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal duUserName As String, ByVal duPassword As String, ByVal isDo As Boolean, ByVal userState As Object)
			If (Me.GetDesktopUnderwriterCasefileStatusByLoanFileOperationCompleted Is Nothing) Then
				Me.GetDesktopUnderwriterCasefileStatusByLoanFileOperationCompleted = AddressOf Me.OnGetDesktopUnderwriterCasefileStatusByLoanFileOperationCompleted
			End If
			Me.InvokeAsync("GetDesktopUnderwriterCasefileStatusByLoanFile", New Object() {sTicket, sLNm, duUserName, duPassword, isDo}, Me.GetDesktopUnderwriterCasefileStatusByLoanFileOperationCompleted, userState)
		End Sub

		Private Sub OnGetDesktopUnderwriterCasefileStatusByLoanFileOperationCompleted(ByVal arg As Object)
			If (Not (Me.GetDesktopUnderwriterCasefileStatusByLoanFileCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent GetDesktopUnderwriterCasefileStatusByLoanFileCompleted(Me, New GetDesktopUnderwriterCasefileStatusByLoanFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/GetDesktopUnderwriterCasefileStatus", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function GetDesktopUnderwriterCasefileStatus(ByVal sTicket As String, ByVal sDuCaseId As String, ByVal duUserName As String, ByVal duPassword As String, ByVal isDo As Boolean) As String
			Dim results() As Object = Me.Invoke("GetDesktopUnderwriterCasefileStatus", New Object() {sTicket, sDuCaseId, duUserName, duPassword, isDo})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub GetDesktopUnderwriterCasefileStatusAsync(ByVal sTicket As String, ByVal sDuCaseId As String, ByVal duUserName As String, ByVal duPassword As String, ByVal isDo As Boolean)
			Me.GetDesktopUnderwriterCasefileStatusAsync(sTicket, sDuCaseId, duUserName, duPassword, isDo, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub GetDesktopUnderwriterCasefileStatusAsync(ByVal sTicket As String, ByVal sDuCaseId As String, ByVal duUserName As String, ByVal duPassword As String, ByVal isDo As Boolean, ByVal userState As Object)
			If (Me.GetDesktopUnderwriterCasefileStatusOperationCompleted Is Nothing) Then
				Me.GetDesktopUnderwriterCasefileStatusOperationCompleted = AddressOf Me.OnGetDesktopUnderwriterCasefileStatusOperationCompleted
			End If
			Me.InvokeAsync("GetDesktopUnderwriterCasefileStatus", New Object() {sTicket, sDuCaseId, duUserName, duPassword, isDo}, Me.GetDesktopUnderwriterCasefileStatusOperationCompleted, userState)
		End Sub

		Private Sub OnGetDesktopUnderwriterCasefileStatusOperationCompleted(ByVal arg As Object)
			If (Not (Me.GetDesktopUnderwriterCasefileStatusCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent GetDesktopUnderwriterCasefileStatusCompleted(Me, New GetDesktopUnderwriterCasefileStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/SubmitToDesktopOriginator", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function SubmitToDesktopOriginator(ByVal sTicket As String, ByVal sLNm As String, ByVal doUserName As String, ByVal doPassword As String) As String
			Dim results() As Object = Me.Invoke("SubmitToDesktopOriginator", New Object() {sTicket, sLNm, doUserName, doPassword})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub SubmitToDesktopOriginatorAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal doUserName As String, ByVal doPassword As String)
			Me.SubmitToDesktopOriginatorAsync(sTicket, sLNm, doUserName, doPassword, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub SubmitToDesktopOriginatorAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal doUserName As String, ByVal doPassword As String, ByVal userState As Object)
			If (Me.SubmitToDesktopOriginatorOperationCompleted Is Nothing) Then
				Me.SubmitToDesktopOriginatorOperationCompleted = AddressOf Me.OnSubmitToDesktopOriginatorOperationCompleted
			End If
			Me.InvokeAsync("SubmitToDesktopOriginator", New Object() {sTicket, sLNm, doUserName, doPassword}, Me.SubmitToDesktopOriginatorOperationCompleted, userState)
		End Sub

		Private Sub OnSubmitToDesktopOriginatorOperationCompleted(ByVal arg As Object)
			If (Not (Me.SubmitToDesktopOriginatorCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent SubmitToDesktopOriginatorCompleted(Me, New SubmitToDesktopOriginatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RetrieveRecentActiveLoanList", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RetrieveRecentActiveLoanList(ByVal sTicket As String) As String
			Dim results() As Object = Me.Invoke("RetrieveRecentActiveLoanList", New Object() {sTicket})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub RetrieveRecentActiveLoanListAsync(ByVal sTicket As String)
			Me.RetrieveRecentActiveLoanListAsync(sTicket, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RetrieveRecentActiveLoanListAsync(ByVal sTicket As String, ByVal userState As Object)
			If (Me.RetrieveRecentActiveLoanListOperationCompleted Is Nothing) Then
				Me.RetrieveRecentActiveLoanListOperationCompleted = AddressOf Me.OnRetrieveRecentActiveLoanListOperationCompleted
			End If
			Me.InvokeAsync("RetrieveRecentActiveLoanList", New Object() {sTicket}, Me.RetrieveRecentActiveLoanListOperationCompleted, userState)
		End Sub

		Private Sub OnRetrieveRecentActiveLoanListOperationCompleted(ByVal arg As Object)
			If (Not (Me.RetrieveRecentActiveLoanListCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RetrieveRecentActiveLoanListCompleted(Me, New RetrieveRecentActiveLoanListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RetrieveLoanActivityList", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RetrieveLoanActivityList(ByVal sTicket As String, ByVal sLNm As String, ByVal version As Integer) As String
			Dim results() As Object = Me.Invoke("RetrieveLoanActivityList", New Object() {sTicket, sLNm, version})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub RetrieveLoanActivityListAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal version As Integer)
			Me.RetrieveLoanActivityListAsync(sTicket, sLNm, version, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RetrieveLoanActivityListAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal version As Integer, ByVal userState As Object)
			If (Me.RetrieveLoanActivityListOperationCompleted Is Nothing) Then
				Me.RetrieveLoanActivityListOperationCompleted = AddressOf Me.OnRetrieveLoanActivityListOperationCompleted
			End If
			Me.InvokeAsync("RetrieveLoanActivityList", New Object() {sTicket, sLNm, version}, Me.RetrieveLoanActivityListOperationCompleted, userState)
		End Sub

		Private Sub OnRetrieveLoanActivityListOperationCompleted(ByVal arg As Object)
			If (Not (Me.RetrieveLoanActivityListCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RetrieveLoanActivityListCompleted(Me, New RetrieveLoanActivityListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RetrievePmlLoanList", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RetrievePmlLoanList(ByVal sTicket As String) As String
			Dim results() As Object = Me.Invoke("RetrievePmlLoanList", New Object() {sTicket})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub RetrievePmlLoanListAsync(ByVal sTicket As String)
			Me.RetrievePmlLoanListAsync(sTicket, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RetrievePmlLoanListAsync(ByVal sTicket As String, ByVal userState As Object)
			If (Me.RetrievePmlLoanListOperationCompleted Is Nothing) Then
				Me.RetrievePmlLoanListOperationCompleted = AddressOf Me.OnRetrievePmlLoanListOperationCompleted
			End If
			Me.InvokeAsync("RetrievePmlLoanList", New Object() {sTicket}, Me.RetrievePmlLoanListOperationCompleted, userState)
		End Sub

		Private Sub OnRetrievePmlLoanListOperationCompleted(ByVal arg As Object)
			If (Not (Me.RetrievePmlLoanListCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RetrievePmlLoanListCompleted(Me, New RetrievePmlLoanListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/CheckValidAppStatus", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function CheckValidAppStatus(ByVal appName As String, ByVal appVersion As String) As String
			Dim results() As Object = Me.Invoke("CheckValidAppStatus", New Object() {appName, appVersion})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub CheckValidAppStatusAsync(ByVal appName As String, ByVal appVersion As String)
			Me.CheckValidAppStatusAsync(appName, appVersion, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub CheckValidAppStatusAsync(ByVal appName As String, ByVal appVersion As String, ByVal userState As Object)
			If (Me.CheckValidAppStatusOperationCompleted Is Nothing) Then
				Me.CheckValidAppStatusOperationCompleted = AddressOf Me.OnCheckValidAppStatusOperationCompleted
			End If
			Me.InvokeAsync("CheckValidAppStatus", New Object() {appName, appVersion}, Me.CheckValidAppStatusOperationCompleted, userState)
		End Sub

		Private Sub OnCheckValidAppStatusOperationCompleted(ByVal arg As Object)
			If (Not (Me.CheckValidAppStatusCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent CheckValidAppStatusCompleted(Me, New CheckValidAppStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RecievePdf", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RecievePdf(ByVal AuthTicket As String, ByVal sLNm As String, ByVal DocumentClassification As String, ByVal base64PdfContent As String) As String
			Dim results() As Object = Me.Invoke("RecievePdf", New Object() {AuthTicket, sLNm, DocumentClassification, base64PdfContent})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub RecievePdfAsync(ByVal AuthTicket As String, ByVal sLNm As String, ByVal DocumentClassification As String, ByVal base64PdfContent As String)
			Me.RecievePdfAsync(AuthTicket, sLNm, DocumentClassification, base64PdfContent, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RecievePdfAsync(ByVal AuthTicket As String, ByVal sLNm As String, ByVal DocumentClassification As String, ByVal base64PdfContent As String, ByVal userState As Object)
			If (Me.RecievePdfOperationCompleted Is Nothing) Then
				Me.RecievePdfOperationCompleted = AddressOf Me.OnRecievePdfOperationCompleted
			End If
			Me.InvokeAsync("RecievePdf", New Object() {AuthTicket, sLNm, DocumentClassification, base64PdfContent}, Me.RecievePdfOperationCompleted, userState)
		End Sub

		Private Sub OnRecievePdfOperationCompleted(ByVal arg As Object)
			If (Not (Me.RecievePdfCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RecievePdfCompleted(Me, New RecievePdfCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/CreateConsumerDocumentRequest", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function CreateConsumerDocumentRequest(ByVal authTicket As String, ByVal optionsXml As String) As String
			Dim results() As Object = Me.Invoke("CreateConsumerDocumentRequest", New Object() {authTicket, optionsXml})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub CreateConsumerDocumentRequestAsync(ByVal authTicket As String, ByVal optionsXml As String)
			Me.CreateConsumerDocumentRequestAsync(authTicket, optionsXml, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub CreateConsumerDocumentRequestAsync(ByVal authTicket As String, ByVal optionsXml As String, ByVal userState As Object)
			If (Me.CreateConsumerDocumentRequestOperationCompleted Is Nothing) Then
				Me.CreateConsumerDocumentRequestOperationCompleted = AddressOf Me.OnCreateConsumerDocumentRequestOperationCompleted
			End If
			Me.InvokeAsync("CreateConsumerDocumentRequest", New Object() {authTicket, optionsXml}, Me.CreateConsumerDocumentRequestOperationCompleted, userState)
		End Sub

		Private Sub OnCreateConsumerDocumentRequestOperationCompleted(ByVal arg As Object)
			If (Not (Me.CreateConsumerDocumentRequestCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent CreateConsumerDocumentRequestCompleted(Me, New CreateConsumerDocumentRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RetrieveConsumerDocumentRequests", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RetrieveConsumerDocumentRequests(ByVal authTicket As String, ByVal loanNumber As String) As String
			Dim results() As Object = Me.Invoke("RetrieveConsumerDocumentRequests", New Object() {authTicket, loanNumber})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub RetrieveConsumerDocumentRequestsAsync(ByVal authTicket As String, ByVal loanNumber As String)
			Me.RetrieveConsumerDocumentRequestsAsync(authTicket, loanNumber, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RetrieveConsumerDocumentRequestsAsync(ByVal authTicket As String, ByVal loanNumber As String, ByVal userState As Object)
			If (Me.RetrieveConsumerDocumentRequestsOperationCompleted Is Nothing) Then
				Me.RetrieveConsumerDocumentRequestsOperationCompleted = AddressOf Me.OnRetrieveConsumerDocumentRequestsOperationCompleted
			End If
			Me.InvokeAsync("RetrieveConsumerDocumentRequests", New Object() {authTicket, loanNumber}, Me.RetrieveConsumerDocumentRequestsOperationCompleted, userState)
		End Sub

		Private Sub OnRetrieveConsumerDocumentRequestsOperationCompleted(ByVal arg As Object)
			If (Not (Me.RetrieveConsumerDocumentRequestsCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RetrieveConsumerDocumentRequestsCompleted(Me, New RetrieveConsumerDocumentRequestsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/UploadConsumerDocumentRequestDocumen" &
			"t", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function UploadConsumerDocumentRequestDocument(ByVal authTicket As String, ByVal requestId As String, ByVal sBase64Pdf As String, ByVal pdfDescription As String) As String
			Dim results() As Object = Me.Invoke("UploadConsumerDocumentRequestDocument", New Object() {authTicket, requestId, sBase64Pdf, pdfDescription})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub UploadConsumerDocumentRequestDocumentAsync(ByVal authTicket As String, ByVal requestId As String, ByVal sBase64Pdf As String, ByVal pdfDescription As String)
			Me.UploadConsumerDocumentRequestDocumentAsync(authTicket, requestId, sBase64Pdf, pdfDescription, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub UploadConsumerDocumentRequestDocumentAsync(ByVal authTicket As String, ByVal requestId As String, ByVal sBase64Pdf As String, ByVal pdfDescription As String, ByVal userState As Object)
			If (Me.UploadConsumerDocumentRequestDocumentOperationCompleted Is Nothing) Then
				Me.UploadConsumerDocumentRequestDocumentOperationCompleted = AddressOf Me.OnUploadConsumerDocumentRequestDocumentOperationCompleted
			End If
			Me.InvokeAsync("UploadConsumerDocumentRequestDocument", New Object() {authTicket, requestId, sBase64Pdf, pdfDescription}, Me.UploadConsumerDocumentRequestDocumentOperationCompleted, userState)
		End Sub

		Private Sub OnUploadConsumerDocumentRequestDocumentOperationCompleted(ByVal arg As Object)
			If (Not (Me.UploadConsumerDocumentRequestDocumentCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent UploadConsumerDocumentRequestDocumentCompleted(Me, New UploadConsumerDocumentRequestDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RetrieveConsumerDocumentRequestDocum" &
			"ent", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RetrieveConsumerDocumentRequestDocument(ByVal authTicket As String, ByVal requestId As Long) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
			Dim results() As Object = Me.Invoke("RetrieveConsumerDocumentRequestDocument", New Object() {authTicket, requestId})
			Return CType(results(0), Byte())
		End Function

		'''<remarks/>
		Public Overloads Sub RetrieveConsumerDocumentRequestDocumentAsync(ByVal authTicket As String, ByVal requestId As Long)
			Me.RetrieveConsumerDocumentRequestDocumentAsync(authTicket, requestId, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RetrieveConsumerDocumentRequestDocumentAsync(ByVal authTicket As String, ByVal requestId As Long, ByVal userState As Object)
			If (Me.RetrieveConsumerDocumentRequestDocumentOperationCompleted Is Nothing) Then
				Me.RetrieveConsumerDocumentRequestDocumentOperationCompleted = AddressOf Me.OnRetrieveConsumerDocumentRequestDocumentOperationCompleted
			End If
			Me.InvokeAsync("RetrieveConsumerDocumentRequestDocument", New Object() {authTicket, requestId}, Me.RetrieveConsumerDocumentRequestDocumentOperationCompleted, userState)
		End Sub

		Private Sub OnRetrieveConsumerDocumentRequestDocumentOperationCompleted(ByVal arg As Object)
			If (Not (Me.RetrieveConsumerDocumentRequestDocumentCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RetrieveConsumerDocumentRequestDocumentCompleted(Me, New RetrieveConsumerDocumentRequestDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/GetAuditLog", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function GetAuditLog(ByVal authTicket As String, ByVal loanNumber As String) As String
			Dim results() As Object = Me.Invoke("GetAuditLog", New Object() {authTicket, loanNumber})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub GetAuditLogAsync(ByVal authTicket As String, ByVal loanNumber As String)
			Me.GetAuditLogAsync(authTicket, loanNumber, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub GetAuditLogAsync(ByVal authTicket As String, ByVal loanNumber As String, ByVal userState As Object)
			If (Me.GetAuditLogOperationCompleted Is Nothing) Then
				Me.GetAuditLogOperationCompleted = AddressOf Me.OnGetAuditLogOperationCompleted
			End If
			Me.InvokeAsync("GetAuditLog", New Object() {authTicket, loanNumber}, Me.GetAuditLogOperationCompleted, userState)
		End Sub

		Private Sub OnGetAuditLogOperationCompleted(ByVal arg As Object)
			If (Not (Me.GetAuditLogCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent GetAuditLogCompleted(Me, New GetAuditLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/DocumentFrameworkGetAvailableDocPack" &
			"agesAndPlanCodes", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function DocumentFrameworkGetAvailableDocPackagesAndPlanCodes(ByVal sTicket As String, ByVal sLNm As String, ByVal vendorId As String, ByVal userName As String, ByVal password As String, ByVal accountId As String) As String
			Dim results() As Object = Me.Invoke("DocumentFrameworkGetAvailableDocPackagesAndPlanCodes", New Object() {sTicket, sLNm, vendorId, userName, password, accountId})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub DocumentFrameworkGetAvailableDocPackagesAndPlanCodesAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal vendorId As String, ByVal userName As String, ByVal password As String, ByVal accountId As String)
			Me.DocumentFrameworkGetAvailableDocPackagesAndPlanCodesAsync(sTicket, sLNm, vendorId, userName, password, accountId, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub DocumentFrameworkGetAvailableDocPackagesAndPlanCodesAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal vendorId As String, ByVal userName As String, ByVal password As String, ByVal accountId As String, ByVal userState As Object)
			If (Me.DocumentFrameworkGetAvailableDocPackagesAndPlanCodesOperationCompleted Is Nothing) Then
				Me.DocumentFrameworkGetAvailableDocPackagesAndPlanCodesOperationCompleted = AddressOf Me.OnDocumentFrameworkGetAvailableDocPackagesAndPlanCodesOperationCompleted
			End If
			Me.InvokeAsync("DocumentFrameworkGetAvailableDocPackagesAndPlanCodes", New Object() {sTicket, sLNm, vendorId, userName, password, accountId}, Me.DocumentFrameworkGetAvailableDocPackagesAndPlanCodesOperationCompleted, userState)
		End Sub

		Private Sub OnDocumentFrameworkGetAvailableDocPackagesAndPlanCodesOperationCompleted(ByVal arg As Object)
			If (Not (Me.DocumentFrameworkGetAvailableDocPackagesAndPlanCodesCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent DocumentFrameworkGetAvailableDocPackagesAndPlanCodesCompleted(Me, New DocumentFrameworkGetAvailableDocPackagesAndPlanCodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/DocumentFrameworkPerformAudit", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function DocumentFrameworkPerformAudit(ByVal sTicket As String, ByVal sLNm As String, ByVal vendorId As String, ByVal userName As String, ByVal password As String, ByVal accountId As String, ByVal packageId As String, ByVal planCodeId As String) As String
			Dim results() As Object = Me.Invoke("DocumentFrameworkPerformAudit", New Object() {sTicket, sLNm, vendorId, userName, password, accountId, packageId, planCodeId})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub DocumentFrameworkPerformAuditAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal vendorId As String, ByVal userName As String, ByVal password As String, ByVal accountId As String, ByVal packageId As String, ByVal planCodeId As String)
			Me.DocumentFrameworkPerformAuditAsync(sTicket, sLNm, vendorId, userName, password, accountId, packageId, planCodeId, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub DocumentFrameworkPerformAuditAsync(ByVal sTicket As String, ByVal sLNm As String, ByVal vendorId As String, ByVal userName As String, ByVal password As String, ByVal accountId As String, ByVal packageId As String, ByVal planCodeId As String, ByVal userState As Object)
			If (Me.DocumentFrameworkPerformAuditOperationCompleted Is Nothing) Then
				Me.DocumentFrameworkPerformAuditOperationCompleted = AddressOf Me.OnDocumentFrameworkPerformAuditOperationCompleted
			End If
			Me.InvokeAsync("DocumentFrameworkPerformAudit", New Object() {sTicket, sLNm, vendorId, userName, password, accountId, packageId, planCodeId}, Me.DocumentFrameworkPerformAuditOperationCompleted, userState)
		End Sub

		Private Sub OnDocumentFrameworkPerformAuditOperationCompleted(ByVal arg As Object)
			If (Not (Me.DocumentFrameworkPerformAuditCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent DocumentFrameworkPerformAuditCompleted(Me, New DocumentFrameworkPerformAuditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		Public Shadows Sub CancelAsync(ByVal userState As Object)
			MyBase.CancelAsync(userState)
		End Sub

		Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
			If ((url Is Nothing) _
						OrElse (url Is String.Empty)) Then
				Return False
			End If
			Dim wsUri As System.Uri = New System.Uri(url)
			If ((wsUri.Port >= 1024) _
						AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
				Return True
			End If
			Return False
		End Function
	End Class

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://www.lendersoffice.com/los/webservices/")>  _
    Public Enum TypeOfService
        
        '''<remarks/>
        Multiple
        
        '''<remarks/>
        Appraisal
        
        '''<remarks/>
        AVM
        
        '''<remarks/>
        Compliance
        
        '''<remarks/>
        Credit
        
        '''<remarks/>
        <System.Xml.Serialization.XmlEnumAttribute("Business Credit Report")>  _
        BusinessCreditReport
        
        '''<remarks/>
        <System.Xml.Serialization.XmlEnumAttribute("Credit Analyzer")>  _
        CreditAnalyzer
        
        '''<remarks/>
        <System.Xml.Serialization.XmlEnumAttribute("Credit Assure")>  _
        CreditAssure
        
        '''<remarks/>
        <System.Xml.Serialization.XmlEnumAttribute("Credit Supplements")>  _
        CreditSupplements
        
        '''<remarks/>
        <System.Xml.Serialization.XmlEnumAttribute("Criminal Record Reports")>  _
        CriminalRecordReports
        
        '''<remarks/>
        <System.Xml.Serialization.XmlEnumAttribute("Eviction Reports")>  _
        EvictionReports
        
        '''<remarks/>
        Flood
        
        '''<remarks/>
        Fraud
        
        '''<remarks/>
        HMDA
        
        '''<remarks/>
        <System.Xml.Serialization.XmlEnumAttribute("LDP and GSA Reports")>  _
        LDPandGSAReports
        
        '''<remarks/>
        <System.Xml.Serialization.XmlEnumAttribute("MERS Report")>  _
        MERSReport
        
        '''<remarks/>
        <System.Xml.Serialization.XmlEnumAttribute("Mortgage Insurance")>  _
        MortgageInsurance
        
        '''<remarks/>
        <System.Xml.Serialization.XmlEnumAttribute("Mortgage Participants Report")>  _
        MortgageParticipantsReport
        
        '''<remarks/>
        <System.Xml.Serialization.XmlEnumAttribute("SSA-89")>  _
        SSA89
        
        '''<remarks/>
        Title
        
        '''<remarks/>
        <System.Xml.Serialization.XmlEnumAttribute("Verification Of Deposits (assets)")>  _
        VerificationOfDepositsassets
        
        '''<remarks/>
        <System.Xml.Serialization.XmlEnumAttribute("Verification Of Employment")>  _
        VerificationOfEmployment
        
        '''<remarks/>
        <System.Xml.Serialization.XmlEnumAttribute("Tax Return Verification (4506-T)")>  _
        TaxReturnVerification4506T
        
        '''<remarks/>
        <System.Xml.Serialization.XmlEnumAttribute("Trailing Docs")>  _
        TrailingDocs
        
        '''<remarks/>
        <System.Xml.Serialization.XmlEnumAttribute("Undisclosed Debt Notification")>  _
        UndisclosedDebtNotification
        
        '''<remarks/>
        <System.Xml.Serialization.XmlEnumAttribute("USPS Check")>  _
        USPSCheck
        
        '''<remarks/>
        <System.Xml.Serialization.XmlEnumAttribute("What If Simulator")>  _
        WhatIfSimulator
        
        '''<remarks/>
        <System.Xml.Serialization.XmlEnumAttribute("Optical Character Recognition")>  _
        OpticalCharacterRecognition
        
        '''<remarks/>
        <System.Xml.Serialization.XmlEnumAttribute("Income Analyzer")>  _
        IncomeAnalyzer
        
        '''<remarks/>
        <System.Xml.Serialization.XmlEnumAttribute("Homeowner Insurance")>  _
        HomeownerInsurance
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DocumentFrameworkGetFormsListCompletedEventHandler(ByVal sender As Object, ByVal e As DocumentFrameworkGetFormsListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DocumentFrameworkGetFormsListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DocumentFrameworkGenerateDocsCompletedEventHandler(ByVal sender As Object, ByVal e As DocumentFrameworkGenerateDocsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DocumentFrameworkGenerateDocsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DocumentFrameworkDownloadGeneratedDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As DocumentFrameworkDownloadGeneratedDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DocumentFrameworkDownloadGeneratedDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GenerateClosestCounselingOrganizationCompletedEventHandler(ByVal sender As Object, ByVal e As GenerateClosestCounselingOrganizationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GenerateClosestCounselingOrganizationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RecordInitialDisclosureEventWithPartnerKeyCompletedEventHandler(ByVal sender As Object, ByVal e As RecordInitialDisclosureEventWithPartnerKeyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecordInitialDisclosureEventWithPartnerKeyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub CreateClosingDisclosureArchiveByReferenceNumberCompletedEventHandler(ByVal sender As Object, ByVal e As CreateClosingDisclosureArchiveByReferenceNumberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateClosingDisclosureArchiveByReferenceNumberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub CreateClosingDisclosureArchiveCompletedEventHandler(ByVal sender As Object, ByVal e As CreateClosingDisclosureArchiveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateClosingDisclosureArchiveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ConvertLeadToLoanCompletedEventHandler(ByVal sender As Object, ByVal e As ConvertLeadToLoanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConvertLeadToLoanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub LoadCompletedEventHandler(ByVal sender As Object, ByVal e As LoadCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub LoadByRefNumberCompletedEventHandler(ByVal sender As Object, ByVal e As LoadByRefNumberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadByRefNumberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DeleteApplicantCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteApplicantCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteApplicantCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub TransferLegacyApplicationCompletedEventHandler(ByVal sender As Object, ByVal e As TransferLegacyApplicationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TransferLegacyApplicationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RemoveBorrowerCompletedEventHandler(ByVal sender As Object, ByVal e As RemoveBorrowerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RemoveBorrowerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub AddBorrowerCompletedEventHandler(ByVal sender As Object, ByVal e As AddBorrowerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddBorrowerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ParseFnma32ToLoXmlCompletedEventHandler(ByVal sender As Object, ByVal e As ParseFnma32ToLoXmlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ParseFnma32ToLoXmlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UploadPDFDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As UploadPDFDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadPDFDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UploadPDFDocumentToAppCompletedEventHandler(ByVal sender As Object, ByVal e As UploadPDFDocumentToAppCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadPDFDocumentToAppCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UploadPDFDocumentAsServiceCompletedEventHandler(ByVal sender As Object, ByVal e As UploadPDFDocumentAsServiceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadPDFDocumentAsServiceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UploadPDFDocumentToAppAsServiceCompletedEventHandler(ByVal sender As Object, ByVal e As UploadPDFDocumentToAppAsServiceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadPDFDocumentToAppAsServiceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub SaveCompletedEventHandler(ByVal sender As Object, ByVal e As SaveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub SaveByRefNumberCompletedEventHandler(ByVal sender As Object, ByVal e As SaveByRefNumberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveByRefNumberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub IsLoanExistedCompletedEventHandler(ByVal sender As Object, ByVal e As IsLoanExistedCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class IsLoanExistedCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RetrieveCustomReportCompletedEventHandler(ByVal sender As Object, ByVal e As RetrieveCustomReportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RetrieveCustomReportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DeleteLoanCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteLoanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteLoanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub CreateWithOptionsCompletedEventHandler(ByVal sender As Object, ByVal e As CreateWithOptionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateWithOptionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub CreateCompletedEventHandler(ByVal sender As Object, ByVal e As CreateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub CreateLeadCompletedEventHandler(ByVal sender As Object, ByVal e As CreateLeadCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateLeadCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RegisterLoanProgramWithRateOptionIdCompletedEventHandler(ByVal sender As Object, ByVal e As RegisterLoanProgramWithRateOptionIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RegisterLoanProgramWithRateOptionIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RegisterLoanProgramCompletedEventHandler(ByVal sender As Object, ByVal e As RegisterLoanProgramCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RegisterLoanProgramCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RegisterLoanProgramAndSkipDuplicateCheckCompletedEventHandler(ByVal sender As Object, ByVal e As RegisterLoanProgramAndSkipDuplicateCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RegisterLoanProgramAndSkipDuplicateCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RegisterLoanProgramWithRateOptionIdAndSkipDuplicateCheckCompletedEventHandler(ByVal sender As Object, ByVal e As RegisterLoanProgramWithRateOptionIdAndSkipDuplicateCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RegisterLoanProgramWithRateOptionIdAndSkipDuplicateCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RegisterLoanProgramWithOptionsCompletedEventHandler(ByVal sender As Object, ByVal e As RegisterLoanProgramWithOptionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RegisterLoanProgramWithOptionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub LockLoanProgramWithRateOptionIdCompletedEventHandler(ByVal sender As Object, ByVal e As LockLoanProgramWithRateOptionIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LockLoanProgramWithRateOptionIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub LockLoanProgramCompletedEventHandler(ByVal sender As Object, ByVal e As LockLoanProgramCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LockLoanProgramCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub LockLoanProgramAndSkipDuplicateCheckCompletedEventHandler(ByVal sender As Object, ByVal e As LockLoanProgramAndSkipDuplicateCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LockLoanProgramAndSkipDuplicateCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub LockLoanProgramWithRateOptionIdAndSkipDuplicateCheckCompletedEventHandler(ByVal sender As Object, ByVal e As LockLoanProgramWithRateOptionIdAndSkipDuplicateCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LockLoanProgramWithRateOptionIdAndSkipDuplicateCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub LockLoanProgramWithOptionsCompletedEventHandler(ByVal sender As Object, ByVal e As LockLoanProgramWithOptionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LockLoanProgramWithOptionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub BreakBrokerRateLockCompletedEventHandler(ByVal sender As Object, ByVal e As BreakBrokerRateLockCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class BreakBrokerRateLockCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RemoveRequestedRateCompletedEventHandler(ByVal sender As Object, ByVal e As RemoveRequestedRateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RemoveRequestedRateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ListEdocsByLoanNumberCompletedEventHandler(ByVal sender As Object, ByVal e As ListEdocsByLoanNumberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ListEdocsByLoanNumberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DownloadEdocsPdfByIdCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadEdocsPdfByIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadEdocsPdfByIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DownloadEdocsByShippingTemplateCompletedEventHandler(ByVal sender As Object, ByVal e As DownloadEdocsByShippingTemplateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DownloadEdocsByShippingTemplateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub PrepareLoanForResubmissionCompletedEventHandler(ByVal sender As Object, ByVal e As PrepareLoanForResubmissionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrepareLoanForResubmissionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub CreateWithULDDCompletedEventHandler(ByVal sender As Object, ByVal e As CreateWithULDDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateWithULDDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub CreateWithFannieMaeFileCompletedEventHandler(ByVal sender As Object, ByVal e As CreateWithFannieMaeFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateWithFannieMaeFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub CreateWithCalyxPointFileCompletedEventHandler(ByVal sender As Object, ByVal e As CreateWithCalyxPointFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateWithCalyxPointFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ListClosingCostTemplateNameCompletedEventHandler(ByVal sender As Object, ByVal e As ListClosingCostTemplateNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ListClosingCostTemplateNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RetrieveClosingCostTemplateFeeListCompletedEventHandler(ByVal sender As Object, ByVal e As RetrieveClosingCostTemplateFeeListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RetrieveClosingCostTemplateFeeListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ListModifiedLoansCompletedEventHandler(ByVal sender As Object, ByVal e As ListModifiedLoansCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ListModifiedLoansCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ListModifiedLoansByAppCodeCompletedEventHandler(ByVal sender As Object, ByVal e As ListModifiedLoansByAppCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ListModifiedLoansByAppCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ListModifiedEDocsByAppCodeCompletedEventHandler(ByVal sender As Object, ByVal e As ListModifiedEDocsByAppCodeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ListModifiedEDocsByAppCodeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ClearModifiedLoansListCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ClearModifiedLoansListByAppCodeCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ClearModifiedLoanByNameCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ClearModifiedLoanByNameByAppCodeCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ListMyActiveTaskListCompletedEventHandler(ByVal sender As Object, ByVal e As ListMyActiveTaskListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ListMyActiveTaskListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RetrieveTaskByIdCompletedEventHandler(ByVal sender As Object, ByVal e As RetrieveTaskByIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RetrieveTaskByIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RetrieveUsersAssignedToLoanCompletedEventHandler(ByVal sender As Object, ByVal e As RetrieveUsersAssignedToLoanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RetrieveUsersAssignedToLoanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub TaskEditCompletedEventHandler(ByVal sender As Object, ByVal e As TaskEditCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TaskEditCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub TaskResolveCompletedEventHandler(ByVal sender As Object, ByVal e As TaskResolveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TaskResolveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub SaveMismo23CompletedEventHandler(ByVal sender As Object, ByVal e As SaveMismo23CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveMismo23CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Guid
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Guid)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub LoadMismo23ByLoanNameCompletedEventHandler(ByVal sender As Object, ByVal e As LoadMismo23ByLoanNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadMismo23ByLoanNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetPdfByLoanNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetPdfByLoanNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPdfByLoanNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UploadLONXmlCompletedEventHandler(ByVal sender As Object, ByVal e As UploadLONXmlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadLONXmlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Guid
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Guid)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub SearchCompletedEventHandler(ByVal sender As Object, ByVal e As SearchCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SearchCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RunInternalPricingCompletedEventHandler(ByVal sender As Object, ByVal e As RunInternalPricingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RunInternalPricingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RunQuickPricerCompletedEventHandler(ByVal sender As Object, ByVal e As RunQuickPricerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RunQuickPricerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RunQuickPricerForLockDeskCompletedEventHandler(ByVal sender As Object, ByVal e As RunQuickPricerForLockDeskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RunQuickPricerForLockDeskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub SubmitTotalScorecardCompletedEventHandler(ByVal sender As Object, ByVal e As SubmitTotalScorecardCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubmitTotalScorecardCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub SubmitToFannieMaeEarlyCheckCompletedEventHandler(ByVal sender As Object, ByVal e As SubmitToFannieMaeEarlyCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubmitToFannieMaeEarlyCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub SubmitToDesktopUnderwriterSeamlessCompletedEventHandler(ByVal sender As Object, ByVal e As SubmitToDesktopUnderwriterSeamlessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubmitToDesktopUnderwriterSeamlessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub SubmitToDesktopUnderwriterSeamless_OptionalCreditCompletedEventHandler(ByVal sender As Object, ByVal e As SubmitToDesktopUnderwriterSeamless_OptionalCreditCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubmitToDesktopUnderwriterSeamless_OptionalCreditCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub SubmitToDesktopUnderwriterSeamlessReissueCreditCompletedEventHandler(ByVal sender As Object, ByVal e As SubmitToDesktopUnderwriterSeamlessReissueCreditCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubmitToDesktopUnderwriterSeamlessReissueCreditCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub SubmitToDesktopUnderwriterSeamlessReissueCredit_OptionalCreditImportCompletedEventHandler(ByVal sender As Object, ByVal e As SubmitToDesktopUnderwriterSeamlessReissueCredit_OptionalCreditImportCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubmitToDesktopUnderwriterSeamlessReissueCredit_OptionalCreditImportCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub SubmitToDesktopOriginatorSeamlessCompletedEventHandler(ByVal sender As Object, ByVal e As SubmitToDesktopOriginatorSeamlessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubmitToDesktopOriginatorSeamlessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub SubmitToDesktopUnderwriterWithInstituteIdCompletedEventHandler(ByVal sender As Object, ByVal e As SubmitToDesktopUnderwriterWithInstituteIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubmitToDesktopUnderwriterWithInstituteIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub SubmitToDesktopUnderwriterCompletedEventHandler(ByVal sender As Object, ByVal e As SubmitToDesktopUnderwriterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubmitToDesktopUnderwriterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ImportFromFreddieMacCompletedEventHandler(ByVal sender As Object, ByVal e As ImportFromFreddieMacCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportFromFreddieMacCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub CreateWithDesktopUnderwriterCompletedEventHandler(ByVal sender As Object, ByVal e As CreateWithDesktopUnderwriterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateWithDesktopUnderwriterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ImportFromFannieMaeWithInstitutionIdCompletedEventHandler(ByVal sender As Object, ByVal e As ImportFromFannieMaeWithInstitutionIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportFromFannieMaeWithInstitutionIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub ImportFromFannieMaeCompletedEventHandler(ByVal sender As Object, ByVal e As ImportFromFannieMaeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportFromFannieMaeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetDesktopUnderwriterCasefileStatusByLoanFileCompletedEventHandler(ByVal sender As Object, ByVal e As GetDesktopUnderwriterCasefileStatusByLoanFileCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDesktopUnderwriterCasefileStatusByLoanFileCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetDesktopUnderwriterCasefileStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetDesktopUnderwriterCasefileStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDesktopUnderwriterCasefileStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub SubmitToDesktopOriginatorCompletedEventHandler(ByVal sender As Object, ByVal e As SubmitToDesktopOriginatorCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SubmitToDesktopOriginatorCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RetrieveRecentActiveLoanListCompletedEventHandler(ByVal sender As Object, ByVal e As RetrieveRecentActiveLoanListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RetrieveRecentActiveLoanListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RetrieveLoanActivityListCompletedEventHandler(ByVal sender As Object, ByVal e As RetrieveLoanActivityListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RetrieveLoanActivityListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RetrievePmlLoanListCompletedEventHandler(ByVal sender As Object, ByVal e As RetrievePmlLoanListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RetrievePmlLoanListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub CheckValidAppStatusCompletedEventHandler(ByVal sender As Object, ByVal e As CheckValidAppStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckValidAppStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RecievePdfCompletedEventHandler(ByVal sender As Object, ByVal e As RecievePdfCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RecievePdfCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub CreateConsumerDocumentRequestCompletedEventHandler(ByVal sender As Object, ByVal e As CreateConsumerDocumentRequestCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateConsumerDocumentRequestCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RetrieveConsumerDocumentRequestsCompletedEventHandler(ByVal sender As Object, ByVal e As RetrieveConsumerDocumentRequestsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RetrieveConsumerDocumentRequestsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub UploadConsumerDocumentRequestDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As UploadConsumerDocumentRequestDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UploadConsumerDocumentRequestDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RetrieveConsumerDocumentRequestDocumentCompletedEventHandler(ByVal sender As Object, ByVal e As RetrieveConsumerDocumentRequestDocumentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RetrieveConsumerDocumentRequestDocumentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub GetAuditLogCompletedEventHandler(ByVal sender As Object, ByVal e As GetAuditLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAuditLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DocumentFrameworkGetAvailableDocPackagesAndPlanCodesCompletedEventHandler(ByVal sender As Object, ByVal e As DocumentFrameworkGetAvailableDocPackagesAndPlanCodesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DocumentFrameworkGetAvailableDocPackagesAndPlanCodesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub DocumentFrameworkPerformAuditCompletedEventHandler(ByVal sender As Object, ByVal e As DocumentFrameworkPerformAuditCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DocumentFrameworkPerformAuditCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
