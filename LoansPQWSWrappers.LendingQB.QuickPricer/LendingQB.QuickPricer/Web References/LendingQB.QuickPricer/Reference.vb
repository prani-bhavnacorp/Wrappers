'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace LendingQB.QuickPricer

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),
	 System.Diagnostics.DebuggerStepThroughAttribute(),
	 System.ComponentModel.DesignerCategoryAttribute("code"),
	 System.Web.Services.WebServiceBindingAttribute(Name:="QuickPricerSoap", [Namespace]:="http://www.lendersoffice.com/los/webservices/")>
	Partial Public Class QuickPricerServiceWse
		Inherits Microsoft.Web.Services3.WebServicesClientProtocol

		Private RunQuickPricerV2OperationCompleted As System.Threading.SendOrPostCallback

		Private RunQuickPricerV1OperationCompleted As System.Threading.SendOrPostCallback

		Private RunQuickPricerV1ForLockDeskOperationCompleted As System.Threading.SendOrPostCallback

		Private CreateLeadOperationCompleted As System.Threading.SendOrPostCallback

		Private CreateLoanOperationCompleted As System.Threading.SendOrPostCallback

		Private useDefaultCredentialsSetExplicitly As Boolean

		'''<remarks/>
		Public Sub New()
			MyBase.New
			Me.Url = Global.LoansPQ.WebServices.Wrappers.My.MySettings.Default.LoansPQWSWrappers_LendingQB_QuickPricer_LendingQB_QuickPricer_QuickPricer
			If (Me.IsLocalFileSystemWebService(Me.Url) = True) Then
				Me.UseDefaultCredentials = True
				Me.useDefaultCredentialsSetExplicitly = False
			Else
				Me.useDefaultCredentialsSetExplicitly = True
			End If
		End Sub

		Public Shadows Property Url() As String
			Get
				Return MyBase.Url
			End Get
			Set
				If (((Me.IsLocalFileSystemWebService(MyBase.Url) = True) _
							AndAlso (Me.useDefaultCredentialsSetExplicitly = False)) _
							AndAlso (Me.IsLocalFileSystemWebService(Value) = False)) Then
					MyBase.UseDefaultCredentials = False
				End If
				MyBase.Url = Value
			End Set
		End Property

		Public Shadows Property UseDefaultCredentials() As Boolean
			Get
				Return MyBase.UseDefaultCredentials
			End Get
			Set
				MyBase.UseDefaultCredentials = Value
				Me.useDefaultCredentialsSetExplicitly = True
			End Set
		End Property

		'''<remarks/>
		Public Event RunQuickPricerV2Completed As RunQuickPricerV2CompletedEventHandler

		'''<remarks/>
		Public Event RunQuickPricerV1Completed As RunQuickPricerV1CompletedEventHandler

		'''<remarks/>
		Public Event RunQuickPricerV1ForLockDeskCompleted As RunQuickPricerV1ForLockDeskCompletedEventHandler

		'''<remarks/>
		Public Event CreateLeadCompleted As CreateLeadCompletedEventHandler

		'''<remarks/>
		Public Event CreateLoanCompleted As CreateLoanCompletedEventHandler

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RunQuickPricerV2", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RunQuickPricerV2(ByVal authorizationTicket As String, ByVal xmlInput As String, ByVal quickPricerLoanId As String) As String
			Dim results() As Object = Me.Invoke("RunQuickPricerV2", New Object() {authorizationTicket, xmlInput, quickPricerLoanId})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub RunQuickPricerV2Async(ByVal authorizationTicket As String, ByVal xmlInput As String, ByVal quickPricerLoanId As String)
			Me.RunQuickPricerV2Async(authorizationTicket, xmlInput, quickPricerLoanId, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RunQuickPricerV2Async(ByVal authorizationTicket As String, ByVal xmlInput As String, ByVal quickPricerLoanId As String, ByVal userState As Object)
			If (Me.RunQuickPricerV2OperationCompleted Is Nothing) Then
				Me.RunQuickPricerV2OperationCompleted = AddressOf Me.OnRunQuickPricerV2OperationCompleted
			End If
			Me.InvokeAsync("RunQuickPricerV2", New Object() {authorizationTicket, xmlInput, quickPricerLoanId}, Me.RunQuickPricerV2OperationCompleted, userState)
		End Sub

		Private Sub OnRunQuickPricerV2OperationCompleted(ByVal arg As Object)
			If (Not (Me.RunQuickPricerV2CompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RunQuickPricerV2Completed(Me, New RunQuickPricerV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RunQuickPricerV1", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RunQuickPricerV1(ByVal authorizationTicket As String, ByVal xmlInput As String) As String
			Dim results() As Object = Me.Invoke("RunQuickPricerV1", New Object() {authorizationTicket, xmlInput})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub RunQuickPricerV1Async(ByVal authorizationTicket As String, ByVal xmlInput As String)
			Me.RunQuickPricerV1Async(authorizationTicket, xmlInput, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RunQuickPricerV1Async(ByVal authorizationTicket As String, ByVal xmlInput As String, ByVal userState As Object)
			If (Me.RunQuickPricerV1OperationCompleted Is Nothing) Then
				Me.RunQuickPricerV1OperationCompleted = AddressOf Me.OnRunQuickPricerV1OperationCompleted
			End If
			Me.InvokeAsync("RunQuickPricerV1", New Object() {authorizationTicket, xmlInput}, Me.RunQuickPricerV1OperationCompleted, userState)
		End Sub

		Private Sub OnRunQuickPricerV1OperationCompleted(ByVal arg As Object)
			If (Not (Me.RunQuickPricerV1CompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RunQuickPricerV1Completed(Me, New RunQuickPricerV1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/RunQuickPricerV1ForLockDesk", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function RunQuickPricerV1ForLockDesk(ByVal authorizationTicket As String, ByVal xmlInput As String) As String
			Dim results() As Object = Me.Invoke("RunQuickPricerV1ForLockDesk", New Object() {authorizationTicket, xmlInput})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub RunQuickPricerV1ForLockDeskAsync(ByVal authorizationTicket As String, ByVal xmlInput As String)
			Me.RunQuickPricerV1ForLockDeskAsync(authorizationTicket, xmlInput, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub RunQuickPricerV1ForLockDeskAsync(ByVal authorizationTicket As String, ByVal xmlInput As String, ByVal userState As Object)
			If (Me.RunQuickPricerV1ForLockDeskOperationCompleted Is Nothing) Then
				Me.RunQuickPricerV1ForLockDeskOperationCompleted = AddressOf Me.OnRunQuickPricerV1ForLockDeskOperationCompleted
			End If
			Me.InvokeAsync("RunQuickPricerV1ForLockDesk", New Object() {authorizationTicket, xmlInput}, Me.RunQuickPricerV1ForLockDeskOperationCompleted, userState)
		End Sub

		Private Sub OnRunQuickPricerV1ForLockDeskOperationCompleted(ByVal arg As Object)
			If (Not (Me.RunQuickPricerV1ForLockDeskCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent RunQuickPricerV1ForLockDeskCompleted(Me, New RunQuickPricerV1ForLockDeskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/CreateLead", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function CreateLead(ByVal authorizationTicket As String, ByVal quickPricerLoanId As String) As String
			Dim results() As Object = Me.Invoke("CreateLead", New Object() {authorizationTicket, quickPricerLoanId})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub CreateLeadAsync(ByVal authorizationTicket As String, ByVal quickPricerLoanId As String)
			Me.CreateLeadAsync(authorizationTicket, quickPricerLoanId, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub CreateLeadAsync(ByVal authorizationTicket As String, ByVal quickPricerLoanId As String, ByVal userState As Object)
			If (Me.CreateLeadOperationCompleted Is Nothing) Then
				Me.CreateLeadOperationCompleted = AddressOf Me.OnCreateLeadOperationCompleted
			End If
			Me.InvokeAsync("CreateLead", New Object() {authorizationTicket, quickPricerLoanId}, Me.CreateLeadOperationCompleted, userState)
		End Sub

		Private Sub OnCreateLeadOperationCompleted(ByVal arg As Object)
			If (Not (Me.CreateLeadCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent CreateLeadCompleted(Me, New CreateLeadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		<System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.lendersoffice.com/los/webservices/CreateLoan", RequestNamespace:="http://www.lendersoffice.com/los/webservices/", ResponseNamespace:="http://www.lendersoffice.com/los/webservices/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>
		Public Function CreateLoan(ByVal authorizationTicket As String, ByVal quickPricerLoanId As String, ByVal templateName As String) As String
			Dim results() As Object = Me.Invoke("CreateLoan", New Object() {authorizationTicket, quickPricerLoanId, templateName})
			Return CType(results(0), String)
		End Function

		'''<remarks/>
		Public Overloads Sub CreateLoanAsync(ByVal authorizationTicket As String, ByVal quickPricerLoanId As String, ByVal templateName As String)
			Me.CreateLoanAsync(authorizationTicket, quickPricerLoanId, templateName, Nothing)
		End Sub

		'''<remarks/>
		Public Overloads Sub CreateLoanAsync(ByVal authorizationTicket As String, ByVal quickPricerLoanId As String, ByVal templateName As String, ByVal userState As Object)
			If (Me.CreateLoanOperationCompleted Is Nothing) Then
				Me.CreateLoanOperationCompleted = AddressOf Me.OnCreateLoanOperationCompleted
			End If
			Me.InvokeAsync("CreateLoan", New Object() {authorizationTicket, quickPricerLoanId, templateName}, Me.CreateLoanOperationCompleted, userState)
		End Sub

		Private Sub OnCreateLoanOperationCompleted(ByVal arg As Object)
			If (Not (Me.CreateLoanCompletedEvent) Is Nothing) Then
				Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg, System.Web.Services.Protocols.InvokeCompletedEventArgs)
				RaiseEvent CreateLoanCompleted(Me, New CreateLoanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
			End If
		End Sub

		'''<remarks/>
		Public Shadows Sub CancelAsync(ByVal userState As Object)
			MyBase.CancelAsync(userState)
		End Sub

		Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
			If ((url Is Nothing) _
						OrElse (url Is String.Empty)) Then
				Return False
			End If
			Dim wsUri As System.Uri = New System.Uri(url)
			If ((wsUri.Port >= 1024) _
						AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
				Return True
			End If
			Return False
		End Function
	End Class

	'''<remarks/>
	<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>
	Public Delegate Sub RunQuickPricerV2CompletedEventHandler(ByVal sender As Object, ByVal e As RunQuickPricerV2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RunQuickPricerV2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RunQuickPricerV1CompletedEventHandler(ByVal sender As Object, ByVal e As RunQuickPricerV1CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RunQuickPricerV1CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub RunQuickPricerV1ForLockDeskCompletedEventHandler(ByVal sender As Object, ByVal e As RunQuickPricerV1ForLockDeskCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RunQuickPricerV1ForLockDeskCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub CreateLeadCompletedEventHandler(ByVal sender As Object, ByVal e As CreateLeadCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateLeadCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")>  _
    Public Delegate Sub CreateLoanCompletedEventHandler(ByVal sender As Object, ByVal e As CreateLoanCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateLoanCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
